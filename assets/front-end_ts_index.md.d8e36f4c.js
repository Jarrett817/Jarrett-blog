import{o as n,c as s,a}from"./app.dff7797b.js";const p='{"title":"node","description":"","frontmatter":{"title":"node","desc":"《JavaScript设计模式》、《大话设计模式》笔记","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[{"level":2,"title":"启用 ts","slug":"启用-ts"},{"level":2,"title":"类型 type vs 类 class","slug":"类型-type-vs-类-class"},{"level":2,"title":"基本语法","slug":"基本语法"},{"level":2,"title":"TS 的类型","slug":"ts-的类型"},{"level":2,"title":"注意点","slug":"注意点"},{"level":2,"title":"联合类型和交差类型","slug":"联合类型和交差类型"},{"level":2,"title":"泛型","slug":"泛型"}],"relativePath":"front-end/ts/index.md","lastUpdated":1658914366594}',t={},o=[a('<h1 id="typescript"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> typescript</h1><h2 id="启用-ts"><a class="header-anchor" href="#启用-ts" aria-hidden="true">#</a> 启用 ts</h2><ul><li><p>webpack+babel</p></li><li><p>vite2</p></li><li><p>tsc typescript compiler 执行编译，会把 ts 编译成 js</p></li></ul><h2 id="类型-type-vs-类-class"><a class="header-anchor" href="#类型-type-vs-类-class" aria-hidden="true">#</a> 类型 type vs 类 class</h2><p>type js 基本类型 NaN、undefined、string、bool、number、symbol、bigint、object</p><p>类比如 Array、Object，都是 object，但需要更准确的区分</p><p>ts 类型兼容 js 的类型</p><h2 id="基本语法"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h2><div class="language-ts"><pre><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> undenfined<span class="token punctuation">;</span>\n<span class="token keyword">const</span> b<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> c<span class="token operator">:</span> Object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> d<span class="token operator">:</span> <span class="token builtin">Array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 泛型</span>\n<span class="token keyword">const</span> d<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 函数</span>\n<span class="token keyword">const</span> add1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">add2</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n\n<span class="token comment">// interface 声明多个属性</span>\n<span class="token keyword">interface</span> <span class="token class-name">xxx</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="ts-的类型"><a class="header-anchor" href="#ts-的类型" aria-hidden="true">#</a> TS 的类型</h2><div class="language-ts"><pre><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// a.name</span>\n\n<span class="token comment">// unkown需要用断言</span>\n<span class="token comment">// let b:unknown=JSON.parse(&#39;{name:&#39;jarrett&#39;}&#39;)</span>\n<span class="token punctuation">(</span>b <span class="token keyword">as</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">print</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 空集，什么都没有</span>\n<span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 元组，固定长度的数组，ts特有，js可随意改变数组</span>\n\n<span class="token keyword">let</span> x<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 枚举，一般不用，前端用 type=东|南|西|北 更香</span>\n<span class="token keyword">enum</span> Dir <span class="token punctuation">{</span>\n  东<span class="token punctuation">,</span>\n  南<span class="token punctuation">,</span>\n  西<span class="token punctuation">,</span>\n  北<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> d<span class="token operator">:</span> Dir <span class="token operator">=</span> Dir<span class="token punctuation">.</span>东<span class="token punctuation">;</span> <span class="token comment">//即Dir.东是0</span>\n</code></pre></div><h2 id="注意点"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><ul><li><p>typeof null 会返回 object，错误点</p></li><li><p>typeof funtion 会返回 function，但函数也是对象</p></li><li><p>class 包括 Array、Function，class 既是 value 也是 type</p></li></ul><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// A可以被当作值来赋值</span>\n<span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>\n<span class="token comment">// 左侧是类型，右侧是值</span>\n<span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// A的类型是object;</span>\n</code></pre></div><h2 id="联合类型和交差类型"><a class="header-anchor" href="#联合类型和交差类型" aria-hidden="true">#</a> 联合类型和交差类型</h2><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token constant">A</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 存在问题，不知道何时是什么类型</span>\n<span class="token comment">// 用typeof判断类型再调用api，比如string的toString()</span>\n<span class="token comment">// ts可以在你写条件判断的时候自动推测、收窄类型</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token constant">A</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// never</span>\n<span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>\n\n<span class="token comment">// 把两个复杂类型合并</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 声明div的类型</span>\n<span class="token keyword">let</span> div1<span class="token operator">:</span> HTMLDivElement<span class="token punctuation">;</span>\n</code></pre></div><h2 id="泛型"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span> <span class="token operator">|</span> <span class="token number">123</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">FNumber</span> <span class="token operator">=</span> <span class="token constant">F</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token comment">// T可代表任何类型</span>\n<span class="token keyword">const</span> addN<span class="token operator">:</span> Add<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> addS<span class="token operator">:</span> Add<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token comment">// react的例子</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> App<span class="token operator">:</span> FunctionComponent<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span> <span class="token operator">=</span> props <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  props<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 把泛型当作函数来理解</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token comment">// 重载</span>\n<span class="token keyword">type</span> <span class="token class-name">Add<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> add<span class="token operator">:</span> Add<span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// type Add2 = (a: number, b: number) =&gt; number;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token string">&#39;&#39;</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-ts"><pre><code><span class="token comment">// 封装网络请求</span>\n<span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name">CreateResource</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  create<span class="token operator">:</span> <span class="token punctuation">(</span>attrs<span class="token operator">:</span> Omit<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Response<span class="token operator">&lt;</span>User<span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">createResource</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">create</span><span class="token punctuation">(</span>attrs<span class="token operator">:</span> Omit<span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> userResource <span class="token operator">=</span> <span class="token function">createFetcher</span><span class="token punctuation">(</span><span class="token string">&#39;/api/v1/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',22)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
