import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.20c98a65.js";const p="/Jarrett-blog/assets/callback-hell.ede82009.png",D=JSON.parse('{"title":"js","description":"","frontmatter":{"title":"js","desc":"《JavaScript设计模式》、《大话设计模式》笔记","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[],"relativePath":"front-end/js/index.md","filePath":"front-end/js/index.md","lastUpdated":1698074398000}'),o={name:"front-end/js/index.md"},e=l(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="js-数据类型" tabindex="-1">JS 数据类型 <a class="header-anchor" href="#js-数据类型" aria-label="Permalink to &quot;JS 数据类型&quot;">​</a></h2><p>js 数据类型包括四基两空一对象</p><ol><li>Undefined；</li><li>Null；</li><li>Boolean；</li><li>String；</li><li>Number；</li><li>Symbol；</li><li>bigInt</li><li>Object。</li></ol><p>引用类型 object 包括</p><ul><li>普通对象 Object</li><li>数组对象 Array</li><li>正则对象 RegExp</li><li>日期对象 Date</li><li>数学函数 Math</li><li>函数对象 Function</li></ul><h3 id="两个空类型" tabindex="-1">两个空类型 <a class="header-anchor" href="#两个空类型" aria-label="Permalink to &quot;两个空类型&quot;">​</a></h3><h4 id="undefined" tabindex="-1">Undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;Undefined&quot;">​</a></h4><p>Undefined 类型表示未定义，只有一个值 undefined，任何变量在赋值前都是 Undefined 类型，值为 undefined。 一般可以用全局变量 undefined 直接使用，但是 js 设计上有个失误，undefined 是个变量而不是关键字 即便是 es5 后被改为 read-only，它仍然能被修改</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">undefined</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">5</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#859900;">typeof</span><span style="color:#839496;"> </span><span style="color:#B58900;">undefined</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">//輸出number</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用 void(0)获取 undefined 是更好的做法</p><h4 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;Null&quot;">​</a></h4><p>Null 表示定义了但是为空，也只有一个值 null，但是 null 是 JS 关键字，所以可以放心使用 null 关键字来获取 null 值 null 更准确的说是一个空对象指针，用 typeof 检测返回的是 object null 可以用来做对象的初始化</p><p>null 不是对象，使用 typeof 会输出 object 是 js 的历史 bug。JS 最初版本使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全 0，导致被误判成 object</p><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h3><p>ES6 中引入的新原始数据类型，一切非字符串的对象 key 的集合。 Symbol 值通过 Symbol 构造函数生成，生成一个 <strong>全局独一无二的值</strong> ，即便使用相同的字符串作为参数，它们也不相等。这个参数相当于一种描述</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Symbol</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;a&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Symbol</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;a&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">a1</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a2</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">//false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Symbol 类型可以显式的转换为字符串</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sym</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Symbol</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;xxx&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">String</span><span style="color:#839496;">(</span><span style="color:#268BD2;">sym</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">sym</span><span style="color:#839496;">.</span><span style="color:#268BD2;">toString</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//ES2019提供了一个实例属性description，可以直接返回描述</span></span>
<span class="line"><span style="color:#268BD2;">sym</span><span style="color:#839496;">.</span><span style="color:#268BD2;">description</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="作用域和闭包" tabindex="-1">作用域和闭包 <a class="header-anchor" href="#作用域和闭包" aria-label="Permalink to &quot;作用域和闭包&quot;">​</a></h2><h3 id="闭包的概念" tabindex="-1">闭包的概念 <a class="header-anchor" href="#闭包的概念" aria-label="Permalink to &quot;闭包的概念&quot;">​</a></h3><ul><li>MDN: <ul><li>函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起构成闭包（closure）。也就是说，闭包可以让你**<em>从内部函数访问外部函数作用域</em>**。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。</li><li>闭包是**<em>由函数以及声明该函数的词法环境组合而成的</em>**。</li></ul></li><li>阮一峰老师： <ul><li>闭包就是能够读取其他函数内部变量的函数。可以把闭包简单理解成**<em>&quot;定义在一个函数内部的函数&quot;</em>**</li></ul></li></ul><p>总结下来就是闭包是定义在一个函数内部的函数，可以从内部函数访问外部函数作用域，它是由函数以及声明该函数的词法环境组合而成的，包含被引用变量 or 函数的对象</p><h3 id="变量的作用域" tabindex="-1">变量的作用域 <a class="header-anchor" href="#变量的作用域" aria-label="Permalink to &quot;变量的作用域&quot;">​</a></h3><p>首先明确 JavaScript 中变量的作用域。</p><p>分为局部变量和全局变量</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">//Javascript的函数，在内部可以直接读取全局变量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">999</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">alert</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">f1</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 999</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//另一方面，在函数外部自然无法读取函数内的局部变量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">999</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">alert</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">999</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">f1</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">alert</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 999</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  于是，为了在外部读取局部变量，我们在函数中再返回一个函数</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  result 是执行 f1 时创建的 f2 函数实例的引用。f2 的实例维持了一个对它的词法环境（变量 n 存在于其中）的引用。</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  通过调用这个实例，实现了对函数内部变量的访问</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  */</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">999</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f2</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">alert</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">result</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 999</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h4><p>作用域链：内部函数访问外部函数的变量，采用的是链式查找的方式来决定取哪个值，这种结构称之为作用域链。查找时，采用的是**<em>就近原则</em>**。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">num</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">10</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 外部函数</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">num</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">20</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fun</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 内部函数</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">num</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">fun</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">fn</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//结果为20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><p>this 指的是，调用函数的那个对象。this 永远指向函数运行时所在的对象。</p><ol><li>以函数的形式调用时，this 永远都是 window。比如 fun();相当于 window.fun();</li><li>以方法的形式调用时，this 是调用方法的那个对象</li><li>以构造函数的形式调用时，this 是新创建的那个对象</li><li>使用 call 和 apply 调用时，this 是指定的那个对象</li></ol><p>一般的定义函数是运行的时候决定 this 的指向。箭头函数中的 this 是在定义函数的时候绑定，而不是在执行函数的时候绑定。箭头函数没有自己的 this，箭头函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。当对箭头函数使用 call()和 apply()方法时对函数内的 this 没有影响。箭头函数会从自己的作用域链的上一层继承 this</p><h2 id="闭包的用法" tabindex="-1">闭包的用法 <a class="header-anchor" href="#闭包的用法" aria-label="Permalink to &quot;闭包的用法&quot;">​</a></h2><p>闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来。这显然类似于面向对象编程。在面向对象编程中，对象允许我们将某些数据（对象的属性）与一个或者多个方法相关联。</p><p>因此，通常你使用只有一个方法的对象的地方，都可以使用闭包。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">可以利用闭包，将具有不同参数的同一功能分别用一个全局变量引用</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">add5和add10其实就是闭包function(y)</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">原因就在于makeAdder是function(y)的父函数，而function(y)被赋给了一个全局变量，这导致function(y)始终在内存中，而function(y)的存在依赖于makeAdder，因此makeAdder也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeAdder</span><span style="color:#839496;">(x) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (y) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">y</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">add5</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeAdder</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">add10</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeAdder</span><span style="color:#839496;">(</span><span style="color:#D33682;">10</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">add5</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// 7</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">add10</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// 12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">编程语言中，比如 Java，是支持将方法声明为共有或者私有（public、private）的，即它们只能被同一个类中的其它方法所调用。</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">而 JavaScript 没有这种原生支持，但我们可以使用闭包来模拟私有方法。这种方式可称为模块模式</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Counter</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(val) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;"> </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">val</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">increment</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">decrement</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">value</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 0 */</span></span>
<span class="line"><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">increment</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">increment</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 2 */</span></span>
<span class="line"><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">decrement</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 1 */</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//或者不声明为自调用函数</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeCounter</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(val) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;"> </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">val</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">increment</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">decrement</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">changeBy</span><span style="color:#839496;">(</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">value</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">privateCounter</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Counter1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeCounter</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Counter2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">makeCounter</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 0 */</span></span>
<span class="line"><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">increment</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">increment</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 2 */</span></span>
<span class="line"><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">decrement</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 1 */</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Counter2</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">/* logs 0 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h4 id="应用举例" tabindex="-1">应用举例 <a class="header-anchor" href="#应用举例" aria-label="Permalink to &quot;应用举例&quot;">​</a></h4><p>（1）myModule.js：（定义一个模块，向外暴露多个函数，供外界调用）</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">function myModule() {</span></span>
<span class="line"><span style="color:#839496;">    //私有数据</span></span>
<span class="line"><span style="color:#839496;">    var msg = &#39;Smyhvae Haha&#39;</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    //操作私有数据的函数</span></span>
<span class="line"><span style="color:#839496;">    function doSomething() {</span></span>
<span class="line"><span style="color:#839496;">        console.log(&#39;doSomething() &#39; + msg.toUpperCase()); //字符串大写</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    function doOtherthing() {</span></span>
<span class="line"><span style="color:#839496;">        console.log(&#39;doOtherthing() &#39; + msg.toLowerCase()) //字符串小写</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    //通过【对象字面量】的形式进行包裹，向外暴露多个函数</span></span>
<span class="line"><span style="color:#839496;">    return {</span></span>
<span class="line"><span style="color:#839496;">        doSomething1: doSomething,</span></span>
<span class="line"><span style="color:#839496;">        doOtherthing2: doOtherthing</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上方代码中，外界可以通过 doSomething1 和 doOtherthing2 来操作里面的数据，但不让外界看到。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">（2）index.html:</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#839496;">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">    &lt;title&gt;05_闭包的应用_自定义JS模块&lt;/title&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;!--</span></span>
<span class="line"><span style="color:#839496;">闭包的应用 : 定义JS模块</span></span>
<span class="line"><span style="color:#839496;">  * 具有特定功能的js文件</span></span>
<span class="line"><span style="color:#839496;">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span>
<span class="line"><span style="color:#839496;">  * 【重要】只向外暴露一个包含n个方法的对象或函数</span></span>
<span class="line"><span style="color:#839496;">  * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</span></span>
<span class="line"><span style="color:#839496;">--&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;script type=&quot;text/javascript&quot; src=&quot;myModule.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;script type=&quot;text/javascript&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">    var module = myModule();</span></span>
<span class="line"><span style="color:#839496;">    module.doSomething1();</span></span>
<span class="line"><span style="color:#839496;">    module.doOtherthing2();</span></span>
<span class="line"><span style="color:#839496;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>方式二</p><p>同样是实现方式一种的功能，这里我们采取另外一种方式。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">（1）myModule2.js：（是一个立即执行的匿名函数）</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">(function () {</span></span>
<span class="line"><span style="color:#839496;">    //私有数据</span></span>
<span class="line"><span style="color:#839496;">    var msg = &#39;Smyhvae Haha&#39;</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    //操作私有数据的函数</span></span>
<span class="line"><span style="color:#839496;">    function doSomething() {</span></span>
<span class="line"><span style="color:#839496;">        console.log(&#39;doSomething() &#39; + msg.toUpperCase())</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    function doOtherthing() {</span></span>
<span class="line"><span style="color:#839496;">        console.log(&#39;doOtherthing() &#39; + msg.toLowerCase())</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">    //外部函数是即使运行的匿名函数，我们可以把两个方法直接传给window对象</span></span>
<span class="line"><span style="color:#839496;">    window.myModule = {</span></span>
<span class="line"><span style="color:#839496;">        doSomething1: doSomething,</span></span>
<span class="line"><span style="color:#839496;">        doOtherthing2: doOtherthing</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">})()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">（2）index.html：</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#839496;">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">    &lt;title&gt;05_闭包的应用_自定义JS模块2&lt;/title&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;!--</span></span>
<span class="line"><span style="color:#839496;">闭包的应用2 : 定义JS模块</span></span>
<span class="line"><span style="color:#839496;">  * 具有特定功能的js文件</span></span>
<span class="line"><span style="color:#839496;">  * 将所有的数据和功能都封装在一个函数内部(私有的)</span></span>
<span class="line"><span style="color:#839496;">  * 只向外暴露一个包信n个方法的对象或函数</span></span>
<span class="line"><span style="color:#839496;">  * 模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</span></span>
<span class="line"><span style="color:#839496;">--&gt;</span></span>
<span class="line"><span style="color:#839496;"></span></span>
<span class="line"><span style="color:#839496;">&lt;!--引入myModule文件--&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;script type=&quot;text/javascript&quot; src=&quot;myModule2.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;script type=&quot;text/javascript&quot;&gt;</span></span>
<span class="line"><span style="color:#839496;">    myModule.doSomething1()</span></span>
<span class="line"><span style="color:#839496;">    myModule.doOtherthing2()</span></span>
<span class="line"><span style="color:#839496;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/body&gt;</span></span>
<span class="line"><span style="color:#839496;">&lt;/html&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="闭包的作用" tabindex="-1">闭包的作用 <a class="header-anchor" href="#闭包的作用" aria-label="Permalink to &quot;闭包的作用&quot;">​</a></h2><p>由上可见，闭包的作用主要有两个：</p><ul><li>作用 1. 使用函数内部的变量在函数执行完后, 仍然存活在内存中(延长了局部变量的生命周期)</li><li>作用 2. 让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li></ul><p>隐藏局部变量，暴露操作函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn2</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">a</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">a</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn1</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">//执行外部函数fn1，返回的是内部函数fn2</span></span>
<span class="line"><span style="color:#268BD2;">f</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 3       //执行fn2</span></span>
<span class="line"><span style="color:#268BD2;">f</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 4       //再次执行fn2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">createAdd</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">n</span><span style="color:#839496;"> </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">add</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">createAdd</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">add</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#268BD2;">add</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="闭包的注意点" tabindex="-1">闭包的注意点 <a class="header-anchor" href="#闭包的注意点" aria-label="Permalink to &quot;闭包的注意点&quot;">​</a></h2><ol><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ol><hr><p>参考自<a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="noreferrer">阮一峰 JavaScript 闭包</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noreferrer">mdn 闭包</a>、<a href="https://github.com/qianguyihao/Web" target="_blank" rel="noreferrer">qianguyihao  github</a></p><h1 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-label="Permalink to &quot;原型和原型链&quot;">​</a></h1><h3 id="明确一些概念" tabindex="-1">明确一些概念： <a class="header-anchor" href="#明确一些概念" aria-label="Permalink to &quot;明确一些概念：&quot;">​</a></h3><h4 id="什么是堆-什么是栈" tabindex="-1">什么是堆？什么是栈？ <a class="header-anchor" href="#什么是堆-什么是栈" aria-label="Permalink to &quot;什么是堆？什么是栈？&quot;">​</a></h4><ul><li>堆（heap）是不连续的内存区域，即数据可以任意存放， 主要存放的是对象等。</li><li>栈（stack）是一块连续的内存区域，每个区块按照一定次序存放（后进先出），栈中主要存放的是基本类型的变量的值以及指向堆中的数组或者对象的地址</li></ul><h4 id="js-数据类型-1" tabindex="-1">JS 数据类型 <a class="header-anchor" href="#js-数据类型-1" aria-label="Permalink to &quot;JS 数据类型&quot;">​</a></h4><p>数字 number、字符串 string、boolean 布尔、符号 Symbol、null、undefined、对象 object。</p><ul><li>“类型”是 JS 数据的分类，分 7 种，“类”是针对于对象的分类，有无数种</li><li>其中又可以分为两类：基本数据类型（非对象）和引用数据类型（对象）。 <ul><li>基本数据类型：数字 number、字符串 string、boolean 布尔、符号 Symbol、null、undefined</li><li>引用数据类型：对象 object</li></ul></li></ul><p>基本数据类型存储在栈 stack，引用数据类型存储在堆 heap</p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>所有的引用类型（数组、对象、函数）都有<code>__proto__</code>这个属性。构造函数拥有<code>prototype</code>属性</p><p><code>prototype</code>显式原型，<code>__proto__</code>隐式原型。 构造函数对象才有 prototype 属性， 实例具有<code>__proto__</code>属性,他们指向的都是堆区中的原型对象（<code>prototype</code>和<code>__proto__</code>保存都是堆区中原型对象的地址，并且是一样的地址，所以<code>构造函数.prototype===实例对象.__proto__</code>）</p><p>原型对象是所有实例共享的，并且每个实例都可以调用原型上的函数方法</p><p>Object.prototype 是所有对象的（直接或者间接）原型，对于数组、函数来说，是间接原型，但是对于对象，是直接原型</p><p>所有函数对象都是由 Function 构造的 <code>函数对象.__proto__===Function.prototype</code></p><p>构造函数有 Object/Array/Function</p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>实例可以直接调用原型上的属性和方法，如果没有，就去原型的原型里找，再没有，就去原型的原型的原型里找，于是形成了原型链</p><p>原型链的终点是 null</p><p>JS 世界： xxx 的原型指的是 xxx 的<code>__proto__</code></p><p>首先有一个根对象、一个函数原型、一个数组原型。函数原型和数组原型的原型（<code>__proto__</code>）为根对象。</p><p>然后创建 Function 构造函数，<code>__proto__</code>为函数原型，Function.prototype 也为函数原型（Function 的<code>prototype</code>和<code>__proto__</code>指向同一对象即函数原型）。</p><p>接着开始用 Function 构造 Object 和 Array，分别让他们的 prototype 为根对象和数组原型。至此 JS 世界创建完毕，最后用 window 对象里的三个属性 Object、Array、Function 分别保存指向前面创建的 Object、Array、Function 函数对象</p><p>Object.prototype 是由 Function 构造的，但是并不是说 Object 是 Function 构造的，Object.prototype 只是个 Function 构造出来的地址，Function 添加了这个指向 prototype 对象的地址，prototype 指向的对象才是根对象</p><h1 id="异步和-ajax" tabindex="-1">异步和 ajax <a class="header-anchor" href="#异步和-ajax" aria-label="Permalink to &quot;异步和 ajax&quot;">​</a></h1><h2 id="什么是同步-什么是异步" tabindex="-1">什么是同步？什么是异步？ <a class="header-anchor" href="#什么是同步-什么是异步" aria-label="Permalink to &quot;什么是同步？什么是异步？&quot;">​</a></h2><p>能直接拿到结果的是同步，不能直接拿到结果的就是异步</p><p>JS 是单线程语言，会优先把同步任务执行完再去执行异步任务。</p><p>举例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//依次是1 4 3 2，因为1和4都是同步任务，js碰到异步任务会先挂起，等同步任务执行完再执行异步任务</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>异步的应用场景有：</p><ol><li>定时任务：setTimeout（定时执行）、setInterval（循环执行）</li><li>网络请求：ajax 请求、动态加载</li><li>事件绑定（addEventListener）</li></ol><h2 id="什么是回调" tabindex="-1">什么是回调？ <a class="header-anchor" href="#什么是回调" aria-label="Permalink to &quot;什么是回调？&quot;">​</a></h2><p>提前定义好的一个函数，等着被作为实参传入另一函数，并在该函数内被调用，用以来完成某些任务，一般只要作为参数被调用的函数都称为回调函数。</p><p>回调分同步回调和异步回调。在同步函数中作为参数被调用就是同步回调，如果传给异步函数，就是异步回调，当异步函数执行完毕时调用 fn，就能通过回调拿到了异步处理的结果。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">employee</span><span style="color:#839496;">(telNumber) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">\`给\${</span><span style="color:#268BD2;">telNumber</span><span style="color:#2AA198;">}致电中。。。\`</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">employer</span><span style="color:#839496;">(telNumber, callback) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;一会把号码发给你，替我打个电话&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">callback</span><span style="color:#839496;">(</span><span style="color:#268BD2;">telNumber</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }, </span><span style="color:#D33682;">2000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">employer</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;12345678&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">employee</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="ajax" tabindex="-1">ajax <a class="header-anchor" href="#ajax" aria-label="Permalink to &quot;ajax&quot;">​</a></h2><p><strong>Ajax</strong>：Asynchronous Javascript And XML（异步 JavaScript 和 XML）</p><p>我们在访问一个普通的网站时，当浏览器加载完 HTML、CSS、JS 以后，网站的内容就固定了。如果想让网站内容发生更改，就必须刷新页面才能够看到更新的内容。</p><p>可如果用到异步更新，情况就大为改观了。比如，我们在访问新浪微博时，看到一大半了，点击底部的加载更多，会自动帮我们加载更多的微博，同时页面并没有刷新。</p><p>试想一下，如果没有异步刷新的话，每次点击“加载更多”，网页都要刷新，体验就太不好了。</p><p>web 前端里的异步更新，就要用到 Ajax。</p><h4 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h4><p>第一步：获取 XMLHttpRequest 对象 <code>let request=new XMLHttpRequest()</code> 第二步：设置请求参数 <code>request.open(&#39;GET&#39;,xxx)</code> 第三步：监听对象的状态</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第四步：发送请求 <code>request.send()</code></p><h4 id="readystate-状态码" tabindex="-1">readyState 状态码 <a class="header-anchor" href="#readystate-状态码" aria-label="Permalink to &quot;readyState 状态码&quot;">​</a></h4><table><thead><tr><th>值</th><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理被创建，但尚未调用 open() 方法。</td></tr><tr><td>1</td><td>OPENED</td><td>open() 方法已经被调用。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td>send() 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td>3</td><td>LOADING</td><td>下载中； responseText 属性已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>下载操作已完成。</td></tr></tbody></table><p>ajax 加载示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">getJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onclick</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;/5.json&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">obj</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">JSON</span><span style="color:#839496;">.</span><span style="color:#268BD2;">parse</span><span style="color:#839496;">(</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">obj</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">myName</span><span style="color:#839496;">.</span><span style="color:#268BD2;">textContent</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">obj</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#268BD2;">getXML</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onclick</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;/4.xml&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dom</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">responseXML</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">text</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dom</span><span style="color:#839496;">.</span><span style="color:#268BD2;">getElementsByTagName</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;warning&#39;</span><span style="color:#839496;">)[</span><span style="color:#D33682;">0</span><span style="color:#839496;">].</span><span style="color:#268BD2;">textContent</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">text</span><span style="color:#839496;">.</span><span style="color:#268BD2;">trim</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#268BD2;">getCSS</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onclick</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;/style.css&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">&gt;=</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#D33682;">300</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">style</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">createElement</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;style&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">style</span><span style="color:#839496;">.</span><span style="color:#268BD2;">innerHTML</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">head</span><span style="color:#839496;">.</span><span style="color:#268BD2;">appendChild</span><span style="color:#839496;">(</span><span style="color:#268BD2;">style</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;失败&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#268BD2;">getJS</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onclick</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;/2.js&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onload</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">script</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">createElement</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;script&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">script</span><span style="color:#839496;">.</span><span style="color:#268BD2;">innerHTML</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">body</span><span style="color:#839496;">.</span><span style="color:#268BD2;">appendChild</span><span style="color:#839496;">(</span><span style="color:#268BD2;">script</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onerror</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {};</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#268BD2;">getHTML</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onclick</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;/3.html&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onload</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">createElement</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;div&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">div</span><span style="color:#839496;">.</span><span style="color:#268BD2;">innerHTML</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">body</span><span style="color:#839496;">.</span><span style="color:#268BD2;">appendChild</span><span style="color:#839496;">(</span><span style="color:#268BD2;">div</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onerror</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {};</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><h1 id="js-模块化" tabindex="-1">JS 模块化 <a class="header-anchor" href="#js-模块化" aria-label="Permalink to &quot;JS 模块化&quot;">​</a></h1><p>es6 之前，社区的模块加载方案有 CommonJS（服务器）和 AMD（浏览器）两种。 es6 在语言标准层面上实现了模块功能，取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</p><p>CommonJS 需要在运行时才能确定模块的依赖关系</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// CommonJS模块</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">stat</span><span style="color:#839496;">, </span><span style="color:#268BD2;">exists</span><span style="color:#839496;">, </span><span style="color:#268BD2;">readfile</span><span style="color:#839496;"> } </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">require</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;fs&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_fs</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">require</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;fs&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">stat</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_fs</span><span style="color:#839496;">.</span><span style="color:#268BD2;">stat</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">exists</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_fs</span><span style="color:#839496;">.</span><span style="color:#268BD2;">exists</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">readfile</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_fs</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readfile</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>模块被当成对象使用。 而 es6 模块是静态化的设计思想，模块不是对象，而是通过 <code>export</code>  显式导出，再通过 <code>import</code>  导入 es6 的模块可以在编译时就完成加载，一个文件就是一个模块</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">stat</span><span style="color:#839496;">, </span><span style="color:#268BD2;">exists</span><span style="color:#839496;">, </span><span style="color:#268BD2;">readFile</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;fs&#39;</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><ol><li>export 命令</li></ol><p><strong>导出变量</strong> ： <code>export var name=&#39;Michael&#39;</code>  or</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">name</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;Michael&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">name</span><span style="color:#839496;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>导出函数</strong> ：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">multiply</span><span style="color:#839496;">(x, y) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#268BD2;">y</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><pre><code> 或者也可以使用别名
</code></pre><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">v1</span><span style="color:#839496;">() { </span><span style="color:#859900;">...</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">v2</span><span style="color:#839496;">() { </span><span style="color:#859900;">...</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v1</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#268BD2;">streamV1</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v2</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#268BD2;">streamV2</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">v2</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#268BD2;">streamLatestVersion</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li><code>import</code>  命令</li></ol><p>用法和 <code>export</code>  一样，但是需要 <strong>注意</strong> ： <code>import</code>  的输入变量都是只读的，但是如果是对象，是可以修改属性的（不要轻易改变）</p><p><code>import &#39;xxx&#39;</code> 会执行所加载的模块，但是不输入任何值</p><p>还可以整体加载 <code>import * as xxx from &#39;xxx&#39;</code>  用 xxx.xxx 进行调用</p><ol start="3"><li>export default 命令</li></ol><p>可以不用知道模块的属性和方法，直接重命名导入使用，且不用加花括号，用法基本同上</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// export-default.js</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#859900;">default</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;foo&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// import-default.js</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> </span><span style="color:#268BD2;">customName</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;./export-default&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">customName</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// &#39;foo&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>export default 就是输出一个叫做 default 的变量或方法，然后允许任意命名。</p><p>但是要注意，一个模块只能有一个默认输出</p><h2 id="进阶用法" tabindex="-1">进阶用法 <a class="header-anchor" href="#进阶用法" aria-label="Permalink to &quot;进阶用法&quot;">​</a></h2><ol start="4"><li>import 和 export 复合写法</li></ol><p><code>export {foo,bar} from &#39;module&#39;;</code>  也可改名和整体输出</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 接口改名</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">foo</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myFoo</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;my_module&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 整体输出</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#B58900;">*</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;my_module&#39;</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>还可以具名接口改默认，默认接口改具名</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">es6</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#859900;">default</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;./someModule&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">es6</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;./someModule&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#859900;">default</span><span style="color:#839496;"> </span><span style="color:#268BD2;">es6</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> { </span><span style="color:#859900;">default</span><span style="color:#839496;"> </span><span style="color:#859900;">as</span><span style="color:#839496;"> </span><span style="color:#268BD2;">es6</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;./someModule&#39;</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li>模块继承</li></ol><p>利用复合写法，实现在一个模块中导出另一个模块的属性和方法</p><ol start="6"><li><p>跨模块常量</p><pre><code> 建如下目录
 -constants
 --db.js
 --user.js
 --index.js
</code></pre><p>分别在 db 和 user 中导出各种 const 变量，然后利用复合写法，在 index 中直接导入导出 这样一来，外部使用时，直接从 index 导入就可以 <code>import {xxx} from &#39;./constants/index&#39;</code></p></li><li><p>动态加载</p></li></ol><p>前面提到的都是静态加载，只能在模块顶层，不支持条件判断，但是 import 在 es2020 中已经支持了动态加载模块，可以在任何地方使用，是在运行时执行 import(specifier)返回一个 Promise 对象 <strong>适用场景</strong>  下面是<code>import()</code>的一些适用场合。 （1）按需加载。 <code>import()</code>可以在需要的时候，再加载某个模块。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">button.addEventListener(&#39;click&#39;, event =&gt; {</span></span>
<span class="line"><span style="color:#839496;">  import(&#39;./dialogBox.js&#39;)</span></span>
<span class="line"><span style="color:#839496;">  .then(dialogBox =&gt; {</span></span>
<span class="line"><span style="color:#839496;">    dialogBox.open();</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">  .catch(error =&gt; {</span></span>
<span class="line"><span style="color:#839496;">    /* Error handling */</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面代码中，<code>import()</code>方法放在<code>click</code>事件的监听函数之中，只有用户点击了按钮，才会加载这个模块。 （2）条件加载 <code>import()</code>可以放在<code>if</code>代码块，根据不同的情况，加载不同的模块。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">if (condition) {</span></span>
<span class="line"><span style="color:#839496;">  import(&#39;moduleA&#39;).then(...);</span></span>
<span class="line"><span style="color:#839496;">} else {</span></span>
<span class="line"><span style="color:#839496;">  import(&#39;moduleB&#39;).then(...);</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，如果满足条件，就加载模块 A，否则加载模块 B。 （3）动态的模块路径 <code>import()</code>允许模块路径动态生成。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">import(f())</span></span>
<span class="line"><span style="color:#839496;">.then(...);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面代码中，根据函数<code>f</code>的返回结果，加载不同的模块。</p><h2 id="浏览器加载-js" tabindex="-1">浏览器加载 js <a class="header-anchor" href="#浏览器加载-js" aria-label="Permalink to &quot;浏览器加载 js&quot;">​</a></h2><p>**传统方式 **</p><ul><li><code>&lt;script src=&quot;/a/b/c.js&quot;/&gt;</code></li><li><code>&lt;script&gt;some code...&lt;/script&gt;</code></li></ul><p>由于 js 单线程的关系，渲染引擎会等到执行完脚本再继续向下渲染。如果是外部脚本，还得算上下载时间</p><p>因此如果脚本体积庞大，就会阻塞浏览器，所以浏览器允许异步加载</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">script</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">src</span><span style="color:#859900;">=</span><span style="color:#2AA198;">&quot;path/to/myModule.js&quot;</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">defer</span><span style="color:#586E75;">&gt;&lt;/</span><span style="color:#268BD2;">script</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">script</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">src</span><span style="color:#859900;">=</span><span style="color:#2AA198;">&quot;path/to/myModule.js&quot;</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">async</span><span style="color:#586E75;">&gt;&lt;/</span><span style="color:#268BD2;">script</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>defer: dom 完全生成，以及其他脚本执行完毕，才执行</li><li>async: 一旦下载完，渲染引擎终端渲染，执行此脚本</li></ul><p><strong>注意</strong>  多个 defer 按出现顺序加载，多个 async 不能保证加载顺序</p><p><strong>加载 es6 模块</strong>  <code>&lt;script type=&quot;module&quot; src=&quot;./xxx.js&quot;&gt;&lt;/script&gt;</code>  带有 <code>type=&quot;module&quot;</code>  的都是异步加载，等到页面渲染完才执行，等同于 defer</p><p>需要 <strong>注意</strong> ：模块顶层的 this 返回 undefined，而不是指向 window 可以用来判断是否是 es6 模块 <code>const isNotModuleScript=this!==undefined</code></p><h2 id="es6-vs-commonjs" tabindex="-1">ES6 VS CommonJS <a class="header-anchor" href="#es6-vs-commonjs" aria-label="Permalink to &quot;ES6 VS CommonJS&quot;">​</a></h2><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载(对象)，ES6 模块是编译时输出接口（静态定义）。</li><li>CommonJS 模块的<code>require()</code>是同步加载模块，ES6 模块的<code>import</code>命令是异步加载，有一个独立的模块依赖的解析阶段。</li></ul><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h1 id="promise、async、await" tabindex="-1">Promise、async、await <a class="header-anchor" href="#promise、async、await" aria-label="Permalink to &quot;Promise、async、await&quot;">​</a></h1><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><p>作用：</p><ol><li>规范了异步事件处理的写法</li><li>避免了出现回调地狱</li><li>方便错误捕获</li></ol><h3 id="什么是回调地狱" tabindex="-1">什么是回调地狱？ <a class="header-anchor" href="#什么是回调地狱" aria-label="Permalink to &quot;什么是回调地狱？&quot;">​</a></h3><p>为了获取异步结果而造成的层层嵌套 <img src="`+p+`" alt="回调地狱.png"> 或是这样</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">b</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">c</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">d</span><span style="color:#839496;">() {}</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">d</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">c</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">b</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">a</span><span style="color:#839496;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>而使用 <code>Promise</code> ，就可以优雅地处理异步事件</p><p>只要用<code>return new Promise((resolve,reject)=&gt;{})</code>就能创建一个异步事件</p><p><code>Promise</code>  对象存放着某个未来才会结束的事件。有两个 <strong>特点</strong> ：</p><ol><li>对象的状态不受外界影响。 共有三种状态<code>pending</code>  <code>fulfilled</code>  <code>rejected</code></li><li>一旦状态改变，就不会再变，任何时候都可以获得这个结果。状态的改变，只有两种可能：从 <code>pending</code>  变为 <code>fulfilled</code>  和从 <code>pending</code>  变为 <code>rejected</code></li></ol><h3 id="常见用法" tabindex="-1">常见用法 <a class="header-anchor" href="#常见用法" aria-label="Permalink to &quot;常见用法&quot;">​</a></h3><ol><li>创建 <code>Promise</code>  实例</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">promise</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;">(resolve, reject) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// ... some code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#586E75;font-style:italic;">/* 异步操作成功 */</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">//将Promise对象的状态从pending变为resolved</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">//将Promise对象的状态从pending变为rejected</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">error</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li><code>Promise.prototype.then </code></li></ol><ul><li><p>如何使用</p><p>接受两个回调函数。</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">//resolved状态调用</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (value) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// success</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">//rejected状态调用，可选</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (error) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// failure</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>then 的返回值大致有两种情况：</li></ul><p>情况 1：返回 Promise 实例对象。返回的该实例对象可调用下一个 then。 情况 2：返回普通值。返回的普通值会直接传递给下一个 then，根据 promise 的状态，通过 then 参数中函数的参数接收该值。 因此，then 可以进行链式调用，避免了层层的回调地狱</p><h3 id="具体应用" tabindex="-1">具体应用 <a class="header-anchor" href="#具体应用" aria-label="Permalink to &quot;具体应用&quot;">​</a></h3><p>如 ajax 请求</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">//普通版</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ajax</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> url </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">url</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">//Promise版</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ajax</span><span style="color:#859900;">=</span><span style="color:#839496;">(url)</span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve,reject)</span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">request</span><span style="color:#859900;">=new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">XMLHttpRequest</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">open</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;GET&#39;</span><span style="color:#839496;">,</span><span style="color:#268BD2;">url</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onreadystatechange</span><span style="color:#859900;">=</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;">(){</span></span>
<span class="line"><span style="color:#839496;">       </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">readyState</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">4</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#839496;"> </span><span style="color:#859900;">==</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">response</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">       }</span><span style="color:#859900;">else</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Error</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">statusText</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">       }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">request</span><span style="color:#839496;">.</span><span style="color:#268BD2;">send</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">ajax</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;/a/b/c&quot;</span><span style="color:#839496;">).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">    (resp)</span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">resp</span><span style="color:#839496;">)},</span></span>
<span class="line"><span style="color:#839496;">    (err)</span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">err</span><span style="color:#839496;">)}</span></span>
<span class="line"><span style="color:#839496;">  )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="其他常用的-api" tabindex="-1">其他常用的 api <a class="header-anchor" href="#其他常用的-api" aria-label="Permalink to &quot;其他常用的 api&quot;">​</a></h3><ol><li><code>Promise.prototype.catch()</code></li></ol><p><code>reject</code>  和抛出 <code>Error</code>  是等同的，都可以用 <code>catch</code>  捕获，但是不能在状态已经变成 <code>resolved</code>  后再抛出错误，一般不在 <code>then()</code>  方法里定义 reject 状态的回调函数，总是使用 catch 方法 要注意的是， <code>Promise</code>  内部的错误不会影响外部代码的执行，只能用 <code>catch</code>  捕获</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 写法一</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">promise</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (resolve, reject) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">throw</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Error</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;test&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#268BD2;">promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (error) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">error</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 写法二</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">promise</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (resolve, reject) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Error</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;test&#39;</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#268BD2;">promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (error) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">error</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ol start="2"><li><p><code>Promise.prototype.finally()</code></p><p>无论 promise 对象最后的状态如何都会执行回调。</p></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">promise</span></span>
<span class="line"><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(result </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {···})</span></span>
<span class="line"><span style="color:#839496;">.</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(error </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {···})</span></span>
<span class="line"><span style="color:#839496;">.</span><span style="color:#268BD2;">finally</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {···});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><pre><code> 简单实现：
</code></pre><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">finally</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (callback) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.constructor;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">    value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">P</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">callback</span><span style="color:#839496;">()).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">),</span></span>
<span class="line"><span style="color:#839496;">    reason </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">P</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">callback</span><span style="color:#839496;">()).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">throw</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reason</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      })</span></span>
<span class="line"><span style="color:#839496;">  );</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li><p><code>Promsie.prototype.all() </code></p><pre><code> 接受一个promise实例的数组，
</code></pre></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">p</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">all</span><span style="color:#839496;">([</span><span style="color:#268BD2;">p1</span><span style="color:#839496;">, </span><span style="color:#268BD2;">p2</span><span style="color:#839496;">, </span><span style="color:#268BD2;">p3</span><span style="color:#839496;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code> p1 p2 p3都为fulfilled，p才会变为fulfilled，此时p1 p2 p3的返回值组成一个数组，传递给p的回调
 若是其中有一个为rejected，p的状态就是rejected，此时第一个被reject的实例的返回值传递给p的回调函数
</code></pre><ol start="4"><li><p><code>Promsie.prototype.race()</code></p><p>与 all()不同的是，只要有一个实例率先改变状态，p 的状态就跟着改变。率先改变的 Promise 实例的返回值，就传给 p 的回调函数</p></li><li><p><code>Promsie.prototype.allSettled() </code></p></li></ol><p>接收一组 Promise 实例作为参数，包装成一个新的 Promise，只有等这些实例都返回结果（不管是成功还是失败），包装实例才会结束。生成的新的 Promise 实例，一旦结束，状态总是 fulfilled，它的监听函数会接收到一个数组，每个数组成员对应一个 Promise 实例的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">resolved</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">42</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">rejected</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">allSettledPromise</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">allSettled</span><span style="color:#839496;">([</span><span style="color:#268BD2;">resolved</span><span style="color:#839496;">, </span><span style="color:#268BD2;">rejected</span><span style="color:#839496;">]);</span></span>
<span class="line"><span style="color:#268BD2;">allSettledPromise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (results) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">results</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// [</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//    { status: &#39;fulfilled&#39;, value: 42 },</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//    { status: &#39;rejected&#39;, reason: -1 }</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="6"><li><code>Promise.prototype.any()</code></li></ol><p>也是接受一组<code>Promise</code>实例作为参数，包装成一个新的<code>Promise</code>实例返回，只要有一个是<code>fulfilled</code>，包装实例就是<code>fulfilled</code>，如果所有的实例参数都是<code>rejected</code>，包装实例就会变成<code>rejected</code> 假如接收三个<code>promise</code>实例，一个<code>resolve</code>，两个<code>reject</code>，结果回调中的参数会是成功的结果，如果都是<code>reject</code>，结果会是一个数组，每个成员对应一个<code>rejected</code>的实例抛出的错误。这个数组是一个<code>AggregateError</code>实例</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">resolved</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">42</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">rejected</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">alsoRejected</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#B58900;">Infinity</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">any</span><span style="color:#839496;">([</span><span style="color:#268BD2;">resolved</span><span style="color:#839496;">, </span><span style="color:#268BD2;">rejected</span><span style="color:#839496;">, </span><span style="color:#268BD2;">alsoRejected</span><span style="color:#839496;">]).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (result) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">result</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 42</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">any</span><span style="color:#839496;">([</span><span style="color:#268BD2;">rejected</span><span style="color:#839496;">, </span><span style="color:#268BD2;">alsoRejected</span><span style="color:#839496;">]).</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (results) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">results</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// [-1, Infinity]</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="7"><li><code>Promise.prototype.resolve()</code></li></ol><p>能将现有对象转为 Promise 对象，参数有四种情况 （1）是一个 Promise 实例，原封不动返回 （2）是一个带有 then 方法的对象。这个对象会被转为 Promise 对象，然后立即执行其中的 then 方法 （3）参数不具有 then 方法，或根本不是对象。会返回一个新的 Promise 对象，状态为 resolved （4）不带有任何参数。直接返回一个 resolved 状态的 Promise 对象</p><ol start="8"><li><code>Promise.prototype.reject()</code></li></ol><p>返回一个新的状态为 rejected 的 Promise 实例 它的参数，会原封不动地作为 reason 变成后续方法的参数</p><h3 id="promise-的简单实现" tabindex="-1">Promise 的简单实现 <a class="header-anchor" href="#promise-的简单实现" aria-label="Permalink to &quot;Promise 的简单实现&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Promise</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;">(executor) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;pending&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">undefined</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">undefined</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;pending&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;resolved&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(fn </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reject</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> reason </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;pending&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;rejected&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reason</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(fn </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">executor</span><span style="color:#839496;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">error</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">error</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">then</span><span style="color:#839496;">(onFulfilled, onRejected) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">typeof</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;function&#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#839496;"> </span><span style="color:#859900;">:</span><span style="color:#839496;"> value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">onRejected</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">typeof</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;function&#39;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onRejected</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">:</span><span style="color:#839496;"> err </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">throw</span><span style="color:#839496;"> </span><span style="color:#268BD2;">err</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">          };</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">//返回一个新的promise对象实现链式调用</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;fulfilled&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;rejected&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">state</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;pending&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onFulfilled</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onRejected</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">promise1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;我成功执行了&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#268BD2;">promise1</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(onfulFilled </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">onfulFilled</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">onfulFilled</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(e </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><h2 id="async、await" tabindex="-1">async、await <a class="header-anchor" href="#async、await" aria-label="Permalink to &quot;async、await&quot;">​</a></h2><h3 id="iterator-和-for-of" tabindex="-1">Iterator 和 for...of <a class="header-anchor" href="#iterator-和-for-of" aria-label="Permalink to &quot;Iterator 和 for...of&quot;">​</a></h3><p>Iterator 遍历器是一种接口，为不同的数据结构提供统一的访问机制。当使用 for...of 时，会自动去寻找 Iterator 接口。es6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性，一个数据结构只要有这个属性，就是可遍历的。 原生具备 Iterator 接口的数据结构如下。</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul><h3 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h3><p>这是 es6 提供的一种异步解决方案 在这之前，异步编程的解决方案有</p><ul><li>回调函数</li><li>事件监听</li><li>发布/订阅</li><li>Promise 对象</li></ul><p>Generator 是一个状态机，封装多个内部状态，函数返回一个遍历器对象。 Generator 是分段执行的，每次调用 next 就执行一步，遇到下一个 yield 就停止。 遍历结束时 done 属性会变为 true next()一下走一步</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#268BD2;">doWhat</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">yield</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;吃饭&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;睡觉&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">man</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">doWhat</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">man</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">man</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">{</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  done: false,</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  value: &quot;吃饭&quot;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">{</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  done: true,</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  value: &quot;睡觉&quot;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><code>function* xxx</code>和<code>function *xxx</code>一样</li><li>yield 将函数截成多个状态</li><li>Generator 不会自己执行，而是返回一个遍历器对象</li><li>遍历器对象通过.next()方法调用各个状态</li></ul><p><strong>Generator 可用于消息传递</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">yield</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;我启动了！&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">yield</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#D33682;">3</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">z</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">yield</span><span style="color:#839496;"> </span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#D33682;">3</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">y</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// {value: &quot;我启动了！&quot;, done: false}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">y</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// {value: 5, done: false}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">y</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">(</span><span style="color:#D33682;">100</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// {value: 300, done: false}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">y</span><span style="color:#839496;">.</span><span style="color:#268BD2;">next</span><span style="color:#839496;">(</span><span style="color:#D33682;">1000</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">// {value: 4, done: true}</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>async、await 就是 Genarator 的语法糖</strong>  通过 Generator 函数加自动执行器实现，于是不需要一直 next()</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(resolve </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;hhh&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">async</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">doSomething1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">await</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">doSomething1</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//hhh</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol><li>async 修饰符表示这个函数是异步函数</li><li>await 是个运算符，阻塞后面代码</li><li>await 如果等到的 Promise 对象就得到其 resolve 值</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">async</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">doSomething1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">await</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;hhh&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">x</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">doSomething1</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#268BD2;">doSomething1</span><span style="color:#839496;">().</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//打印结果：</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//Promise {&lt;pending&gt;}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//hhh</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol><li>async 返回一个 Promise 对象，async 修饰的函数内部返回的值，会成为 then 中回调方法的参数</li><li>await 如果等到的不是 Promise 对象，就得到一个表达式的运算结果</li></ol><h2 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h2><h1 id="防抖和节流" tabindex="-1">防抖和节流 <a class="header-anchor" href="#防抖和节流" aria-label="Permalink to &quot;防抖和节流&quot;">​</a></h1><h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h2><p>规定一个单位时间，这个单位时间内只能有一次触发事件的回调函数执行，如果该时间内事件触发多次，只有一次生效   代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">throttle</span><span style="color:#839496;">(fn, delay) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_this</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">canUse</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">.</span><span style="color:#268BD2;">apply</span><span style="color:#839496;">(</span><span style="color:#268BD2;">_this</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }, </span><span style="color:#268BD2;">delay</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>**适用场景 ** 可用于 dom 元素拖拽、高频重复点击提交等等。以下是实现一个可拖动的 div，利用节流来减少回调的执行次数</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;!</span><span style="color:#268BD2;">DOCTYPE</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">html</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">html</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">head</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">meta</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">charset</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;utf-8&quot;</span><span style="color:#839496;"> </span><span style="color:#586E75;">/&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">meta</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">name</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;viewport&quot;</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">content</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;width=device-width&quot;</span><span style="color:#839496;"> </span><span style="color:#586E75;">/&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">title</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">JS Bin</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">title</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">head</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">body</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;box&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">拖动我</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">body</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">html</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;">.box</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">background</span><span style="color:#839496;">: blue;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">color</span><span style="color:#839496;">: white;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">width</span><span style="color:#839496;">: </span><span style="color:#D33682;">3</span><span style="color:#859900;">em</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">line-height</span><span style="color:#839496;">: </span><span style="color:#D33682;">2</span><span style="color:#859900;">em</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">user-select</span><span style="color:#839496;">: none;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">position</span><span style="color:#839496;">: absolute;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">cursor</span><span style="color:#839496;">: move;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">box</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">querySelector</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;.box&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">down</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  x: </span><span style="color:#D33682;">0</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  y: </span><span style="color:#D33682;">0</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">move</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">throttle</span><span style="color:#839496;">(fn, delay) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_this</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">canUse</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">.</span><span style="color:#268BD2;">apply</span><span style="color:#839496;">(</span><span style="color:#268BD2;">_this</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">canUse</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      }, </span><span style="color:#268BD2;">delay</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">moveFn</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">box</span><span style="color:#839496;">.</span><span style="color:#268BD2;">style</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">move</span><span style="color:#839496;">.</span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#268BD2;">down</span><span style="color:#839496;">.</span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;px&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">box</span><span style="color:#839496;">.</span><span style="color:#268BD2;">style</span><span style="color:#839496;">.</span><span style="color:#268BD2;">top</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">move</span><span style="color:#839496;">.</span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#268BD2;">down</span><span style="color:#839496;">.</span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;px&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">moveDiv</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">box</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;mousedown&#39;</span><span style="color:#839496;">, e </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">down</span><span style="color:#839496;">.</span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">clientX</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#268BD2;">box</span><span style="color:#839496;">.</span><span style="color:#268BD2;">offsetLeft</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">down</span><span style="color:#839496;">.</span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">clientY</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#268BD2;">box</span><span style="color:#839496;">.</span><span style="color:#268BD2;">offsetTop</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">canMove</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;mouseup&#39;</span><span style="color:#839496;">, () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">canMove</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">throttled</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">throttle</span><span style="color:#839496;">(</span><span style="color:#268BD2;">moveFn</span><span style="color:#839496;">, </span><span style="color:#D33682;">50</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;mousemove&#39;</span><span style="color:#839496;">, e </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">canMove</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">move</span><span style="color:#839496;">.</span><span style="color:#268BD2;">x</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">clientX</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">move</span><span style="color:#839496;">.</span><span style="color:#268BD2;">y</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">clientY</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">throttled</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">moveDiv</span><span style="color:#839496;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h2><p>规定一个时间 n，事件触发后在 n 秒后执行回调，如果 n 秒内又被触发，则重新计时 代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">debounce</span><span style="color:#839496;">(fn, delay) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_this</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">timerId</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">clearTimeout</span><span style="color:#839496;">(</span><span style="color:#268BD2;">timerId</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">.</span><span style="color:#268BD2;">apply</span><span style="color:#839496;">(</span><span style="color:#268BD2;">_this</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }, </span><span style="color:#268BD2;">delay</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>适用场景</strong>  如防止表单多次提交、减少 ajax。以下是模拟一个表单，使用防抖减少持续输入过程过程中的冗余提交</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">debounce</span><span style="color:#839496;">(fn, delay) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_this</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">timerId</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">clearTimeout</span><span style="color:#839496;">(</span><span style="color:#268BD2;">timerId</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">.</span><span style="color:#268BD2;">apply</span><span style="color:#839496;">(</span><span style="color:#268BD2;">_this</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">timerId</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }, </span><span style="color:#268BD2;">delay</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">submit</span><span style="color:#839496;">(val) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">val</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">text</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">querySelector</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;#text&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">debounced</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">debounce</span><span style="color:#839496;">(</span><span style="color:#268BD2;">submit</span><span style="color:#839496;">, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">text</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;input&#39;</span><span style="color:#839496;">, e </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">debounced</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><ul><li><p>写出下面运行的结果,解释原因</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#D33682;">1</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;1&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 结果为11，数字与字符串相加，会把数字转为字符串，再相加</span></span>
<span class="line"><span style="color:#2AA198;">&#39;a&#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#2AA198;">&#39;b&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 结果为aNaN,+&#39;b&#39;结果为NaN，NaN与字符串相加，转为字符串，所以是aNaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>如何让 (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) 的值为 true?</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">Number</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">valueOf</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Number</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p>写出下面运行的结果,解释原因</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test</span><span style="color:#839496;">(person) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">person</span><span style="color:#839496;">.</span><span style="color:#268BD2;">age</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">26</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">person</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    name: </span><span style="color:#2AA198;">&#39;张三&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">    age: </span><span style="color:#D33682;">12</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">person</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">p1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  name: </span><span style="color:#2AA198;">&#39;李四&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  age: </span><span style="color:#D33682;">19</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">p2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// -&gt; {name:&#39;张三&#39;,age:26}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 函数内复制了p1的副本到局部变量person，与p1指向同一个保存引用的堆内存地址，因此age被改为26</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// -&gt; {name:&#39;李四&#39;,age:12}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 函数内部对person变量重新赋值，指向了新的堆内存地址，最后return出来的person是新赋值的person</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>实现两个大数相加</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;123456789012345678&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">b</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;876543210987654321&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">add</span><span style="color:#839496;">(a, b) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Math</span><span style="color:#839496;">.</span><span style="color:#268BD2;">max</span><span style="color:#839496;">(</span><span style="color:#268BD2;">a</span><span style="color:#839496;">.length, </span><span style="color:#268BD2;">b</span><span style="color:#839496;">.length);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">!==</span><span style="color:#839496;"> </span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;">.</span><span style="color:#268BD2;">padStart</span><span style="color:#839496;">(</span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;">, </span><span style="color:#D33682;">0</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">b</span><span style="color:#839496;"> </span><span style="color:#859900;">!==</span><span style="color:#839496;"> </span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">b</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">b</span><span style="color:#839496;">.</span><span style="color:#268BD2;">padStart</span><span style="color:#839496;">(</span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;">, </span><span style="color:#D33682;">0</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">carryFlag</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">maxLength</span><span style="color:#839496;"> </span><span style="color:#859900;">-</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">&gt;=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">--</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">parseInt</span><span style="color:#839496;">(</span><span style="color:#268BD2;">a</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">]) </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">parseInt</span><span style="color:#839496;">(</span><span style="color:#268BD2;">b</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">]);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">carryFlag</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#859900;">++</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">carryFlag</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">sum</span><span style="color:#839496;"> </span><span style="color:#859900;">/</span><span style="color:#839496;"> </span><span style="color:#D33682;">10</span><span style="color:#839496;"> </span><span style="color:#859900;">&gt;=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">carryFlag</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">sum</span><span style="color:#839496;"> </span><span style="color:#859900;">%</span><span style="color:#839496;"> </span><span style="color:#D33682;">10</span><span style="color:#839496;">) </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    } </span><span style="color:#859900;">else</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sum</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">carryFlag</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">add</span><span style="color:#839496;">(</span><span style="color:#268BD2;">a</span><span style="color:#839496;">, </span><span style="color:#268BD2;">b</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;999999999999999999&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>手写类型判断函数</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myTypeOf</span><span style="color:#839496;">(params) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Object</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">toString</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">params</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">.</span><span style="color:#268BD2;">slice</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">).</span><span style="color:#268BD2;">split</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;">)[</span><span style="color:#D33682;">1</span><span style="color:#839496;">].</span><span style="color:#268BD2;">toLowerCase</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>手写深拷贝函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myTypeOf</span><span style="color:#839496;">(params) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">Object</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">toString</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">params</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">.</span><span style="color:#268BD2;">slice</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#859900;">-</span><span style="color:#D33682;">1</span><span style="color:#839496;">).</span><span style="color:#268BD2;">split</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39; &#39;</span><span style="color:#839496;">)[</span><span style="color:#D33682;">1</span><span style="color:#839496;">].</span><span style="color:#268BD2;">toLowerCase</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(ary, fn) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">index</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">length</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ary</span><span style="color:#839496;">.length;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">index</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">length</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">(</span><span style="color:#268BD2;">ary</span><span style="color:#839496;">[</span><span style="color:#268BD2;">index</span><span style="color:#839496;">], </span><span style="color:#268BD2;">index</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">index</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">deepClone</span><span style="color:#839496;">(target, map </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WeakMap</span><span style="color:#839496;">()) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> ([</span><span style="color:#2AA198;">&#39;object&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;array&#39;</span><span style="color:#839496;">].</span><span style="color:#268BD2;">includes</span><span style="color:#839496;">(</span><span style="color:#268BD2;">myTypeOf</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">))) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">isObj</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myTypeOf</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">) </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;object&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">isObj</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> {} </span><span style="color:#859900;">:</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">get</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">)) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">get</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">result</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">keys</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">isObj</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Object</span><span style="color:#839496;">.</span><span style="color:#268BD2;">keys</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">) </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#268BD2;">target</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(</span><span style="color:#268BD2;">keys</span><span style="color:#839496;">, (value, key) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">isObj</span><span style="color:#839496;">) </span><span style="color:#268BD2;">key</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">result</span><span style="color:#839496;">[</span><span style="color:#268BD2;">key</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">deepClone</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">[</span><span style="color:#268BD2;">key</span><span style="color:#839496;">], </span><span style="color:#268BD2;">map</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">else</span><span style="color:#839496;"> </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">target</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="作用域与闭包" tabindex="-1">作用域与闭包 <a class="header-anchor" href="#作用域与闭包" aria-label="Permalink to &quot;作用域与闭包&quot;">​</a></h3><ol><li>下面代码的输出结果</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">20</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">a</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">100</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">10</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">foo</span><span style="color:#839496;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>解：输出为 10，因为 js 采用词法作用域，函数内部的作用域在函数定义时就确定了，优先查找并使用函数内部新创建的 a 变量</p><ol><li>以下代码在执行过程中是否存在闭包</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">outer</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">inner</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">b</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">b</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">inner</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">outer</span><span style="color:#839496;">()();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>解：不存在，虽然 inner 函数在 outer 函数的作用域链里，但是没有引用外部变量，未形成闭包</p><ol><li>以下变种代码是否存在闭包，并且说出 inner 函数执行时的作用域链</li></ol><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">function outer() {</span></span>
<span class="line"><span style="color:#839496;">  var a = 1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  function inner() {</span></span>
<span class="line"><span style="color:#839496;">    var b = 2;</span></span>
<span class="line"><span style="color:#DC322F;">-    console.log(b);</span></span>
<span class="line"><span style="color:#859900;">+    console.log(a);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  return inner;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">outer()();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>解：存在，inner 函数的 scopeChain:[inner,outer,global]</p><ol><li>以下代码是否存在闭包</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">outer</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">inner</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">a</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">inner</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">outer</span><span style="color:#839496;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>解：存在，内部 inner 函数引用了其外部作用域链上的变量，形成闭包，但由于没有 return 出来，在执行完毕后，闭包会被回收</p><h3 id="原型链-1" tabindex="-1">原型链 <a class="header-anchor" href="#原型链-1" aria-label="Permalink to &quot;原型链&quot;">​</a></h3><ul><li>手动实现 new 函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">New</span><span style="color:#839496;">(func) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 创建一个中间对象实例</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {};</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 将实例的原型指向构造函数的原型</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">func</span><span style="color:#839496;">.prototype </span><span style="color:#859900;">!==</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">res</span><span style="color:#839496;">.__proto__ </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">func</span><span style="color:#839496;">.prototype;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 将构造函数的this指向新创建的中间对象</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ret</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">func</span><span style="color:#839496;">.</span><span style="color:#268BD2;">apply</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">, </span><span style="color:#859900;">Array</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">slice</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">, </span><span style="color:#D33682;">1</span><span style="color:#839496;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 如果构造函数有明确指定返回对象，当返回结果类型是object或者function时，返回对象，否则返回指定的结果</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> ((</span><span style="color:#859900;">typeof</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ret</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;object&#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">||</span><span style="color:#839496;"> </span><span style="color:#859900;">typeof</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ret</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;function&#39;</span><span style="color:#839496;">) </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ret</span><span style="color:#839496;"> </span><span style="color:#859900;">!==</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ret</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>手动实现 <code>instanceof</code> 的功能</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myInstanceof</span><span style="color:#839496;">(instance, target) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">instanceProto</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">instance</span><span style="color:#839496;">.__proto__,</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">targetProto</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">target</span><span style="color:#839496;">.prototype;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">instanceProto</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">instanceProto</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#268BD2;">targetProto</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">else</span><span style="color:#839496;"> </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myInstanceof</span><span style="color:#839496;">(</span><span style="color:#268BD2;">instanceProto</span><span style="color:#839496;">, </span><span style="color:#268BD2;">target</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="this、闭包" tabindex="-1">this、闭包 <a class="header-anchor" href="#this、闭包" aria-label="Permalink to &quot;this、闭包&quot;">​</a></h3><ul><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">name</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;window&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">person1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  name: </span><span style="color:#2AA198;">&#39;person1&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">foo1</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">foo2</span><span style="color:#839496;">: () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">),</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">person2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> { name: </span><span style="color:#2AA198;">&#39;person2&#39;</span><span style="color:#839496;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo1</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，this指向调用foo1的person1</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，通过call指定foo1的this为person2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo2</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，箭头函数的this由所在的作用域决定，var person不会创建作用域，因此指向全局作用域window</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo2</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，箭头函数的this在声明时就已经确定，无法被call、apply改变</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">()(); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，person1.foo3()返回了内部函数，调用时是在全局作用域</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">)(); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，内部函数的调用依然是在全局作用域</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">().</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，改变了内部函数的this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">()(); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，内部箭头函数的this即foo4的作用域的this</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">)(); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，改变了foo4的this</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">().</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，箭头函数不会被改变this</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">name</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;window&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Person</span><span style="color:#839496;">(name) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">name</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">name</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">person1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Person</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;person1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">person2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Person</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;person2&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo1</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，构造函数的this指向实例对象</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，改变this指向</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo2</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，箭头函数的this声明时已确定，指向实例</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo2</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，箭头函数不会被call改变this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">()(); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，内部函数先返回再执行，this指向window</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">)(); </span><span style="color:#586E75;font-style:italic;">// &#39;window&#39;，函数的this在被调用时确定，先返回了函数，再执行，指向window</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo3</span><span style="color:#839496;">().</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，指定了内部函数的this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">()(); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，内部箭头函数的this即foo4的this，指向实例</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">)(); </span><span style="color:#586E75;font-style:italic;">// &#39;person2&#39;，指定的foo4的this即内部箭头函数的this</span></span>
<span class="line"><span style="color:#268BD2;">person1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">foo4</span><span style="color:#839496;">().</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">person2</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// &#39;person1&#39;，无法指定箭头函数的this</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myName</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;章三&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">innerBar</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">getName</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">test1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">myName</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">setName</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (newName) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">myName</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">newName</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">innerBar</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">bar</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#268BD2;">bar</span><span style="color:#839496;">.</span><span style="color:#268BD2;">setName</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;李四&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">bar</span><span style="color:#839496;">.</span><span style="color:#268BD2;">getName</span><span style="color:#839496;">(); </span><span style="color:#586E75;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">bar</span><span style="color:#839496;">.</span><span style="color:#268BD2;">getName</span><span style="color:#839496;">()); </span><span style="color:#586E75;font-style:italic;">// 1 &#39;李四&#39;，存在闭包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ul><h3 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h3><p>注意点： 1、<code>promise.then</code> 会将状态持续传递下去，除非抛出错误或者 <code>return</code> 了 <code>Promise.reject</code> 2、没有显示返回值的函数默认返回 <code>undefined</code>，这同样会将<code>.then</code> 返回的 <code>promise</code> 状态置为 <code>fulfilled</code>,同样能将<code>.then</code>中的回调放入微任务队列 3、同步任务优先、异步任务挂起，处理顺序根据任务队列情况而定，宏任务优先级低，只有微任务队列清空才会去拿一个宏任务出来执行 4、PromiseA+规定当 then 中参数不为函数时，必须忽略，表现在.then 中，会原样返回 promise 结果</p><ul><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">0</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">      .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">      .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">      .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">6</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">7</span><span style="color:#839496;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 0、1、5、3、2、4、7、6</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">script开始</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">第一行的resolve同步执行 log 0，然后主线程直接执行到后续的第一个then，其中的回调直接放入微任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">此时script中同步任务执行完毕，主线程空闲，开始处理微任务，log 1</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">同步执行Promise.resolve,log 5，.then，当前上下文中同步任务执行完毕，将log 3 放入微任务队列，任务挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">此时当前上下文中同步任务执行完毕，没有显式返回，相当于resolve，执行外层第二个.then，把log 2 放入微任务队列，任务挂起，此时没有同步任务，主线程去执行微任务队列，log 3</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">执行完后，return undefined，将后面log 4放入微任务队列，任务挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">没有同步任务，主线程去处理微任务，log 2，执行完成后return undefined，将后面log 7放入微任务</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">没有同步任务，主线程去处理微任务，log 4，完成后返回undefined，将后面log 6放入微任务队列，任务挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">没有同步任务，主线程去处理微任务，log 7</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">现在只剩下微任务队列里还剩一个log 6，执行log 6</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">first</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">p</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">7</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">5</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">6</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">p</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(arg </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">arg</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#268BD2;">first</span><span style="color:#839496;">().</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(arg </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">arg</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 3、7、4、1、2、5、promise&lt;fulfilled，1&gt;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> script开始</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 执行first函数，同步执行log 3</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 同步执行new Promise，log 7，setTimeout将回调分发至宏任务队列，任务挂起，主线程往下执行resolve(1)</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> log 1进入微任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 执行resolve(2)，log 2 放入微任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 同步执行p.then挂起，执行first后面的.then 挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 主线程同步执行log 4，同步任务执行完毕</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 执行微任务队列，依次log 1、log 2</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 微任务全部执行完毕，拿一个宏任务出来执行，log 5</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 下一步resolve 6 没用，Promise A+ 中说明不可改变已经处理完毕的promise状态</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> 最后一步log p，是一个已经被置为fulfilled的promise</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></li><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">async1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">async</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;async1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;timer1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }, </span><span style="color:#D33682;">2000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">await</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(resolve </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;promise1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;async1 end&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;async1 success&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;script start&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">async1</span><span style="color:#839496;">().</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;script end&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#D33682;">3</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(</span><span style="color:#D33682;">4</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;timer2&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// script start、async1、promise1、script end、1、timer2、timer1</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">同步执行script start</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">执行 async1，log async1</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">setTimeout 放入宏任务队列，异步任务挂起，执行下一个 new Promise，log promise1,没有resolve，挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">后续的log async1 success和script end其实是在.then中，但是这个promise没有被resolve，不会放入微任务队列，不会执行后续代码</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">执行async1后的.then，放入微任务队列，挂起，执行log script end</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">执行Promise.resolve(1).then ，不是函数，忽略，下一步.then执行，参数不是函数，忽略,catch(4)不是函数，忽略</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">下一步执行.then，放入log res 放入微任务队列（即log 1）</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">执行setTimeout，放入宏任务队列，挂起，主线程处理微任务，log 1</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">最后依次执行宏任务队列，根据等待时间的快慢，log timer2、timer 1 </span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li><li><p>写出下面运行的结果</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">p1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(resolve </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;resolve3&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;timer1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;resolve1&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;resolve2&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">})</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">p1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">finally</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;finally&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">res</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// resolve1、finally,undefined、timer1、promise&lt;fulfilled,undefined&gt;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  执行new Promise，setTimeout放入宏任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  resolve1放入微任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  resolve2放入微任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  任务挂起，执行.then,挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  无同步任务，执行微任务队列，log resolve1，resolve2没用</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  setTimeout放入宏任务队列</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  无同步任务，执行.finally，放入微任务队列，挂起</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  无同步任务，执行微任务队列，log finally，undefined，因为上一个.then没有return，函数默认return undefined</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">  微任务执行完毕，执行宏任务队列，log timer1、promise&lt;fulfilled,undefined&gt;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></li></ul><h3 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;异步编程&quot;">​</a></h3><ol><li>实现 sleep 函数，在 n 毫秒之后执行函数，并以函数结果作为返回值(可用 ts 来写)</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">sleep</span><span style="color:#839496;">(fn, time) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">    }, </span><span style="color:#268BD2;">time</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">sleep</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;执行&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}, </span><span style="color:#D33682;">3000</span><span style="color:#839496;">).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li><p>实现 Promise.retry</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 实现 Promise.retry，重试异步函数</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 异步函数执行成功后 resolve 结果，</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 失败后重试，尝试超过一定次数才真正的 reject</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">retry</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (fn, chance </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">async</span><span style="color:#839496;"> (resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">chance</span><span style="color:#859900;">--</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#859900;">await</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">err</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">!</span><span style="color:#268BD2;">chance</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">err</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">doSomething</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((res, reje) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">reje</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }, </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">Promise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">retry</span><span style="color:#839496;">(</span><span style="color:#268BD2;">doSomething</span><span style="color:#839496;">, </span><span style="color:#D33682;">3</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(res </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;success,res&#39;</span><span style="color:#839496;">))</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(err </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;error&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">err</span><span style="color:#839496;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li><li><p>手写 promise，使用<a href="https://github.com/promises-aplus/promises-tests" target="_blank" rel="noreferrer">promises-aplus-tests</a> 进行测试</p></li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><p>信号灯控制器 用异步编程的方式实现一个信号灯（交通灯）控制器，要求：</p><ul><li>红灯亮 50 秒</li><li>绿灯亮 60 秒</li><li>黄灯亮 10 秒</li><li>次序为 红-绿-黄-红-绿-黄</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">red</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;red&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">green</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;green&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">yellow</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;yellow&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// TODO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">red</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;red shining&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">green</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;green shining&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">yellow</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;yellow shining&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">TrafficLight</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  promisedLights </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">  stopSignal </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;">(lights) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">promisedLights</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">lights</span><span style="color:#839496;">.</span><span style="color:#268BD2;">map</span><span style="color:#839496;">(({ lighting, duration, color }) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">\`\${</span><span style="color:#268BD2;">color</span><span style="color:#2AA198;">} start!\`</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">lighting</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">stopSignal</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">              </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">\`\${</span><span style="color:#268BD2;">color</span><span style="color:#2AA198;">} end!\`</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">              </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">            }</span></span>
<span class="line"><span style="color:#839496;">          }, </span><span style="color:#268BD2;">duration</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">async</span><span style="color:#839496;"> </span><span style="color:#268BD2;">start</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">promisedLights</span><span style="color:#839496;">.length) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">stopSignal</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">promisedLights</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">break</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">light</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">promisedLights</span><span style="color:#839496;">.</span><span style="color:#268BD2;">shift</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">light</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> (</span><span style="color:#859900;">await</span><span style="color:#839496;"> </span><span style="color:#268BD2;">light</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">promisedLights</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#268BD2;">light</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">continue</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">stop</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">stopSignal</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">lights</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [</span></span>
<span class="line"><span style="color:#839496;">  { duration: </span><span style="color:#D33682;">5000</span><span style="color:#839496;">, lighting: </span><span style="color:#268BD2;">red</span><span style="color:#839496;">, color: </span><span style="color:#2AA198;">&#39;red&#39;</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  { duration: </span><span style="color:#D33682;">6000</span><span style="color:#839496;">, lighting: </span><span style="color:#268BD2;">green</span><span style="color:#839496;">, color: </span><span style="color:#2AA198;">&#39;green&#39;</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  { duration: </span><span style="color:#D33682;">1000</span><span style="color:#839496;">, lighting: </span><span style="color:#268BD2;">yellow</span><span style="color:#839496;">, color: </span><span style="color:#2AA198;">&#39;yellow&#39;</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#839496;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">trafficLight</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">TrafficLight</span><span style="color:#839496;">(</span><span style="color:#268BD2;">lights</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">trafficLight</span><span style="color:#839496;">.</span><span style="color:#268BD2;">start</span><span style="color:#839496;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">trafficLight</span><span style="color:#839496;">.</span><span style="color:#268BD2;">stop</span><span style="color:#839496;">(), </span><span style="color:#D33682;">100000</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><ol start="2"><li>实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有两个</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">scheduler</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Scheduler</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;1&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 1s后输出’1&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;2&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 2s后输出’2&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;3&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 2s后输出’3&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;4&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 3s后输出’4&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">start</span><span style="color:#839496;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Scheduler</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  limit </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  taskQueue </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">  count </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;">(limit) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">limit</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">limit</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">taskQueue</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(time, value) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">taskQueue</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">      () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#859900;">Promise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">, </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Date</span><span style="color:#839496;">().</span><span style="color:#268BD2;">getSeconds</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">          }, </span><span style="color:#268BD2;">time</span><span style="color:#839496;"> </span><span style="color:#859900;">*</span><span style="color:#839496;"> </span><span style="color:#D33682;">1000</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        })</span></span>
<span class="line"><span style="color:#839496;">    );</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">start</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">limit</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">taskQueue</span><span style="color:#839496;">.length) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">promiseTask</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">taskQueue</span><span style="color:#839496;">.</span><span style="color:#268BD2;">shift</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">promiseTask</span><span style="color:#839496;">().</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#859900;">--</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">start</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      });</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">limit</span><span style="color:#839496;">) </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">start</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">scheduler</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Scheduler</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;1&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 1s后输出’1&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">2</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;2&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 2s后输出’2&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;3&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 2s后输出’3&#39;</span></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addTask</span><span style="color:#839496;">(</span><span style="color:#D33682;">1</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;4&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 3s后输出’4&#39;</span></span>
<span class="line"><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;start&#39;</span><span style="color:#839496;">, </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Date</span><span style="color:#839496;">().</span><span style="color:#268BD2;">getSeconds</span><span style="color:#839496;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">start</span><span style="color:#839496;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="noreferrer">前端基础进阶（一）：内存空间详细图解</a><a href="https://www.jianshu.com/p/9b984874776c" target="_blank" rel="noreferrer">前端基础进阶（四）：作用域与作用域链</a><a href="https://juejin.cn/post/6844903473012539405" target="_blank" rel="noreferrer">JavaScript 深入之词法作用域和动态作用域</a><a href="https://www.jianshu.com/p/a6d37c77e8db" target="_blank" rel="noreferrer">前端基础进阶（二）：执行上下文详细图解</a><a href="https://juejin.cn/post/6844903473301946381" target="_blank" rel="noreferrer">JavaScript 深入之执行上下文栈</a><a href="https://juejin.cn/post/6844903474027560968" target="_blank" rel="noreferrer">JavaScript 深入之执行上下文</a><a href="https://www.jianshu.com/p/15ac7393bc1f" target="_blank" rel="noreferrer">前端基础进阶（十一）：详解面向对象、构造函数、原型与原型链</a><a href="https://www.jianshu.com/p/d647aa6d1ae6" target="_blank" rel="noreferrer">前端基础进阶（七）：全方位解读 this</a><a href="https://juejin.cn/post/6844903473872371725" target="_blank" rel="noreferrer">JavaScript 深入之从 ECMAScript 规范解读 this</a><a href="https://www.jianshu.com/p/21a16d44f150" target="_blank" rel="noreferrer">前端基础进阶（五）：闭包</a><a href="https://www.jianshu.com/p/9b4a54a98660" target="_blank" rel="noreferrer">前端基础进阶（六）：setTimeout 与循环闭包面试题详解</a><a href="https://juejin.cn/post/6844903475998900237" target="_blank" rel="noreferrer">JavaScript 深入之闭包</a><a href="https://www.jianshu.com/p/12b9f73c5a4f" target="_blank" rel="noreferrer">前端基础进阶（十四）：深入核心，详解事件循环机制</a><a href="https://juejin.cn/post/6844904079353708557" target="_blank" rel="noreferrer">说说事件循环机制</a> 浏览器工作原理与实践 --- 15-消息队列和事件循环：页面是怎么“活”起来的？ <a href="https://juejin.cn/post/6844903972008886279" target="_blank" rel="noreferrer">Promise 链式调用顺序引发的思考</a> 配合作业 1 食用 <a href="https://juejin.cn/post/6876686095954903048" target="_blank" rel="noreferrer">理解 Promise.then 回调的执行顺序</a></p>`,278),r=[e];function c(t,y,i,b,u,d){return n(),a("div",null,r)}const B=s(o,[["render",c]]);export{D as __pageData,B as default};
