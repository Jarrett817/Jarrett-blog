import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.20c98a65.js";const p="/Jarrett-blog/assets/conposition-api.ffc89170.png",f=JSON.parse('{"title":"vue3","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/vue3/index.md","filePath":"front-end/vue3/index.md","lastUpdated":1698074398000}'),e={name:"front-end/vue3/index.md"},o=l('<h1 id="vue3" tabindex="-1">vue3 <a class="header-anchor" href="#vue3" aria-label="Permalink to &quot;vue3&quot;">​</a></h1><h2 id="vue2-和-vue3-的区别" tabindex="-1">Vue2 和 Vue3 的区别 <a class="header-anchor" href="#vue2-和-vue3-的区别" aria-label="Permalink to &quot;Vue2 和 Vue3 的区别&quot;">​</a></h2><p>除了 api 和使用上的变化之外，主要有如下几点</p><ol><li><p>响应式的变化</p><ul><li>借助 proxy，实现更精细的响应式转换，比起 vue2 需要对对象进行深度遍历，vue3 只会将 get 到的对象属性进行包装，并且能够拦截新增的对象属性</li><li>可选的响应式转换，对于渲染函数中的变量传递更为自由，可以直接 return js 变量使用，省去了多余的响应式包装</li></ul></li><li><p>diff 算法</p><ul><li>vue2 双端 diff 算法。vue3 双端对比 + 最长递增子序列</li></ul></li><li><p>模版编译优化</p><ul><li>更改了编译优化策略。vue2 会标记静态节点和静态根节点，vue3 以 patchFlag 区分不同类型的动态节点，以 block 为维度收集子级树中所有的动态节点，更新时跳过所有静态节点直接更新动态节点，并且得益于 patchFlag 的区分，能做到精准的靶向更新</li><li>静态提升。把生成的静态的子树或者静态 prop 提升到渲染函数之外，只持有引用</li></ul></li><li><p>组合式 api</p><ul><li>利于 tree shaking，可以结合使用特性开关去掉 options api，只使用 composition api，进一步减少打包体积</li><li>比起 vue2 将所有东西都挂在 this 上，很多时候只能靠 mixin 复用逻辑，hook 的写法更方便逻辑复用，且更加类型友好</li></ul></li><li><p>自定义渲染器</p><ul><li>vue3 开放了自定义渲染器的接口 createRenderer，可以非常方便的实现自定义渲染逻辑，使用场景更广</li></ul></li><li><p>新增了 Fragment vNode 类型，允许多根节点模版</p></li></ol><h2 id="为什么要使用-composition-api" tabindex="-1">为什么要使用 composition api <a class="header-anchor" href="#为什么要使用-composition-api" aria-label="Permalink to &quot;为什么要使用 composition api&quot;">​</a></h2><h3 id="mixin、高阶组件-hoc-、renderless-components-插槽-存在的问题" tabindex="-1">mixin、高阶组件（HOC）、renderLess components（插槽） 存在的问题 <a class="header-anchor" href="#mixin、高阶组件-hoc-、renderless-components-插槽-存在的问题" aria-label="Permalink to &quot;mixin、高阶组件（HOC）、renderLess components（插槽） 存在的问题&quot;">​</a></h3><ul><li>模版中的数据来源不清晰</li><li>命名冲突</li><li>性能。高阶组件、renderLess components 都需要额外的组件实例来封装逻辑</li></ul><h3 id="composition-api-的优势" tabindex="-1">composition api 的优势 <a class="header-anchor" href="#composition-api-的优势" aria-label="Permalink to &quot;composition api 的优势&quot;">​</a></h3><ul><li>TS 对函数参数、返回值和泛型的支持比较完善</li><li>每一个函数都可以都可以单独引入，且代码压缩效率更高（所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性/方法名却不可以），tree-shaking 友好</li><li>更好的逻辑复用、更灵活的代码组织</li></ul><p><img src="'+p+`" alt=""></p><h3 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">todoList</span></span>
<span class="line"><span style="color:#859900;">|</span><span style="color:#268BD2;">____index.vue</span></span>
<span class="line"><span style="color:#859900;">|</span><span style="color:#268BD2;">____hooks</span></span>
<span class="line"><span style="color:#859900;">|</span><span style="color:#839496;"> </span><span style="color:#859900;">|</span><span style="color:#268BD2;">____useDataList.js</span></span>
<span class="line"><span style="color:#859900;">|</span><span style="color:#839496;"> </span><span style="color:#859900;">|</span><span style="color:#268BD2;">____useLiEvent.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">customRef</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;vue&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">useDebouncedRef</span><span style="color:#839496;">(value, delay </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">200</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">timeout</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">customRef</span><span style="color:#839496;">((track, trigger) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">get</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">track</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      },</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">set</span><span style="color:#839496;">(newValue) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">clearTimeout</span><span style="color:#839496;">(</span><span style="color:#268BD2;">timeout</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">timeout</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">newValue</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">          </span><span style="color:#268BD2;">trigger</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">        }, </span><span style="color:#268BD2;">delay</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">script</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">setup</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">useDebouncedRef</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;./debouncedRef&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">text</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">useDebouncedRef</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;hello&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">script</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">template</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">input</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">v-model</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;text&quot;</span><span style="color:#839496;"> </span><span style="color:#586E75;">/&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">template</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><a href="https://zhuanlan.zhihu.com/p/68477600" target="_blank" rel="noreferrer">Vue Function-based API RFC</a></li><li><a href="https://github.com/antfu/vueuse/blob/main/packages/core/useNow/index.ts" target="_blank" rel="noreferrer">hook 示例</a></li><li><a href="https://github.com/vuesomedev/awesome-vue-3" target="_blank" rel="noreferrer">awesome-vue3</a></li><li><a href="https://cn.vuejs.org/guide/extras/composition-api-faq.html#comparison-with-react-hooks" target="_blank" rel="noreferrer">和 React Hooks 的对比</a></li></ul><h2 id="常见-composition-api-原理" tabindex="-1">常见 composition api 原理 <a class="header-anchor" href="#常见-composition-api-原理" aria-label="Permalink to &quot;常见 composition api 原理&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">ref</span><span style="color:#839496;">, </span><span style="color:#268BD2;">watchEffect</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;vue&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">count</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ref</span><span style="color:#839496;">(</span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">watchEffect</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">body</span><span style="color:#839496;">.</span><span style="color:#268BD2;">innerHTML</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">\`计数：\${</span><span style="color:#268BD2;">count</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#2AA198;">}\`</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// 执行某个行为，比如更新视图</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 更新 DOM</span></span>
<span class="line"><span style="color:#268BD2;">count</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>getter、setter，以及依赖的收集和追踪</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">createGetter</span><span style="color:#839496;">(isReadonly </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">, shallow </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">get</span><span style="color:#839496;">(target, key) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Reflect</span><span style="color:#839496;">.</span><span style="color:#268BD2;">get</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">shallow</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">isRef</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">)) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 对于嵌套的对象进行响应式处理</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">isObject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">)) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">isReadonly</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#268BD2;">readonly</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">) </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reactive</span><span style="color:#839496;">(</span><span style="color:#268BD2;">res</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">!</span><span style="color:#268BD2;">isReadonly</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">track</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">createSetter</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">set</span><span style="color:#839496;">(target, key, value) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Reflect</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">, </span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 触发依赖</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">trigger</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">res</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">activeEffect</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">targetMap</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WeakMap</span><span style="color:#839496;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">track</span><span style="color:#839496;">(target, key) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">activeEffect</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effects</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">getSubscribersForProperty</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">effects</span><span style="color:#839496;">.</span><span style="color:#268BD2;">add</span><span style="color:#839496;">(</span><span style="color:#268BD2;">activeEffect</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">trigger</span><span style="color:#839496;">(target, key) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effects</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">getSubscribersForProperty</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">effects</span><span style="color:#839496;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(effect </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effect</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>基于上述，我们可以实现一系列的响应式 api</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reactive</span><span style="color:#839496;">(target) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">isReadonly</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">)) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">target</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Proxy</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">    get: </span><span style="color:#268BD2;">createGetter</span><span style="color:#839496;">(),</span></span>
<span class="line"><span style="color:#839496;">    set: </span><span style="color:#268BD2;">createSetter</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">shallowReactive</span><span style="color:#839496;">(target) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Proxy</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">    get: </span><span style="color:#268BD2;">createGetter</span><span style="color:#839496;">(</span><span style="color:#B58900;">false</span><span style="color:#839496;">, </span><span style="color:#B58900;">true</span><span style="color:#839496;">),</span></span>
<span class="line"><span style="color:#839496;">    set: </span><span style="color:#268BD2;">createSetter</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ref</span><span style="color:#839496;">(value) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">refObject</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">get</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">track</span><span style="color:#839496;">(</span><span style="color:#268BD2;">refObject</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;value&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">set</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">(newValue) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">newValue</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">trigger</span><span style="color:#839496;">(</span><span style="color:#268BD2;">refObject</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;value&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">refObject</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// function readonlySet(target, key, value) {</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   console.warn(\`key:\${key}set失败，因为 target 是 readonly\`, target);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   return true;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">readonly</span><span style="color:#839496;">(target) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Proxy</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">    get: </span><span style="color:#268BD2;">createGetter</span><span style="color:#839496;">(</span><span style="color:#B58900;">true</span><span style="color:#839496;">),</span></span>
<span class="line"><span style="color:#839496;">    set: </span><span style="color:#268BD2;">readonlySet</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">shallowReadonly</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Proxy</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">    get: </span><span style="color:#268BD2;">createGetter</span><span style="color:#839496;">(</span><span style="color:#B58900;">true</span><span style="color:#839496;">, </span><span style="color:#B58900;">true</span><span style="color:#839496;">),</span></span>
<span class="line"><span style="color:#839496;">    set: </span><span style="color:#268BD2;">readonlySet</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>实现了依赖的收集和触发，我们还需要实现一个副作用函数的注册机制 最终的目的是实现 <strong>数据变更-&gt;触发副作用函数</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">activeEffect</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">ReactiveEffect</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">private</span><span style="color:#839496;"> _fn;</span></span>
<span class="line"><span style="color:#839496;">  active </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;">(fn, </span><span style="color:#93A1A1;font-weight:bold;">public</span><span style="color:#839496;"> scheduler) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">_fn</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">run</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">active</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">_fn</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">shouldTrack</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">activeEffect</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 在执行this.fn的时候，fn里所用到的reactive变量，会将本对象作为依赖收集</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">_fn</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 已经收集好依赖了，将shouldTrack置为false，表明在这个fn中所用到的reactive变量都已完成依赖收集</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// 不会再有另外的reactive变量以此为依赖了，因此关闭掉</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">shouldTrack</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">stop</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">active</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">cleanupEffect</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">active</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">shouldTrack</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>ReactiveEffect 封装了副作用函数的注册机制</p><p>由此可以封装出以下 api</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effect</span><span style="color:#839496;">(fn, options) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">_effect</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ReactiveEffect</span><span style="color:#839496;">(</span><span style="color:#268BD2;">fn</span><span style="color:#839496;">, </span><span style="color:#268BD2;">options</span><span style="color:#839496;">.</span><span style="color:#268BD2;">scheduler</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">_effect</span><span style="color:#839496;">.</span><span style="color:#268BD2;">run</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">runner</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">watchEffect</span><span style="color:#839496;">(update) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">effect</span><span style="color:#839496;">(</span><span style="color:#268BD2;">update</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">computed</span><span style="color:#839496;">(getter) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dirty</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effect</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">ReactiveEffect</span><span style="color:#839496;">(</span><span style="color:#268BD2;">getter</span><span style="color:#839496;">, () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">dirty</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">dirty</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">get</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">dirty</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">dirty</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#586E75;font-style:italic;">// 只在执行get时才去run</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">_effect</span><span style="color:#839496;">.</span><span style="color:#268BD2;">run</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="为什么使用-proxy" tabindex="-1">为什么使用 Proxy <a class="header-anchor" href="#为什么使用-proxy" aria-label="Permalink to &quot;为什么使用 Proxy&quot;">​</a></h3><p>真正的拦截</p><ul><li>无需<code>$set</code>动态添加对象属性</li><li>无需 hack 数组方法</li><li>无需深度遍历，惰性响应式转换</li></ul><h3 id="为什么需要包装对象" tabindex="-1">为什么需要包装对象 <a class="header-anchor" href="#为什么需要包装对象" aria-label="Permalink to &quot;为什么需要包装对象&quot;">​</a></h3><p>函数直接返回一个原始值，如 number、string，是无法追踪变化的</p><p>包装对象的意义就在于提供一个让我们能够在函数之间以引用的方式传递任意类型值的容器</p><p>但不同的是 Vue 的包装对象同时还是响应式的数据源。有了这样的容器，我们就可以在封装了逻辑的组合函数中将状态以引用的方式传回给组件。组件负责展示（追踪依赖），组合函数负责管理状态（触发更新）</p><ul><li>(响应性语法糖（已废弃）)[<a href="https://cn.vuejs.org/guide/reactivity-transform.html" target="_blank" rel="noreferrer">https://cn.vuejs.org/guide/reactivity-transform.html</a>]</li></ul><h3 id="什么是副作用函数" tabindex="-1">什么是副作用函数 <a class="header-anchor" href="#什么是副作用函数" aria-label="Permalink to &quot;什么是副作用函数&quot;">​</a></h3><p><em>会产生副作用的函数</em></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// effect函数的执行会直接或间接影响其他函数的执行</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">effect</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">body</span><span style="color:#839496;">.</span><span style="color:#268BD2;">innerText</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;hello vue3&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">2</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// 修改了全局变量也是一个副作用</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,37),r=[o];function c(t,y,i,b,u,m){return n(),a("div",null,r)}const B=s(e,[["render",c]]);export{f as __pageData,B as default};
