import{_ as s,G as n,E as a,ao as l}from"./chunks/framework.C1rSk1pR.js";const f=JSON.parse('{"title":"手写 promise","description":"","frontmatter":{},"headers":[],"relativePath":"practice/promise.md","filePath":"practice/promise.md","lastUpdated":1737179313000}'),p={name:"practice/promise.md"},o=l(`<h1 id="手写-promise" tabindex="-1">手写 promise <a class="header-anchor" href="#手写-promise" aria-label="Permalink to &quot;手写 promise&quot;">​</a></h1><h2 id="promise-基本特征" tabindex="-1">promise 基本特征 <a class="header-anchor" href="#promise-基本特征" aria-label="Permalink to &quot;promise 基本特征&quot;">​</a></h2><ol><li>有三个状态：pengding、fullfilled、rejected</li><li>new Promise 时，需要传递一个回调，立即执行</li><li>回调接受两个参数，resolve 和 reject</li><li>默认状态是 pending</li><li>promise 有一个 value 保存成功状态的值，可以是 undefined、thenable、promise</li><li>promise 有一个 reason 保存失败状态的值</li><li>promise 智能从 pending 到 rejected 或者 fullfilled，状态一旦确认就不会再改变</li><li>promise 必须有一个 then 方法，接受两个参数，分别是成功的回调 onFulfilled 和失败的回调 onRejected</li><li>如果调用 then，promise 已经成功，则执行 onFullfilled，参数是 promise 的 value</li><li>如果调用 then，promise 已经失败，调用 onRejected，参数是 promise 的 reason</li><li>如果 then 抛出异常，那么就把异常作为参数，传给下一个 then 的失败的回调 onRejected</li><li>then的参数onFulfilled和onRejected可以缺省，如果不是函数，就忽略，且依旧可以在下面的then中获取到之前返回的值</li><li>promise可以then多次，每次都返回新的promise</li><li>如果promise返回一个普通值，就把这个结果作为参数，传递给下一个then的成功回调</li><li>如果promise抛出异常，那么这个异常作为参数传递给下一个then的失败回调</li><li>如果返回一个promise，会等这个promise执行完，如果成功就走下个then，如果失败或者抛出异常就走下个的失败</li><li>如果then的返回值和promise是同一个引用对象，造成循环引用，那就抛出异常</li><li>如果then的返回值是一个promise，且x同时调用resolve和reject，第一个调用优先，状态不会再次被改变</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#268BD2;"> PENDING</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;PENDING&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#268BD2;">  FULFILLED</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;FULFILLED&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#268BD2;">  REJECTED</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;REJECTED&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#268BD2;"> resolvePromise</span><span style="color:#859900;"> =</span><span style="color:#839496;"> (promise, x, resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">  if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">promise</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> x</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#268BD2;"> reject</span><span style="color:#839496;">(</span><span style="color:#859900;">new</span><span style="color:#268BD2;"> TypeError</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;Chaining cycle detected for promise #&lt;Promise&gt;&#39;</span><span style="color:#839496;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  let</span><span style="color:#268BD2;"> called</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> false</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">  if</span><span style="color:#839496;"> ((</span><span style="color:#859900;">typeof</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;object&#39;</span><span style="color:#859900;"> &amp;&amp;</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> !==</span><span style="color:#B58900;"> null</span><span style="color:#839496;">) </span><span style="color:#859900;">||</span><span style="color:#859900;"> typeof</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#859900;">    try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">      let</span><span style="color:#268BD2;"> then</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> x</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#859900;">typeof</span><span style="color:#268BD2;"> then</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        then</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#268BD2;">          x</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">          y </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">            if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">called</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">            called</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">            resolvePromise</span><span style="color:#839496;">(</span><span style="color:#268BD2;">promise</span><span style="color:#839496;">, </span><span style="color:#268BD2;">y</span><span style="color:#839496;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          },</span></span>
<span class="line"><span style="color:#839496;">          r </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">            if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">called</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">            called</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">            reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">r</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          }</span></span>
<span class="line"><span style="color:#839496;">        );</span></span>
<span class="line"><span style="color:#839496;">      } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">        resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">called</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">      called</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> true</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">      reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">    resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">x</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#CB4B16;"> MyPromise</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  constructor</span><span style="color:#839496;">(executor) {</span></span>
<span class="line"><span style="color:#268BD2;">    this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> PENDING</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">    this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> undefined</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">    this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#859900;"> =</span><span style="color:#B58900;"> undefined</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">    this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#859900;"> =</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#268BD2;">    this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#859900;"> =</span><span style="color:#839496;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    let</span><span style="color:#268BD2;"> resolve</span><span style="color:#859900;"> =</span><span style="color:#839496;"> value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> PENDING</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> FULFILLED</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(fn </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#268BD2;"> fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    let</span><span style="color:#268BD2;"> reject</span><span style="color:#859900;"> =</span><span style="color:#839496;"> reason </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> PENDING</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> REJECTED</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> reason</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">forEach</span><span style="color:#839496;">(fn </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#268BD2;"> fn</span><span style="color:#839496;">());</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">    try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">      executor</span><span style="color:#839496;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">      reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  static</span><span style="color:#268BD2;"> resolve</span><span style="color:#839496;">(value) {</span></span>
<span class="line"><span style="color:#859900;">    if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">value</span><span style="color:#859900;"> instanceof</span><span style="color:#CB4B16;"> Promise</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#859900;">      return</span><span style="color:#268BD2;"> value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      return</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">        resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      });</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  static</span><span style="color:#268BD2;"> reject</span><span style="color:#839496;">(reason) {</span></span>
<span class="line"><span style="color:#859900;">    return</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#268BD2;"> reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">reason</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">  then</span><span style="color:#839496;">(onFulfilled, onRejected) {</span></span>
<span class="line"><span style="color:#268BD2;">    onFulfilled</span><span style="color:#859900;"> =</span><span style="color:#859900;"> typeof</span><span style="color:#268BD2;"> onFulfilled</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span><span style="color:#859900;"> ?</span><span style="color:#268BD2;"> onFulfilled</span><span style="color:#859900;"> :</span><span style="color:#839496;"> v </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#268BD2;"> v</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">    onRejected</span><span style="color:#859900;"> =</span></span>
<span class="line"><span style="color:#859900;">      typeof</span><span style="color:#268BD2;"> onRejected</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span></span>
<span class="line"><span style="color:#859900;">        ?</span><span style="color:#268BD2;"> onRejected</span></span>
<span class="line"><span style="color:#859900;">        :</span><span style="color:#839496;"> err </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">            throw</span><span style="color:#268BD2;"> err</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">          };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    let</span><span style="color:#268BD2;"> promise</span><span style="color:#859900;"> =</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> FULFILLED</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">          try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">            const</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> onFulfilled</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">            resolvePromise</span><span style="color:#839496;">(</span><span style="color:#268BD2;">promise</span><span style="color:#839496;">, </span><span style="color:#268BD2;">x</span><span style="color:#839496;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">            reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          }</span></span>
<span class="line"><span style="color:#839496;">        }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> REJECTED</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">          try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">            const</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> onRejected</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">            resolvePromise</span><span style="color:#839496;">(</span><span style="color:#268BD2;">promise</span><span style="color:#839496;">, </span><span style="color:#268BD2;">x</span><span style="color:#839496;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">            reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">          }</span></span>
<span class="line"><span style="color:#839496;">        }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">status</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> PENDING</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onResolvedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">          setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">            try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">              const</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> onFulfilled</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">              resolvePromise</span><span style="color:#839496;">(</span><span style="color:#268BD2;">promise</span><span style="color:#839496;">, </span><span style="color:#268BD2;">x</span><span style="color:#839496;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">            } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">              reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">            }</span></span>
<span class="line"><span style="color:#839496;">          }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"><span style="color:#268BD2;">        this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onRejectedCallbacks</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">          setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">            try</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">              const</span><span style="color:#268BD2;"> x</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> onRejected</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">reason</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">              resolvePromise</span><span style="color:#839496;">(</span><span style="color:#268BD2;">promise</span><span style="color:#839496;">, </span><span style="color:#268BD2;">x</span><span style="color:#839496;">, </span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">            } </span><span style="color:#859900;">catch</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">e</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">              reject</span><span style="color:#839496;">(</span><span style="color:#268BD2;">e</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">            }</span></span>
<span class="line"><span style="color:#839496;">          }, </span><span style="color:#D33682;">0</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    });</span></span>
<span class="line"><span style="color:#859900;">    return</span><span style="color:#268BD2;"> promise</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">MyPromise</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">catch</span><span style="color:#859900;"> =</span><span style="color:#93A1A1;font-weight:bold;"> function</span><span style="color:#839496;"> (cb) {</span></span>
<span class="line"><span style="color:#859900;">  return</span><span style="color:#268BD2;"> this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#B58900;">null</span><span style="color:#839496;">, </span><span style="color:#268BD2;">cb</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">MyPromise</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">finally</span><span style="color:#859900;"> =</span><span style="color:#93A1A1;font-weight:bold;"> function</span><span style="color:#839496;"> (cb) {</span></span>
<span class="line"><span style="color:#859900;">  return</span><span style="color:#268BD2;"> this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">    value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      return</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">cb</span><span style="color:#839496;">()).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#268BD2;"> value</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"><span style="color:#839496;">    reason </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">      return</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">cb</span><span style="color:#839496;">()).</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">        throw</span><span style="color:#268BD2;"> reason</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">      });</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  );</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">all</span><span style="color:#859900;"> =</span><span style="color:#93A1A1;font-weight:bold;"> function</span><span style="color:#839496;"> (values) {</span></span>
<span class="line"><span style="color:#859900;">  if</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">Array</span><span style="color:#839496;">.</span><span style="color:#268BD2;">isArray</span><span style="color:#839496;">(</span><span style="color:#268BD2;">values</span><span style="color:#839496;">)) {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    const</span><span style="color:#268BD2;"> type</span><span style="color:#859900;"> =</span><span style="color:#859900;"> typeof</span><span style="color:#268BD2;"> values</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">    return</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> TypeError</span><span style="color:#839496;">(</span><span style="color:#2AA198;">\`TypeError: \${</span><span style="color:#268BD2;">type</span><span style="color:#2AA198;">} \${</span><span style="color:#268BD2;">values</span><span style="color:#2AA198;">} is not iterable\`</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">  return</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    let</span><span style="color:#268BD2;"> resultArr</span><span style="color:#859900;"> =</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    let</span><span style="color:#268BD2;"> orderIndex</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 0</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">    const</span><span style="color:#268BD2;"> processResultByKey</span><span style="color:#859900;"> =</span><span style="color:#839496;"> (value, index) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">      resultArr</span><span style="color:#839496;">[</span><span style="color:#268BD2;">index</span><span style="color:#839496;">] </span><span style="color:#859900;">=</span><span style="color:#268BD2;"> value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#859900;">++</span><span style="color:#268BD2;">orderIndex</span><span style="color:#859900;"> ===</span><span style="color:#268BD2;"> values</span><span style="color:#839496;">.length) {</span></span>
<span class="line"><span style="color:#268BD2;">        resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">resultArr</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">    for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#268BD2;"> i</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 0</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;"> &lt;</span><span style="color:#268BD2;"> values</span><span style="color:#839496;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">      let</span><span style="color:#268BD2;"> value</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> values</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">value</span><span style="color:#859900;"> &amp;&amp;</span><span style="color:#859900;"> typeof</span><span style="color:#268BD2;"> value</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        value</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(value </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">          processResultByKey</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">, </span><span style="color:#268BD2;">i</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">        }, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">        processResultByKey</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">, </span><span style="color:#268BD2;">i</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">MyPromise</span><span style="color:#839496;">.</span><span style="color:#268BD2;">race</span><span style="color:#859900;"> =</span><span style="color:#93A1A1;font-weight:bold;"> function</span><span style="color:#839496;"> (promises) {</span></span>
<span class="line"><span style="color:#859900;">  return</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">    for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#268BD2;"> i</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 0</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;"> &gt;</span><span style="color:#268BD2;"> promises</span><span style="color:#839496;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">      let</span><span style="color:#268BD2;"> val</span><span style="color:#859900;"> =</span><span style="color:#268BD2;"> promises</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#859900;">      if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">val</span><span style="color:#859900;"> &amp;&amp;</span><span style="color:#859900;"> typeof</span><span style="color:#268BD2;"> val</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#859900;"> ===</span><span style="color:#2AA198;"> &#39;function&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">        val</span><span style="color:#839496;">.</span><span style="color:#268BD2;">then</span><span style="color:#839496;">(</span><span style="color:#268BD2;">resolve</span><span style="color:#839496;">, </span><span style="color:#268BD2;">reject</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">        resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">val</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// const promise = new MyPromise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//     resolve(&#39;成功&#39;);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   }, 1000);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// }).then(</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   data =&gt; console.log(&#39;resolve&#39;, data),</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   err =&gt; console.log(&#39;reject&#39;, err)</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#268BD2;"> promise1</span><span style="color:#859900;"> =</span><span style="color:#859900;"> new</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">((resolve, reject) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">  reject</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;失败&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">})</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">then</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(err </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">    console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;promise1 err1&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">err</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  })</span></span>
<span class="line"><span style="color:#839496;">  .</span><span style="color:#268BD2;">catch</span><span style="color:#839496;">(err </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#268BD2;">    console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;promise1 err2&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">err</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// MyPromise.deferred = function () {</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   let dfd = {};</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   dfd.promise = new MyPromise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//     dfd.resolve = resolve;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//     dfd.reject = reject;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   });</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//   return dfd;</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// module.exports = MyPromise;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#859900;"> default</span><span style="color:#268BD2;"> MyPromise</span><span style="color:#839496;">;</span></span></code></pre></div><h2 id="promise的方法实现" tabindex="-1">promise的方法实现 <a class="header-anchor" href="#promise的方法实现" aria-label="Permalink to &quot;promise的方法实现&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#268BD2;">static</span><span style="color:#268BD2;"> resolve</span><span style="color:#839496;">(</span><span style="color:#268BD2;">data</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#859900;">  if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">data</span><span style="color:#859900;"> instanceof</span><span style="color:#CB4B16;"> Promise</span><span style="color:#839496;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre></div>`,6),e=[o];function t(c,r,y,i,D,B){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{f as __pageData,A as default};
