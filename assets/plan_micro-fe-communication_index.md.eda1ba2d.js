import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.7454da9a.js";const m=JSON.parse('{"title":"微前端架构下的主子通信","description":"","frontmatter":{},"headers":[],"relativePath":"plan/micro-fe-communication/index.md","filePath":"plan/micro-fe-communication/index.md","lastUpdated":1712038029000}'),p={name:"plan/micro-fe-communication/index.md"},e=l(`<h1 id="微前端架构下的主子通信" tabindex="-1">微前端架构下的主子通信 <a class="header-anchor" href="#微前端架构下的主子通信" aria-label="Permalink to &quot;微前端架构下的主子通信&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>微前端架构下的应用之间仍然存在交互场景，并非完全无关</p><ul><li>子应用控制主应用的登出</li><li>子应用需要知晓主应用的一些全局性操作如全局性的路由跳转</li><li>子应用之间存在互相跳转的情况，写死的 url 在项目的持续性维护中存在问题</li></ul><p>需要一套更普适的方法</p><h2 id="微前端通信方式调研" tabindex="-1">微前端通信方式调研 <a class="header-anchor" href="#微前端通信方式调研" aria-label="Permalink to &quot;微前端通信方式调研&quot;">​</a></h2><h3 id="umi-qiankun、single-spa" tabindex="-1">umi/qiankun、single-spa <a class="header-anchor" href="#umi-qiankun、single-spa" aria-label="Permalink to &quot;umi/qiankun、single-spa&quot;">​</a></h3><p>通过监听 url change 事件，在路由变化时匹配到渲染的子应用并进行渲染，这个思路也是目前实现微前端的主流方式，对于应用间的跳转是通过路由库的方式</p><p>qiankun 官方对于跳转的回应是：在主子都是 hash 模式时，直接跳转；在主子都是 history 模式时，使用 history.pushState（不推荐、会触发所有应用的路由监听） 或者主应用下发路由实例的方式跳转</p><p>因此在 qiankun 中，<strong>props 下发</strong> 是较为推荐的通信方式</p><p>qiankun 提供了两种方式：</p><ol><li>props 直接下发</li><li>initGlobalState</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用：</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">initGlobalState</span><span style="color:#839496;">, </span><span style="color:#268BD2;">MicroAppStateActions</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;qiankun&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 初始化 state</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">actions</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">MicroAppStateActions</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">initGlobalState</span><span style="color:#839496;">(</span><span style="color:#268BD2;">state</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">actions</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onGlobalStateChange</span><span style="color:#839496;">((state, prev) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// state: 变更后的状态; prev 变更前的状态</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">state</span><span style="color:#839496;">, </span><span style="color:#268BD2;">prev</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"><span style="color:#268BD2;">actions</span><span style="color:#839496;">.</span><span style="color:#268BD2;">setGlobalState</span><span style="color:#839496;">(</span><span style="color:#268BD2;">state</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">actions</span><span style="color:#839496;">.</span><span style="color:#268BD2;">offGlobalStateChange</span><span style="color:#839496;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//微应用：</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 从生命周期 mount 中获取通信方法，使用方式和 master 一致</span></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">mount</span><span style="color:#839496;">(props) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">props</span><span style="color:#839496;">.</span><span style="color:#268BD2;">onGlobalStateChange</span><span style="color:#839496;">((state, prev) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">// state: 变更后的状态; prev 变更前的状态</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">state</span><span style="color:#839496;">, </span><span style="color:#268BD2;">prev</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">props</span><span style="color:#839496;">.</span><span style="color:#268BD2;">setGlobalState</span><span style="color:#839496;">(</span><span style="color:#268BD2;">state</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="腾讯-wujie" tabindex="-1">腾讯/wujie <a class="header-anchor" href="#腾讯-wujie" aria-label="Permalink to &quot;腾讯/wujie&quot;">​</a></h3><p>webcomponents + iframe 的方式</p><ul><li>props 注入机制 子应用通过$wujie.props 可以轻松拿到主应用注入的数据</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用可以通过props注入数据和方法：</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#859900;">WujieVue</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">name</span><span style="color:#859900;">=</span><span style="color:#2AA198;">&quot;xxx&quot;</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">url</span><span style="color:#859900;">=</span><span style="color:#2AA198;">&quot;xxx&quot;</span><span style="color:#839496;"> </span><span style="color:#DC322F;">:props=&quot;{</span><span style="color:#839496;"> </span><span style="color:#DC322F;">data:</span><span style="color:#839496;"> </span><span style="color:#DC322F;">xxx,</span><span style="color:#839496;"> </span><span style="color:#DC322F;">methods:</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">xxx</span><span style="color:#839496;"> </span><span style="color:#DC322F;">}&quot;&gt;&lt;/WujieVue&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用可以通过$wujie来获取：</span></span>
<span class="line"><span style="color:#93A1A1;">const</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">props</span><span style="color:#839496;"> </span><span style="color:#DC322F;">=</span><span style="color:#839496;"> </span><span style="color:#DC322F;">window.$wujie?.props;</span><span style="color:#839496;"> </span><span style="color:#586E75;font-style:italic;">// {data: xxx, methods: xxx}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>window.parent 通信机制 子应用 iframe 沙箱和主应用同源，子应用可以直接通过 window.parent 和主应用通信</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用调用子应用的全局数据</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">querySelector</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;iframe[name=子应用id]&#39;</span><span style="color:#839496;">).</span><span style="color:#268BD2;">contentWindow</span><span style="color:#839496;">.</span><span style="color:#268BD2;">xxx</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用调用主应用的全局数据</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">parent</span><span style="color:#839496;">.</span><span style="color:#268BD2;">xxx</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>去中心化的通信机制 无界提供了 EventBus 实例，注入到主应用和子应用，所有的应用可以去中心化的进行通信</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用使用方式:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 如果使用wujie</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">bus</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;wujie&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 如果使用wujie-vue</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WujieVue</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;wujie-vue&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">bus</span><span style="color:#839496;"> } </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WujieVue</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 如果使用wujie-react</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WujieReact</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&quot;wujie-react&quot;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">bus</span><span style="color:#839496;"> } </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">WujieReact</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 主应用监听事件</span></span>
<span class="line"><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$on</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (arg1, arg2, ...) {});</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 主应用发送事件</span></span>
<span class="line"><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$emit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arg1</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arg2</span><span style="color:#839496;">, </span><span style="color:#859900;">...</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 主应用取消事件监听</span></span>
<span class="line"><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$off</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (arg1, arg2, ...) {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用使用方式:</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用监听事件</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$wujie</span><span style="color:#839496;">?.</span><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$on</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (arg1, arg2, ...) {});</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用发送事件</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$wujie</span><span style="color:#839496;">?.</span><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$emit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arg1</span><span style="color:#839496;">, </span><span style="color:#268BD2;">arg2</span><span style="color:#839496;">, </span><span style="color:#859900;">...</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 子应用取消事件监听</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$wujie</span><span style="color:#839496;">?.</span><span style="color:#268BD2;">bus</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$off</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&quot;事件名字&quot;</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (arg1, arg2, ...) {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="京东-micro-app" tabindex="-1">京东/micro-app <a class="header-anchor" href="#京东-micro-app" aria-label="Permalink to &quot;京东/micro-app&quot;">​</a></h3><p>webcomponents 的思路</p><ul><li>history.pushState 结合主动触发 popState 事件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">history</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pushState</span><span style="color:#839496;">(</span><span style="color:#B58900;">null</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;page2&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// history</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">history</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pushState</span><span style="color:#839496;">(</span><span style="color:#B58900;">null</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;#/page2&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 主动触发一次popstate事件</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">dispatchEvent</span><span style="color:#839496;">(</span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">PopStateEvent</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;popstate&#39;</span><span style="color:#839496;">, { state: </span><span style="color:#B58900;">null</span><span style="color:#839496;"> }));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>不推荐</p><p>1、popstate 事件是全局发送的，所有正在运行的应用都会接受到新的路由地址并进行匹配，要防止兜底到应用的 404 页面。</p><p>2、window.history 并非适用于所有场景，一些框架如 vue-router4，angular 会出现问题，此时建议使用下面的方式 2、3。</p></div><ul><li>数据通信控制跳转</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 子应用中监听数据变化;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 监听基座下发的数据变化</span></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">microApp</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addDataListener</span><span style="color:#839496;">(data </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 当基座下发跳转指令时进行跳转</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">data</span><span style="color:#839496;">.</span><span style="color:#268BD2;">path</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">router</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#268BD2;">data</span><span style="color:#839496;">.</span><span style="color:#268BD2;">path</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 基座下发跳转指令;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> </span><span style="color:#268BD2;">microApp</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;@micro-zoe/micro-app&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">microApp</span><span style="color:#839496;">.</span><span style="color:#268BD2;">setData</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;子应用name&#39;</span><span style="color:#839496;">, { path: </span><span style="color:#2AA198;">&#39;/new-path/&#39;</span><span style="color:#839496;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>传递路由实例</li></ul><p>主应用下发跳转函数</p><h3 id="字节-garfish" tabindex="-1">字节/garfish <a class="header-anchor" href="#字节-garfish" aria-label="Permalink to &quot;字节/garfish&quot;">​</a></h3><ul><li>提供了类似的 EventBus 机制 <code>Garfish.channel</code></li></ul><h3 id="阿里-icestack" tabindex="-1">阿里/icestack <a class="header-anchor" href="#阿里-icestack" aria-label="Permalink to &quot;阿里/icestack&quot;">​</a></h3><ul><li>全局 <code>store</code></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;@ice/stark-data&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">userInfo</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> { name: </span><span style="color:#2AA198;">&#39;Tom&#39;</span><span style="color:#839496;">, age: </span><span style="color:#D33682;">18</span><span style="color:#839496;"> };</span></span>
<span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;language&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;CH&#39;</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 设置语言</span></span>
<span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;user&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">userInfo</span><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">// 设置登录后当前用户信息</span></span>
<span class="line"><span style="color:#268BD2;">setTimeout</span><span style="color:#839496;">(() </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;language&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;EN&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">}, </span><span style="color:#D33682;">3000</span><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 微应用</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;@ice/stark-data&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 监听语言变化</span></span>
<span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">on</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#2AA198;">&#39;language&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  lang </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">\`current language is \${</span><span style="color:#268BD2;">lang</span><span style="color:#2AA198;">}\`</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#839496;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 获取当前用户</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">userInfo</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">get</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;user&#39;</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li>EventBus</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 主应用</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">event</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;@ice/stark-data&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">event</span><span style="color:#839496;">.</span><span style="color:#268BD2;">on</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;freshMessage&#39;</span><span style="color:#839496;">, () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 重新获取消息数</span></span>
<span class="line"><span style="color:#839496;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 微应用</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> { </span><span style="color:#268BD2;">event</span><span style="color:#839496;"> } </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;@ice/stark-data&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">event</span><span style="color:#839496;">.</span><span style="color:#268BD2;">emit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;freshMessage&#39;</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>props</li></ul><p>props 注入</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>经调研，业界微前端主流的方案有以下两种</p><ol><li>EventBus</li><li>props</li></ol><h2 id="业务场景列举" tabindex="-1">业务场景列举 <a class="header-anchor" href="#业务场景列举" aria-label="Permalink to &quot;业务场景列举&quot;">​</a></h2><ul><li>主应用跳子应用</li><li>子应用跳子应用，项目内跳转、新开浏览器 tab 页</li><li>子应用跳主应用，退出登陆等</li><li>主应用切换子应用，子应用监听到切换与被切换是同步进行的，无法做一些流程上的控制</li></ul><h2 id="方案" tabindex="-1">方案 <a class="header-anchor" href="#方案" aria-label="Permalink to &quot;方案&quot;">​</a></h2><h3 id="方案一" tabindex="-1">方案一 <a class="header-anchor" href="#方案一" aria-label="Permalink to &quot;方案一&quot;">​</a></h3><p><code>props</code> 下发数据 + <code>window</code> 上的自定义事件 脱离微前端本身的 <code>eventBus</code> 的方式，通过监听与触发事件来实现通信</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>实现简单，框架无关</li><li>非常容易实现子应用间，主子应用间的通信</li><li>主子完全解耦</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>仅仅是一个通知，不方便做一些流程上的控制，如子应用在被切换前的异步行为</li><li>实际业务使用中，仍然需要结合 <code>props</code> 下发的数据，且代码编写上是分散的，增加维护成本</li><li>当多个子应用同时存在，并且监听同个事件时，可能会导致意想不到的问题</li><li>如使用了 <code>window</code> 上的自定义事件，需要及时手动销毁监听</li></ul><h3 id="方案二" tabindex="-1">方案二 <a class="header-anchor" href="#方案二" aria-label="Permalink to &quot;方案二&quot;">​</a></h3><p>下发 <code>eventBus</code> 实例 + 数据</p><p>例如 <code>qiankun</code> 提供了 <code>initGlobalState</code>，内含有对于 <code>state</code> 数据的监听和 <code>set</code> 操作</p><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>使用更明确，统一了入口，便于维护</li><li>框架本身提供的功能，稳定性好</li><li><code>qiankun</code>、<code>icestack</code> 下发类似 <code>eventBus</code> 的实例直接提供了数据监听的方式，无需另外去了解事件触发的方式，api 更精简，心智负担更小</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>框架本身提供的方式，有业务局限性，如<code>qiankun</code> 的 <code>initGlobalState</code>，并未提供数据获取的 <code>get</code> 操作</li><li>下发的方式导致主子有一定程度的耦合</li></ul><h3 id="方案三" tabindex="-1">方案三 <a class="header-anchor" href="#方案三" aria-label="Permalink to &quot;方案三&quot;">​</a></h3><p>对于需要暴露给子应用的数据，额外 <code>new</code> 一个包括了 <code>mutation</code>、<code>action</code>、<code>state</code> 的完整 <code>vuex</code> 实例下发给子应用</p><h4 id="优点-2" tabindex="-1">优点 <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>更多的场景适配，<code>props</code> 可以在微前端各个生命周期获取，能够方便做一些针对性的流程控制，比如在项目切换时，子应用根据 <code>props</code> 判断是否需要在卸载前跳转某个指定页面</li><li>对于子应用来说，具有更强的主观能动性，而不是被动的等待主应用通知</li><li>子应用无需手动销毁事件监听，例如下发的是 <code>store</code> 的实例，应用销毁时同步销毁实例即可</li><li>对于已经使用 <code>vue</code> 生态的项目，心智负担最小</li></ul><h4 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>下发的方式导致主子有一定程度的耦合</li><li>微前端通信需要的只是数据的 <code>get</code>、<code>set</code> 和方法的调用，<code>vuex</code> 有些重</li></ul><h3 id="方案四" tabindex="-1">方案四 <a class="header-anchor" href="#方案四" aria-label="Permalink to &quot;方案四&quot;">​</a></h3><p>参考上述 <code>icestack</code> 的通信方式，结合方案三，另外维护一个包，主子通过直接引入包</p><p><code>@ice/stark-data</code> 这个包是将数据通过命名空间存在<code>window</code>对象里，非持久（可以考虑结合<code>sessionStorage</code>、<code>localStorage</code>）</p><p>可以维护一个类似的库满足业务需求</p><h4 id="优点-3" tabindex="-1">优点 <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>主子不强耦合</li><li>使用方便</li><li>支持按需引入</li></ul><h4 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>需要额外维护一个包，有一定的开发成本</li><li><code>sessionStorage</code>、<code>localStorage</code> 的存储大小有限，需要斟酌存储的数据量</li></ul><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>综上所述，可以考虑下发一个 store 或者单独维护一个具备状态管理功能的包来处理微前端的通信问题</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://github.com/umijs/qiankun/issues/566" target="_blank" rel="noreferrer">qiankun issue 讨论：传递 vue store</a></li><li><a href="https://qiankun.umijs.org/zh/api#initglobalstatestate" target="_blank" rel="noreferrer">umi/qiankun</a></li><li><a href="https://zeroing.jd.com/docs.html#/zh-cn/jump" target="_blank" rel="noreferrer">京东/micro-app</a></li><li><a href="https://wujie-micro.github.io/doc/guide/communication.html" target="_blank" rel="noreferrer">腾讯/wujie</a></li><li><a href="https://www.garfishjs.org/api/channel" target="_blank" rel="noreferrer">字节/garfish</a></li><li><a href="https://micro-frontends.ice.work/docs/guide/advanced/communication" target="_blank" rel="noreferrer">阿里/icestack</a></li></ul>`,76),o=[e];function r(t,c,i,y,u,b){return n(),a("div",null,o)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
