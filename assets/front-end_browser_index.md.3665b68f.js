import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.7454da9a.js";const e="/Jarrett-blog/assets/process-thread.ccd9f586.png",p="/Jarrett-blog/assets/single-process.ae798bb6.png",o="/Jarrett-blog/assets/early-multi-process.d2bc2909.png",t="/Jarrett-blog/assets/current-multi-process.08393fcd.png",r="/Jarrett-blog/assets/server-oriented.770489d6.png",c="/Jarrett-blog/assets/server-oriented-1.ca35f1de.png",i="/Jarrett-blog/assets/dns-classify.6f431220.png",y="/Jarrett-blog/assets/dns-search.c0b1540a.png",d="/Jarrett-blog/assets/three-hands.9a7f1388.png",b="/Jarrett-blog/assets/telnet.bce7ac14.png",u="/Jarrett-blog/assets/http-structure.4e043dde.jpeg",h="/Jarrett-blog/assets/http-head-request.78847751.png",m="/Jarrett-blog/assets/http-head-response.6858905e.png",g="/Jarrett-blog/assets/server-handle-request.24513f5e.png",f="/Jarrett-blog/assets/close-tcp.6e053614.png",D="/Jarrett-blog/assets/html-token.9efaf3ce.png",B="/Jarrett-blog/assets/build-dom-tree.f592e03e.png",A="/Jarrett-blog/assets/analysis-css-tree.9c6daf1b.png",k="/Jarrett-blog/assets/css-standardization.c24da4cc.png",E="/Jarrett-blog/assets/layer-tree.72892127.png",q="/Jarrett-blog/assets/coverage.ebf99a22.png",v="/Jarrett-blog/assets/composite-1.907aabda.png",w="/Jarrett-blog/assets/composite-2.6496b806.png",_="/Jarrett-blog/assets/browser-work-flow.534e9710.jpeg",x="/Jarrett-blog/assets/window.2fa984c5.png",P="/Jarrett-blog/assets/event-delegation.808d3538.png",C="/Jarrett-blog/assets/click-son.5a42686a.png",T="/Jarrett-blog/assets/click-dad.3c31eae5.png",S="/Jarrett-blog/assets/click-grandpa.958407a0.png",M="/Jarrett-blog/assets/style-compatibility.9073ef16.png",j="/Jarrett-blog/assets/ninteraction-compatibility.f069f462.png",L="/Jarrett-blog/assets/browser-hack.c8a16875.png",V=JSON.parse('{"title":"浏览器","description":"","frontmatter":{"title":"浏览器","desc":"浏览器相关知识点","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[],"relativePath":"front-end/browser/index.md","filePath":"front-end/browser/index.md","lastUpdated":1712240776000}'),J={name:"front-end/browser/index.md"},F=l('<h1 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h1><h2 id="浏览器的组成" tabindex="-1">浏览器的组成 <a class="header-anchor" href="#浏览器的组成" aria-label="Permalink to &quot;浏览器的组成&quot;">​</a></h2><ol><li>渲染引擎（即内核）</li></ol><p>用来解析 HTML 和 CSS 这是浏览器兼容性问题出现的根本原因 常见浏览器的内核</p><table><thead><tr><th>浏览器</th><th>内核</th></tr></thead><tbody><tr><td>chrome</td><td>Blink</td></tr><tr><td>欧鹏</td><td>Blink</td></tr><tr><td>360 安全浏览器</td><td>Blink</td></tr><tr><td>360 极速浏览器</td><td>Blink</td></tr><tr><td>Safari</td><td>Webkit</td></tr><tr><td>Firefox 火狐</td><td>Gecko</td></tr><tr><td>IE</td><td>Trident</td></tr></tbody></table><ol start="2"><li>js 引擎</li></ol><p>用来解析网页中的 js 代码，处理后再运行</p><table><thead><tr><th>浏览器</th><th>JS 引擎</th></tr></thead><tbody><tr><td>chrome / 欧鹏</td><td>V8</td></tr><tr><td>Safari</td><td>Nitro</td></tr><tr><td>Firefox 火狐</td><td>SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-）</td></tr><tr><td>Opera</td><td>Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）</td></tr><tr><td>IE</td><td>Trident</td></tr></tbody></table><h2 id="浏览器的多进程架构" tabindex="-1">浏览器的多进程架构 <a class="header-anchor" href="#浏览器的多进程架构" aria-label="Permalink to &quot;浏览器的多进程架构&quot;">​</a></h2><h3 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h3><p>进程是一个程序的运行实例。当我们启动一个程序，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程 <img src="'+e+'" alt="image.png"> 线程依附于进程，由进程来启动和管理。 线程与进程之间的关系有以下特点</p><ol><li>进程中任一线程执行出错，都会导致整个进程的崩溃，如果程序只有一个进程，那么很容易崩溃掉</li><li>线程之间可以共享进程中的数据，都能进行读写操作</li><li>一个进程关闭，操作系统会回收进程所占用的内存，即使某线程存在内存泄漏问题，内存也能被正确回收</li><li>进程之间的内容相互严格隔离。如果需要通信，需要进程间通信（IPC）的机制 <a href="https://imageslr.github.io/2020/02/26/ipc.html" target="_blank" rel="noreferrer">《进程间的通信方式》</a></li></ol><h3 id="单进程浏览器" tabindex="-1">单进程浏览器 <a class="header-anchor" href="#单进程浏览器" aria-label="Permalink to &quot;单进程浏览器&quot;">​</a></h3><p><img src="'+p+'" alt="image.png"></p><h4 id="存在的问题" tabindex="-1">存在的问题 <a class="header-anchor" href="#存在的问题" aria-label="Permalink to &quot;存在的问题&quot;">​</a></h4><ul><li>不稳定。早期浏览器依赖各种插件实现 web 游戏、web 视频，但是插件容易出问题，任意一个线程挂掉都会导致整个浏览器的崩溃</li><li>不流畅。一个线程需要处理多个模块，比如页面线程需要同时处理页面渲染、页面展现等等，但是同一时刻只有一个模块能执行，造成长时间的等待、卡顿。同时，对于复杂的页面，如果页面内存泄漏，会存在内存不能完全回收的情况，因此导致使用时间越长，内存占用越高，浏览器越慢</li><li>不安全。恶意插件、恶意脚本 <blockquote><p>进程结束时，内存总会被正确回收。 但线程结束时，可能存在内存泄漏的情况，所以在单进程的浏览器，打开和关闭的页面更多，浏览器就可能变得越来越卡顿。</p></blockquote></li></ul><h3 id="多进程浏览器" tabindex="-1">多进程浏览器 <a class="header-anchor" href="#多进程浏览器" aria-label="Permalink to &quot;多进程浏览器&quot;">​</a></h3><p>以 Chrome 举例</p><h4 id="早期多进程浏览器" tabindex="-1">早期多进程浏览器 <a class="header-anchor" href="#早期多进程浏览器" aria-label="Permalink to &quot;早期多进程浏览器&quot;">​</a></h4><p><img src="'+o+'" alt="image.png"></p><ul><li>解决不稳定问题。进程相互隔离，一个页面或者插件崩溃，不影响浏览器和其他进程</li><li>解决不流畅问题。不同站点的页面有自己的渲染进程，所以即便存在比如 js 阻塞渲染进程的情况，也只会影响当前页面</li><li>解决不安全问题。使用安全沙箱，Chrome 把插件和渲染进程锁在沙箱里面，沙箱里的程序无法访问硬盘和敏感位置。</li></ul><h3 id="当前多进程浏览器" tabindex="-1">当前多进程浏览器 <a class="header-anchor" href="#当前多进程浏览器" aria-label="Permalink to &quot;当前多进程浏览器&quot;">​</a></h3><p><img src="'+t+'" alt="image.png"></p><ul><li>浏览器进程。界面显示、用户交互、子进程管理、存储</li><li>渲染进程。解析、渲染、执行 js，排版引擎 Blink 和 js 引擎 V8 都是运行在该进程中。渲染进程都运行在安全沙箱</li><li>GPU 进程。GPU 最初是为了实现 3d css，但是后来网页和 Chrome 的 UI 界面都采用 GPU 绘制，GPU 成为普遍需求后，Chrome 的多进程架构引入了 GPU 进程。</li><li>网络进程。网络资源加载，独立了出来</li><li>插件进程。运行插件</li></ul><h4 id="存在问题" tabindex="-1">存在问题： <a class="header-anchor" href="#存在问题" aria-label="Permalink to &quot;存在问题：&quot;">​</a></h4><ul><li>更高资源占用。每个进程都包含公共基础结构的副本如 js 运行环境</li><li>更复杂的体系架构。浏览器模块间耦合性高、拓展性差</li></ul><h3 id="未来面向服务的架构" tabindex="-1">未来面向服务的架构 <a class="header-anchor" href="#未来面向服务的架构" aria-label="Permalink to &quot;未来面向服务的架构&quot;">​</a></h3><p>“面向服务的架构”（Services Oriented Architecture，简称 SOA） <img src="'+r+'" alt="image.png"> 原来的各种模块重构成独立的服务，每个服务都可以在独立的进程中运行 最终把 UI、数据库、文件、设备、网络等模块重构为基础服务 Chrome 还能根据设备性能调整架构，在性能较差的设备上将服务整合到一个进程中。 <img src="'+c+`" alt="image.png"></p><h2 id="浏览器是怎么工作的" tabindex="-1">浏览器是怎么工作的 <a class="header-anchor" href="#浏览器是怎么工作的" aria-label="Permalink to &quot;浏览器是怎么工作的&quot;">​</a></h2><h3 id="从一个-url-到网页" tabindex="-1">从一个 URL 到网页 <a class="header-anchor" href="#从一个-url-到网页" aria-label="Permalink to &quot;从一个 URL 到网页&quot;">​</a></h3><ol><li>浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；</li><li>把请求回来的 HTML 代码经过解析，构建成 DOM 树；</li><li>计算 DOM 树上的 CSS 属性，构建 CSS 树；</li><li>根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；</li><li>合成之后，再绘制到界面上。</li></ol><h4 id="用户输入" tabindex="-1">用户输入 <a class="header-anchor" href="#用户输入" aria-label="Permalink to &quot;用户输入&quot;">​</a></h4><p>在地址栏中输入一个查询关键字，地址栏会判断关键字是搜索内容还是请求的 URL</p><ul><li>搜索内容：使用搜索引擎合成新的带搜索关键字的 URL</li><li>URL：加上协议，合成完整的 URL <blockquote><p>输入完，按下回车后，跳转页面前，还有一次 beforeunload 事件的机会，可以用于数据清理，或者询问用户是否确认离开或者提交表单</p></blockquote></li></ul><h4 id="url-请求" tabindex="-1">URL 请求 <a class="header-anchor" href="#url-请求" aria-label="Permalink to &quot;URL 请求&quot;">​</a></h4><p>浏览器通过进程间通信把 URL 发送给网络进程 首先，网络进程会先查找本地缓存是否缓存了该资源，有就直接返回该资源给浏览器，没有就进入网络请求流程。 请求前先进行 DNS 解析，以获取请求域名的服务器 IP 地址，如果请求协议是 HTTPS，那么还需要建立 TLS 连接</p><h5 id="dns-解析" tabindex="-1">DNS 解析 <a class="header-anchor" href="#dns-解析" aria-label="Permalink to &quot;DNS 解析&quot;">​</a></h5><pre><code>  在浏览器输入网址，其实就是像服务器请求我们想要的页面内容
</code></pre><p>客户端收到输入的域名地址后，会先去找本地的 hosts 文件，检查是否有对应的域名 如果有就去向其 IP 地址发送请求，没有就去找 DNS 服务器，通过递归查询本地服务器和迭代查询 DNS 服务器获取到 IP 地址的响应报文 <img src="`+i+'" alt="截屏2020-11-18 上午11.54.39.png"><img src="'+y+'" alt="image.png"></p><h5 id="tcp-连接" tabindex="-1">TCP 连接 <a class="header-anchor" href="#tcp-连接" aria-label="Permalink to &quot;TCP 连接&quot;">​</a></h5><p>拿到 IP 后，下一步要通过三次握手链接到服务器， 要进行 TCP 连接，连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。 请求连接(SYN 数据包) 服务器 客户端 确认信息(SYNJACK 数据包) 握手结束(ACK 数据包) <img src="'+d+'" alt="image.png"></p><h5 id="http-请求" tabindex="-1">HTTP 请求 <a class="header-anchor" href="#http-请求" aria-label="Permalink to &quot;HTTP 请求&quot;">​</a></h5><p>HTTP 是纯粹的文本协议，基于 TCP 协议，是传输文本格式的一个应用层协议。 使用 telnet 发送 HTTP 请求</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">telnet time.geekbang.org 80</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+b+'" alt="image.png"> 请求部分第一行称作 request line，包括请求的方法、路径、协议、协议版本， 响应部分第一行称作 response line，包括协议、版本、状态码、状态文本， 随后的由一个空行（两个换行符）分割的两部分，是请求/响应头和请求/响应体 <img src="'+u+'" alt=""></p><h6 id="http-头" tabindex="-1">HTTP 头 <a class="header-anchor" href="#http-头" aria-label="Permalink to &quot;HTTP 头&quot;">​</a></h6><p><img src="'+h+'" alt=""></p><p><img src="'+m+'" alt=""></p><h6 id="http-体" tabindex="-1">HTTP 体 <a class="header-anchor" href="#http-体" aria-label="Permalink to &quot;HTTP 体&quot;">​</a></h6><p>常见的 body 格式：</p><ul><li>application/json</li><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/xml</li></ul><p>这是一种媒体类型标准（MIME），表示文档、文件、字节流的性质和格式 结构是 type/subtype，type 表示可以被分为多个子类的独立类别，subtype 表示细分的类型</p><blockquote><p>浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理 URL，因此 Web 服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会曲解文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">MIME 类型</a></p><h6 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h6><p>作用：</p><ol><li>确定请求的目标服务端身份</li><li>保证传输的数据不被网络中间节点窃听或者篡改 <blockquote><p>HTTPS 首先与服务端简历一条加密通道 TLS，TLS 基于 TCP</p></blockquote></li></ol><h6 id="http2" tabindex="-1">HTTP2 <a class="header-anchor" href="#http2" aria-label="Permalink to &quot;HTTP2&quot;">​</a></h6><p>是 HTTP1.1 的升级版本</p><ol><li>支持服务端推送。服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。</li><li>支持 TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输窗口小的问题。</li></ol><h5 id="服务器处理请求" tabindex="-1">服务器处理请求 <a class="header-anchor" href="#服务器处理请求" aria-label="Permalink to &quot;服务器处理请求&quot;">​</a></h5><p>服务器端收到请求后由 web 服务器处理请求， 如 apache、ngnix 等，解析用户请求后知道了需要调度哪些资源文件 再通过这些资源文件处理用户请求和参数，最后将结果通过 web 服务器返回给浏览器 <img src="'+g+'" alt="image.png"> 响应也是报文，响应结果中会有一个 HTTP 状态码，代表对应的错误的信息。如 200 代表请求成功且处理完毕 假如返回 301 或者 302，说明服务器需要浏览器重定向到其他 URL，这时网络进程会从响应头的 Location 字段读取重定向地址，然后再发起新的请求 跳转之后，浏览器会根据 HTTP 请求头中的 Content-Type 的值来决定显示响应体的内容 这时，如果设置错了 mime 类型，浏览器可能会曲解内容</p><h5 id="关闭-tcp-链接" tabindex="-1">关闭 TCP 链接 <a class="header-anchor" href="#关闭-tcp-链接" aria-label="Permalink to &quot;关闭 TCP 链接&quot;">​</a></h5><p>当双方没有请求或响应传递时，任意一方都可以发起关闭请求，需要 4 次挥手 <img src="'+f+'" alt="image.png"> 至此，资源获取完毕，开始渲染啦</p><hr><h3 id="渲染主线程" tabindex="-1">渲染主线程 <a class="header-anchor" href="#渲染主线程" aria-label="Permalink to &quot;渲染主线程&quot;">​</a></h3><h4 id="渲染进程准备阶段" tabindex="-1">渲染进程准备阶段 <a class="header-anchor" href="#渲染进程准备阶段" aria-label="Permalink to &quot;渲染进程准备阶段&quot;">​</a></h4><p>Chrome 为每个页面分配一个渲染进程，但如果是 <strong>根域名（xxx.com）和协议</strong>  相同的同一站点，新页面会复用父页面的渲染进程，官方称这种策略为 process-per-site-instance 比如</p><ul><li><a href="https://time.xxx.com" target="_blank" rel="noreferrer">https://time.xxx.com</a></li><li><a href="https://www.xxx.com" target="_blank" rel="noreferrer">https://www.xxx.com</a></li><li><a href="https://www.xxx.com:8080" target="_blank" rel="noreferrer">https://www.xxx.com:8080</a></li></ul><p><a href="https://juejin.cn/post/6855129007424602120" target="_blank" rel="noreferrer">URL 初探</a> 此时还不能进入文档解析状态，数据还在网络进程中</p><h4 id="提交文档阶段" tabindex="-1">提交文档阶段 <a class="header-anchor" href="#提交文档阶段" aria-label="Permalink to &quot;提交文档阶段&quot;">​</a></h4><ul><li>浏览器进程接收到网络进程的响应数据，向渲染进程发起“提交文档“的消息</li><li>渲染进程与网络进程建立传输数据的管道</li><li>数据传输完成，渲染进程返回“确认提交”信息给浏览器进程</li><li>浏览器进程收到“确认提交”消息，更新浏览器洁面状态，包括安全状态、地址栏 URL、前进后退的历史状态，然后更新 web 页面，此时进入渲染阶段 <blockquote><p>因此我们输入一个地址并回车后，页面并没有马上消息，要等一会儿才更新页面</p></blockquote></li></ul><h4 id="解析-html" tabindex="-1">解析 HTML <a class="header-anchor" href="#解析-html" aria-label="Permalink to &quot;解析 HTML&quot;">​</a></h4><h5 id="词法分析" tabindex="-1">词法分析 <a class="header-anchor" href="#词法分析" aria-label="Permalink to &quot;词法分析&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">p</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;a&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">text text text</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">p</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以上 HTML 片段会被拆分成词（token）</p><ul><li><code>&lt;p</code>“标签”的开始；</li><li><code>class=“a”</code> 属性；</li><li><code>&gt;</code> “标签”的结束；</li><li>text text text 文本；</li><li><code>&lt;/p&gt;</code> 标签结束。</li></ul><p><img src="'+D+'" alt=""> 把字符流解析成词的最常见方案是使用 <strong>状态机</strong></p><h5 id="状态机" tabindex="-1">状态机 <a class="header-anchor" href="#状态机" aria-label="Permalink to &quot;状态机&quot;">​</a></h5><p>初始状态，区分“&lt;”“非&lt;” 出现“&lt;”可以认为进入一个标签状态，“非&lt;”可以认为进入一个文本节点 进入标签状态还需要区分：</p><table><thead><tr><th>下一个字符</th><th>分析</th></tr></thead><tbody><tr><td>!</td><td>注释节点或者 CDATA 节点</td></tr><tr><td>/</td><td>结束标签</td></tr><tr><td>字母</td><td>开始标签</td></tr></tbody></table><h5 id="构建-dom-树" tabindex="-1">构建 DOM 树 <a class="header-anchor" href="#构建-dom-树" aria-label="Permalink to &quot;构建 DOM 树&quot;">​</a></h5><p><img src="'+B+`" alt="image.png"> 用 js 模拟 HTML 的语法分析器</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">/*receiveInput负责接收词法部分产生的词</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">接收的同时，构建DOM树，栈顶就是最后的根节点</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">dom树的产出就是这个stack的第一项*/</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">HTMLSyntaticalParser</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">stack</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [</span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">HTMLDocument</span><span style="color:#839496;">()];</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">receiveInput</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (token) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        1. 栈顶元素就是当前节点；</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        2. 遇到属性，就添加到当前节点；</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        3. 遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        4. 遇到注释节点，作为当前节点的子节点；</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        5. 遇到 tag start 就入栈一个节点，当前节点就是这个节点的父节点；</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        6. 遇到 tag end 就出栈一个节点（还可以检查是否匹配）。</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">        */</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">getOutput</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">stack</span><span style="color:#839496;">[</span><span style="color:#D33682;">0</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">  };</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>可通过在浏览器控制台输入“document”后回车查看 dom 树结构</p></blockquote><h4 id="解析-css" tabindex="-1">解析 CSS <a class="header-anchor" href="#解析-css" aria-label="Permalink to &quot;解析 CSS&quot;">​</a></h4><p><img src="`+A+'" alt="image.png"> CSS 规则不是 DOM 结构建好了以后才添加样式的，而是依次拿到上一步构造好的元素，去检查匹配哪些规则再根据规则优先级进行覆盖和调整。不存在父选择器，选择器的出现顺序必定跟构建 DOM 树的顺序一致。</p><ul><li>空格: 后代，选中它的子节点和所有子节点的后代节点。</li><li><blockquote><p>: 子代，选中它的子节点。</p></blockquote></li><li>+：直接后继选择器，选中它的下一个相邻节点。</li><li>~：后继，选中它之后所有的相邻节点。</li><li>||：列，选中表格中的一列。</li></ul><p>规则匹配的时候，也是要根据节点信息处理</p><blockquote><p>可通过在浏览器控制台输入 document.styleSheets 查看 css 代码生成的结构</p></blockquote><p>css 在被处理成 styleSheets 后，还要进行标准化，处理一些不被浏览器渲染引擎理解的属性值，例如： <img src="'+k+`" alt="image.png"></p><h4 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h4><p>有了 DOM 树和样式，还不足以显示页面，还需要给可见元素计算几何位置</p><ol><li><p>创建布局树 LayoutTree</p><p>构建一棵只包含可见元素的布局树。</p></li><li><p>布局计算</p><pre><code> 计算布局树节点的坐标位置，重新写回布局树中。
</code></pre><p>浏览器的基本布局方案是正常流排版，在此基础上支持绝对定位元素和浮动元素</p></li><li><p>正常流布局：顺次排布、折行，支持元素和文字的混排</p></li><li><p>绝对定位元素：把自身抽离正常流，依靠 top、left 等确定位置，不参加布局计算，不影响其他元素</p></li><li><p>浮动元素：使自身处于正常流的左或者右的边界，占据一块空间</p></li></ol><p>除此之外，还有 flex、grid 等布局方式</p><h4 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h4><p>针对复杂的 3d 变换、页面滚动、z 轴排序，渲染引擎需要为特定的节点生成专用的涂层，生成一棵 LayerTree 并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，就从属于父节点的图层</p><blockquote><p>拥有层叠上下文属性的元素会被提升为单独的一层，裁剪的元素也会成为单独一层</p></blockquote><p><img src="`+E+'" alt="image.png"></p><h4 id="图层绘制" tabindex="-1">图层绘制 <a class="header-anchor" href="#图层绘制" aria-label="Permalink to &quot;图层绘制&quot;">​</a></h4><p>渲染引擎将一个图层的绘制拆分成很多小的绘制指令，按顺序组成一个待绘制列表，在这个阶段我们获得一个待绘制列表 <img src="'+q+'" alt="image.png"></p><h3 id="合成线程" tabindex="-1">合成线程 <a class="header-anchor" href="#合成线程" aria-label="Permalink to &quot;合成线程&quot;">​</a></h3><h4 id="栅格化操作" tabindex="-1">栅格化操作 <a class="header-anchor" href="#栅格化操作" aria-label="Permalink to &quot;栅格化操作&quot;">​</a></h4><p>一个页面可能会很大，但是用户只能基于视口看到一部分，因此没有必要用巨大的开销去渲染整个页面。 于是乎，当绘制列表产出后，主线程把绘制列表提交给合成线程，合成线程会将图层划分为 <strong>图块（tile）</strong> ，通常是 256x256 或者 512x512，合成线程会按照视口附近的图块优先生成位图， <strong>实际生成位图的操作是由栅格化执行，将图块转换为位图</strong> 。 渲染进程维护一个栅格化的线程池，图块的栅格化都在线程池里执行 <img src="'+v+'" alt=""> 栅格化会使用 gpu 来加速，称为快速栅格化，或 gpu 栅格化，生成的位图被保存在 gpu 内存中 <img src="'+w+`" alt=""></p><h4 id="合成-compositing" tabindex="-1">合成 compositing <a class="header-anchor" href="#合成-compositing" aria-label="Permalink to &quot;合成 compositing&quot;">​</a></h4><p>合成线程收集图块信息（也叫绘制四边形 DrawQuad），然后进行合成帧操作，并将合成帧递交给主进程，最后浏览器主进程将合成帧发送给 GPU 进程，将页面内容绘制到内存中，最后将内存中的内容显示在屏幕上，变成肉眼可见的图像 浏览器有一个叫 viz 的组件，用来接收合成线程发来的 DrawQuad 命令，根据 DrawQuad 命令，将页面内容绘制到内存中，最后将内存显示在屏幕上，变成肉眼可见的图像</p><h3 id="绘制的抽象理解" tabindex="-1">绘制的抽象理解 <a class="header-anchor" href="#绘制的抽象理解" aria-label="Permalink to &quot;绘制的抽象理解&quot;">​</a></h3><p>把每一个元素对应的盒变成位图，在内存中。把模型变为位图 可分为两类：图形和文字</p><ul><li>图形：背景、边框、SVG 元素、阴影，需要底层库支持，Android 有 Skia，Windows 有 GDI</li><li>文字：分像素字形和矢量字形两种，小尺寸如 6px、8px 提供像素字形，大尺寸提供矢量字形。需要字体库支持，比如 C++编写的 Freetype，提供读取字体文件的基本能力，能够根据字符的码点抽取出字形 <blockquote><p>渲染时，最普遍的情况是生成的位图尺寸跟它在上一步排版时占据的尺寸相同。 但是很多属性会影响位图的大小，比如阴影，因此阴影会作为一个独立的盒来处理</p></blockquote></li></ul><p>渲染过程中，子元素是不会被绘制到渲染的位图上的，这样能够在父子元素的相对位置发生变化时，保证渲染的结果能够最大程度被缓存，减少重新渲染。 绘制过程，不会把子元素渲染到位图，合成正是为了创建合成的位图，把部分子元素渲染到合成的位图上</p><h5 id="合成策略" tabindex="-1">合成策略 <a class="header-anchor" href="#合成策略" aria-label="Permalink to &quot;合成策略&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;a&quot;</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;b&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">...</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;c&quot;</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">style</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;transform:translate(0,0)&quot;</span><span style="color:#586E75;">&gt;&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>猜测可能变化的元素，排除到合成之外，从而提高性能 假设以上代码要对 c 元素进行改变，此时如果合成 a 和 b，不合成 c，就能减少绘制次数，产生极大的性能收益 目前，合成策略根据 position、transform 等属性来决定，但是新的 css 标准给出了 will-change 属性，可以结合业务代码提示浏览器的合成策略。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change" target="_blank" rel="noreferrer">will-change mdn</a></p><h5 id="显示" tabindex="-1">显示 <a class="header-anchor" href="#显示" aria-label="Permalink to &quot;显示&quot;">​</a></h5><p>浏览器会把最终要显示的位图交给操作系统处理 借助脏矩形算法，当鼠标移、元素移动或者其他需要导致重绘的场景发生时，只重新绘制它所影响到的几个矩形区域，重绘脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。</p><p>参考：</p><ul><li><a href="https://www.xuecaijie.com/it/157.html#1Q64p5DeC8dKFF" target="_blank" rel="noreferrer">输入一个 url 后会发生什么</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">渲染页面-mdn</a></li><li><a href="https://juejin.im/post/6844903565610188807" target="_blank" rel="noreferrer">浏览器渲染</a></li><li>重学前端-模块三：浏览器实现原理与 API</li><li>浏览器工作原理与实践-李兵</li></ul><h3 id="关于浏览器工作流程的思维导图、ppt" tabindex="-1">关于浏览器工作流程的思维导图、ppt <a class="header-anchor" href="#关于浏览器工作流程的思维导图、ppt" aria-label="Permalink to &quot;关于浏览器工作流程的思维导图、ppt&quot;">​</a></h3><p><img src="`+_+'" alt="WechatIMG3.jpeg"></p><ul><li><a href="https://www.yuque.com/attachments/yuque/0/2021/pdf/2165937/1615090982321-6b025e49-2013-4598-88be-128b5c64b02f.pdf?_lake_card=%7B%22uid%22%3A%221615090980076-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fpdf%2F2165937%2F1615090982321-6b025e49-2013-4598-88be-128b5c64b02f.pdf%22%2C%22name%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.pdf%22%2C%22size%22%3A1251962%2C%22type%22%3A%22application%2Fpdf%22%2C%22ext%22%3A%22pdf%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22T0io8%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noreferrer">浏览器架构.pdf</a></li><li><a href="https://www.yuque.com/attachments/yuque/0/2021/ppt/2165937/1615091175679-2de9ca82-8e8e-49a6-b0f7-9b01133007de.ppt?_lake_card=%7B%22uid%22%3A%221615091087164-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fppt%2F2165937%2F1615091175679-2de9ca82-8e8e-49a6-b0f7-9b01133007de.ppt%22%2C%22name%22%3A%22%E6%B5%85%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.ppt%22%2C%22size%22%3A2186240%2C%22type%22%3A%22application%2Fvnd.ms-powerpoint%22%2C%22ext%22%3A%22ppt%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%2296aUu%22%2C%22card%22%3A%22file%22%7D" target="_blank" rel="noreferrer">浅析浏览器渲染原理.ppt</a></li></ul><h2 id="浏览器-window-对象" tabindex="-1">浏览器 window 对象 <a class="header-anchor" href="#浏览器-window-对象" aria-label="Permalink to &quot;浏览器 window 对象&quot;">​</a></h2><p>所谓的 <strong>BOM（Browser Object Model）浏览器对象模型</strong> ，是为了控制浏览器的行为而出现的接口。 <img src="'+x+`" alt="image.png"> 属于 BOM 区域的有浏览器标签页、地址栏、滚动条、右键菜单等等 BOM 的 <strong>核心对象</strong> 是 <strong>Window</strong> ，包含了 DOM 的核心对象 document window 不仅是全局作用域，还表示浏览器窗口 常用的 BOM API：</p><ul><li><code>innerWidth</code> <code>innerHeight</code>  可以获取浏览器窗口内部去除掉菜单栏、工具栏、边框等后的宽高，</li><li><code>outerWidth</code> <code>outerHeight</code>  获取浏览器窗口的整个宽高</li><li><code>navigator</code>  表示浏览器的信息</li></ul><p><code>navigator.appName</code>：浏览器名称； <code>navigator.appVersion</code>：浏览器版本； <code>navigator.language</code>：浏览器设置的语言； <code>navigator.platform</code>：操作系统类型； <code>navigator.userAgent</code>：浏览器设定的<code>User-Agent</code>字符串。 但是 navigator 的信息很容易可以修改，所以不一定是正确的，不要用这个去判断浏览器版本 正确做法是直接用||短路运算符</p><ul><li><code>screen</code>表示屏幕信息，常用属性有</li></ul><p><code>screen.width</code>：屏幕宽度，以像素为单位； <code>screen.height</code>：屏幕高度，以像素为单位； <code>screen.colorDepth</code>：返回颜色位数，如 8、16、24。</p><ul><li><code>location</code>  对象表示当前页面的 url 信息</li></ul><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以用<code>location.href</code>获取完整的 url。要获得 URL 各个部分的值，可以这么写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">protocol</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;http&#39;</span></span>
<span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">host</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;www.example.com&#39;</span></span>
<span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">port</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;8080&#39;</span></span>
<span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Javapathname</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;/path/index.html&#39;</span></span>
<span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">search</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;?a=1&amp;b=2&#39;</span></span>
<span class="line"><span style="color:#268BD2;">location</span><span style="color:#839496;">.</span><span style="color:#268BD2;">hash</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// &#39;TOP&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>location.assign()</code>加载一个新页面，<code>location.reload()</code>重新加载当前页面 <strong>参考</strong></p><ul><li><a href="https://juejin.cn/post/6844903939008102413" target="_blank" rel="noreferrer">DOM 和 BOM</a></li></ul><h2 id="document-文档对象" tabindex="-1">document 文档对象 <a class="header-anchor" href="#document-文档对象" aria-label="Permalink to &quot;document 文档对象&quot;">​</a></h2><p>表示当前页面，<code>document</code>对象是整个 dom 树的根节点 常用方法： <code>document.title</code>获取 title 标签属性 <code>getElementById()</code><code>getElementsByTagName()</code><code>document.querySelector()</code><code>document.addEventListener()</code><code>document.cookie</code>获取当前页面的 Cookie，cookie 由服务器发送的 key-value 标识符，可用于区分不同用户的请求，服务器发送一个 cookie 给浏览器，浏览器访问该网站就会在请求头上附上这个 cookie。但是有安全隐患，因为 html 可以直接引用第三方的 js 代码，解决这个问题需要服务器设置 cookie 时使用 httponly</p><h2 id="dom-事件和事件委托" tabindex="-1">DOM 事件和事件委托 <a class="header-anchor" href="#dom-事件和事件委托" aria-label="Permalink to &quot;DOM 事件和事件委托&quot;">​</a></h2><h3 id="dom-事件模型" tabindex="-1">DOM 事件模型 <a class="header-anchor" href="#dom-事件模型" aria-label="Permalink to &quot;DOM 事件模型&quot;">​</a></h3><p><img src="`+P+`" alt=""> DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM 的方法(methods)让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。</p><h3 id="捕获和冒泡" tabindex="-1">捕获和冒泡： <a class="header-anchor" href="#捕获和冒泡" aria-label="Permalink to &quot;捕获和冒泡：&quot;">​</a></h3><p>Netscape 认为 outer 上的处理函数应该先被执行. 这被称作 event capturing，即从外到内</p><p>IE 则认为 inner 上的处理函数具有执行优先权. 这被叫做 event bubbling，即从内到外</p><p>于是 W3C 标准则取其折中方案. W3C 事件模型中发生的任何事件, 先(从其祖先元素 document)开始一路向下捕获, 直到达到目标元素, 其后再次从目标元素开始冒泡.(先捕获再冒泡，搞清楚这一点很重要）</p><p>开发者可以决定事件处理器是注册在捕获或者是冒泡阶段. 如果 addEventListener 的最后一个参数是 true, 那么处理函数将在捕获阶段被触发; 否则(false), 会在冒泡阶段被触发.</p><p><strong>也就是每点击一个元素，以点击的元素为中心，先捕获，再冒泡，false 或者不加参数表示注册在冒泡阶段执行，true 表示注册在捕获阶段执行</strong></p><p>示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;!</span><span style="color:#268BD2;">DOCTYPE</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">html</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">html</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">head</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">meta</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">charset</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;utf-8&quot;</span><span style="color:#839496;"> </span><span style="color:#586E75;">/&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">title</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">JS Bin</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">title</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">head</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">body</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;grand1&quot;</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">      爷爷</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;parent1&quot;</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">        爸爸</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;child1&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">儿子</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">body</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">html</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">grand1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;爷爷&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">//冒泡</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">parent1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f1</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;爸爸&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">//捕获</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">child1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f3</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;儿子冒泡&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">//冒泡</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">child1</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">f3</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;儿子捕获&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#839496;">); </span><span style="color:#586E75;font-style:italic;">//捕获</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>结果依次为：</p><ol><li>点击儿子 <img src="`+C+'" alt=""></li><li>点击爸爸 <img src="'+T+'" alt=""></li><li>点击爷爷 <img src="'+S+`" alt=""></li></ol><h3 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h3><p>事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown......）的函数委托到另一个元素,好处是节省了内存还能够动态监听元素</p><p>一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。</p><p>示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">id</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;test&quot;</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;red&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">hi</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;red&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">hi</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;red&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">hi</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;red&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">hi</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">div</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">class</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;red&quot;</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">hi</span><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#586E75;">&lt;/</span><span style="color:#268BD2;">div</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"></span>
<span class="line"><span style="color:#839496;"> </span><span style="color:#268BD2;">delegateEvent</span><span style="color:#839496;">(</span><span style="color:#268BD2;">parentSelector</span><span style="color:#839496;">, </span><span style="color:#268BD2;">targetSelector</span><span style="color:#839496;">, </span><span style="color:#268BD2;">events</span><span style="color:#839496;">, </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#586E75;font-style:italic;">// 事件处理逻辑,</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">parentSelector</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#268BD2;">parentSelector</span><span style="color:#839496;">, </span><span style="color:#268BD2;">events</span><span style="color:#839496;">, </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (e) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">target</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">currentTarget</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">e</span><span style="color:#839496;">.</span><span style="color:#268BD2;">currentTarget</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#586E75;font-style:italic;">// 遍历并判断是否为目标元素，如果不是，则往元素的 parentNode 继续查找</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">while</span><span style="color:#839496;"> (</span><span style="color:#859900;">!</span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;">.</span><span style="color:#268BD2;">matches</span><span style="color:#839496;">(</span><span style="color:#268BD2;">targetSelector</span><span style="color:#839496;">)) {</span></span>
<span class="line"><span style="color:#839496;">                </span><span style="color:#586E75;font-style:italic;">// 如果是目标元素则跳出循环</span></span>
<span class="line"><span style="color:#839496;">                </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#839496;"> </span><span style="color:#268BD2;">currentTarget</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">                    </span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#B58900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">                    </span><span style="color:#859900;">break</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">                }</span></span>
<span class="line"><span style="color:#839496;">                </span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;">.</span><span style="color:#268BD2;">parentNode</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">                </span><span style="color:#586E75;font-style:italic;">// 将回调函数的 this 指向目标元素</span></span>
<span class="line"><span style="color:#839496;">                </span><span style="color:#268BD2;">fn</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">targetEl</span><span style="color:#839496;">, </span><span style="color:#859900;">Array</span><span style="color:#839496;">.prototype.</span><span style="color:#268BD2;">slice</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">arguments</span><span style="color:#839496;">));</span></span>
<span class="line"><span style="color:#839496;">            }</span></span>
<span class="line"><span style="color:#839496;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">test</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">document</span><span style="color:#839496;">.</span><span style="color:#268BD2;">querySelector</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;#test&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#268BD2;">dom</span><span style="color:#839496;">.</span><span style="color:#268BD2;">delegateEvent</span><span style="color:#839496;">(</span><span style="color:#268BD2;">test</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;#test .red&#39;</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">, () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;我被点击了&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><h2 id="history-对象" tabindex="-1">history 对象 <a class="header-anchor" href="#history-对象" aria-label="Permalink to &quot;history 对象&quot;">​</a></h2><p><code>window.history</code> ，保存了浏览器的历史记录，js 可以调用 history 对象的 back() or forward()，相当于点击浏览器的后退和前进，这个在现代 web 复杂的页面交互中是不适用的</p><h2 id="浏览器兼容性问题" tabindex="-1">浏览器兼容性问题 <a class="header-anchor" href="#浏览器兼容性问题" aria-label="Permalink to &quot;浏览器兼容性问题&quot;">​</a></h2><h3 id="样式兼容性" tabindex="-1">样式兼容性 <a class="header-anchor" href="#样式兼容性" aria-label="Permalink to &quot;样式兼容性&quot;">​</a></h3><p><img src="`+M+`" alt="image.png"></p><ol><li><p>使用 Normalize.css 或是自己撰写 reset 重置样式</p></li><li><p>不同浏览器厂商对于 css3 的样式提供了针对浏览器的前缀</p><table><thead><tr><th>内核</th><th>浏览器代表</th><th>前缀</th></tr></thead><tbody><tr><td>Trident</td><td>IE</td><td>-ms</td></tr><tr><td>Gecko</td><td>Firefox</td><td>-moz</td></tr><tr><td>Presto 已废弃</td><td>Opera 前内核</td><td>-o</td></tr><tr><td>Webkit</td><td>Chrome、Safari</td><td>-webkit</td></tr></tbody></table></li><li><p>opacity</p></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">opacity: </span><span style="color:#D33682;">0.5</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">filter: </span><span style="color:#268BD2;">alpha</span><span style="color:#839496;">((</span><span style="color:#268BD2;">opacity</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">50</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">//IE6-IE8我们习惯使用filter滤镜属性来进行实现</span></span>
<span class="line"><span style="color:#839496;">filter: progid: </span><span style="color:#268BD2;">DXImageTransform</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Microsoft</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Alpha</span><span style="color:#839496;">((</span><span style="color:#268BD2;">style</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">), (</span><span style="color:#268BD2;">opacity</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">50</span><span style="color:#839496;">)); </span><span style="color:#586E75;font-style:italic;">//IE4-IE9都支持滤镜写法progid:DXImageTransform.Microsoft.Alpha(Opacity=xx)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="交互兼容性" tabindex="-1">交互兼容性 <a class="header-anchor" href="#交互兼容性" aria-label="Permalink to &quot;交互兼容性&quot;">​</a></h3><p><img src="`+j+`" alt="image.png"> 事件兼容： 适配器写法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">var</span><span style="color:#839496;"> </span><span style="color:#268BD2;">helper</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//绑定事件</span></span>
<span class="line"><span style="color:#268BD2;">helper</span><span style="color:#839496;">.</span><span style="color:#268BD2;">on</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (target, type, handler) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#268BD2;">type</span><span style="color:#839496;">, </span><span style="color:#268BD2;">handler</span><span style="color:#839496;">, </span><span style="color:#B58900;">false</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">attachEvent</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#2AA198;">&#39;on&#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">type</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (event) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">handler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">event</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      },</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#839496;">    );</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//取消事件监听</span></span>
<span class="line"><span style="color:#268BD2;">helper</span><span style="color:#839496;">.</span><span style="color:#268BD2;">remove</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (target, type, handler) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">removeEventListener</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">removeEventListener</span><span style="color:#839496;">(</span><span style="color:#268BD2;">type</span><span style="color:#839496;">, </span><span style="color:#268BD2;">handler</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  } </span><span style="color:#859900;">else</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">detachEvent</span><span style="color:#839496;">(</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#2AA198;">&#39;on&#39;</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">type</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> (event) {</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">handler</span><span style="color:#839496;">.</span><span style="color:#268BD2;">call</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#839496;">, </span><span style="color:#268BD2;">event</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">      },</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#839496;">    );</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="浏览器-hack" tabindex="-1">浏览器 hack <a class="header-anchor" href="#浏览器-hack" aria-label="Permalink to &quot;浏览器 hack&quot;">​</a></h3><p><img src="`+L+'" alt="image.png"> 不同厂商的浏览器或者同一浏览器的不同版本都可能存在对 css、js 的支持、解析不一样，为了获得统一的效果，就要针对不同的浏览器或不同版本写特定的 css 或 js 有 css hack 和 js hack 发现一个便于查询的网站<a href="https://www.html.cn/tool/hack/" target="_blank" rel="noreferrer">https://www.html.cn/tool/hack/</a> 但是需要注意 hack 并不总是完美的解决方案，大多数情况下应该修复 css/js 可以使用<a href="https://modernizr.com/" target="_blank" rel="noreferrer">modernizr</a>库进行功能检测，还有中文网<a href="http://modernizr.cn" target="_blank" rel="noreferrer">modernizr</a></p>',168),H=[F];function O(I,z,U,N,R,W){return n(),a("div",null,H)}const Q=s(J,[["render",O]]);export{V as __pageData,Q as default};
