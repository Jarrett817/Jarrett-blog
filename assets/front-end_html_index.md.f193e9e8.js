import{_ as a,c as l,o as e,Q as i}from"./chunks/framework.7454da9a.js";const v=JSON.parse('{"title":"html","description":"","frontmatter":{"title":"html","desc":"《JavaScript设计模式》、《大话设计模式》笔记","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[],"relativePath":"front-end/html/index.md","filePath":"front-end/html/index.md","lastUpdated":1712240776000}'),t={name:"front-end/html/index.md"},s=i(`<h1 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-label="Permalink to &quot;html&quot;">​</a></h1><h2 id="语义化" tabindex="-1">语义化 <a class="header-anchor" href="#语义化" aria-label="Permalink to &quot;语义化&quot;">​</a></h2><ul><li>是什么？是一种写 HTML 标签的方法论</li><li>怎么做？根据内容结构选择合适的标签，内容语义化+代码语义化</li><li>解决了什么问题？明确了书写规范，便于开发者阅读和写出更优雅的代码结构的同时，方便搜索引擎检索</li></ul><p>注意点：</p><ul><li>尽可能少用无意义的 div 和 span</li><li>语义不明显时，div 和 p 选 p，p 在默认情况下有上下间距，对兼容特殊终端有利</li><li>不使用纯样式标签，如：b、font，改用 css 设置</li><li>表格，标题用 caption、表头用 thead、主体用 tbody、尾部用 tfoot，表头用 th、单元格用 td</li><li>表单域用 fieldset 标签包起来，用 legend 标签说明表单用途</li><li>input 标签的说明文本需要使用 label 标签，并通过为 input 设置 id 属性，在 label 标签中设置 for=xxx 来让说明文本和相对应的 input 关联起来</li></ul><h2 id="html5-新标签和新特性" tabindex="-1">HTML5 新标签和新特性 <a class="header-anchor" href="#html5-新标签和新特性" aria-label="Permalink to &quot;HTML5 新标签和新特性&quot;">​</a></h2><p>新标签：</p><ul><li>文章相关的：header、main、footer、nav、section、article、figure、mark</li><li>多媒体相关的：video、audio、svg、canvas</li><li>表单相关的：type=email、type=tel</li></ul><p>新特性：</p><p>主要是关于图像、位置、存储、多任务等功能的增加</p><ul><li>拖拽释放的 api</li><li>语义化的标签</li><li>地理 api、音频、视频 api、画布 api</li><li>localStorage、sessionStorage</li><li>表单控件，calendar、date、time、email、url、search</li></ul><h2 id="title-和-alt-属性" tabindex="-1">title 和 alt 属性 <a class="header-anchor" href="#title-和-alt-属性" aria-label="Permalink to &quot;title 和 alt 属性&quot;">​</a></h2><ul><li>两个属性都是当鼠标滑动到元素上的时候显示</li><li>alt 是 img 的特有属性，是图片内容的等价描述，图片无法显示的时候显示文字</li><li>title 可以用在除了 base、baseFont、head、html、meta、param、script、title 之外的所有标签，是对 dom 元素的一种类似注释说明</li></ul><h2 id="html-全局属性" tabindex="-1">HTML 全局属性 <a class="header-anchor" href="#html-全局属性" aria-label="Permalink to &quot;HTML 全局属性&quot;">​</a></h2><ul><li>class</li><li>data-*增加自定义属性</li><li>draggable 元素可拖拽</li><li>id</li><li>lang</li><li>style</li><li>title 元素相关建议信息</li></ul><h2 id="canvas-和-svg-的区别" tabindex="-1">Canvas 和 Svg 的区别 <a class="header-anchor" href="#canvas-和-svg-的区别" aria-label="Permalink to &quot;Canvas 和 Svg 的区别&quot;">​</a></h2><ul><li>canvas 用笔刷来绘制 2d 图形</li><li>svg 用标签来绘制不规则矢量图</li><li>相同点：都是主要用来画 2d 图形的</li><li>不同点：canvas 是位图，放大会失真，svg 是矢量图</li><li>不同点：svg 节点过多，渲染性能不如 canvas，但是 canvas 写起来复杂</li><li>不同点：svg 支持分层和事件，与普通 html 标签相似，canvas 不支持，但是可以模拟实现</li><li>canvas 无法对已经绘制的图像进行修改，每次更改都是重新绘制，svg 可以获取到标签进行操作</li></ul><h2 id="头部元素" tabindex="-1">头部元素 <a class="header-anchor" href="#头部元素" aria-label="Permalink to &quot;头部元素&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">title</span><span style="color:#586E75;">&gt;</span><span style="color:#839496;">可以添加文档标题</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">meta</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>charset 指定字符集</li><li>name 制定 meta 元素的类型，说明了包含的信息</li><li>content 指定了实际的元数据内容</li></ul><h2 id="a-标签" tabindex="-1">a 标签 <a class="header-anchor" href="#a-标签" aria-label="Permalink to &quot;a 标签&quot;">​</a></h2><p>利用<code>&lt;a/&gt;</code>标签进行下载时，建议写明文件的后缀，浏览器会将 download 中的最后一个<code>.</code>符号识别为文件后缀，如果文件名中含有<code>.</code>会导致下载的文件后缀不正确。</p><p>需要注意的是，<code>/</code>、<code>\\</code>会被浏览器自动转换成<code>_</code>，<code>.</code>则不会转换</p>`,23),n=[s];function o(r,d,c,h,p,m){return e(),l("div",null,n)}const b=a(t,[["render",o]]);export{v as __pageData,b as default};
