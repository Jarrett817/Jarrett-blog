import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.7454da9a.js";const D=JSON.parse('{"title":"力扣","description":"","frontmatter":{},"headers":[],"relativePath":"practice/leetcode.md","filePath":"practice/leetcode.md","lastUpdated":1712651966000}'),p={name:"practice/leetcode.md"},o=l(`<h1 id="力扣" tabindex="-1">力扣 <a class="header-anchor" href="#力扣" aria-label="Permalink to &quot;力扣&quot;">​</a></h1><h2 id="两数之和" tabindex="-1">两数之和 <a class="header-anchor" href="#两数之和" aria-label="Permalink to &quot;两数之和&quot;">​</a></h2><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。 你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 暴力解法</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;">(nums, target) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span><span style="color:#268BD2;">i</span><span style="color:#859900;">&lt;</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">.length;</span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">j</span><span style="color:#859900;">=</span><span style="color:#268BD2;">i</span><span style="color:#859900;">+</span><span style="color:#D33682;">1</span><span style="color:#839496;">;</span><span style="color:#268BD2;">j</span><span style="color:#859900;">&lt;</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">.length;</span><span style="color:#268BD2;">j</span><span style="color:#859900;">++</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">]</span><span style="color:#859900;">+</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">[</span><span style="color:#268BD2;">j</span><span style="color:#839496;">]</span><span style="color:#859900;">===</span><span style="color:#268BD2;">target</span><span style="color:#839496;">)</span><span style="color:#859900;">return</span><span style="color:#839496;"> [</span><span style="color:#268BD2;">i</span><span style="color:#839496;">,</span><span style="color:#268BD2;">j</span><span style="color:#839496;">]</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> []</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// hash表</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;">(nums,target){</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">map</span><span style="color:#859900;">=new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Map</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">for</span><span style="color:#839496;">(</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#859900;">=</span><span style="color:#D33682;">0</span><span style="color:#839496;">;</span><span style="color:#268BD2;">i</span><span style="color:#859900;">&lt;</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">.length;</span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">   </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">has</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#859900;">-</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">])){</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> [</span><span style="color:#268BD2;">i</span><span style="color:#839496;">,</span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">get</span><span style="color:#839496;">(</span><span style="color:#268BD2;">target</span><span style="color:#859900;">-</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">])]</span></span>
<span class="line"><span style="color:#839496;">   }</span><span style="color:#859900;">else</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">     </span><span style="color:#268BD2;">map</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#268BD2;">nums</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">],</span><span style="color:#268BD2;">i</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">   }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> []</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="路径总和" tabindex="-1">路径总和 <a class="header-anchor" href="#路径总和" aria-label="Permalink to &quot;路径总和&quot;">​</a></h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。 说明: 叶子节点是指没有子节点的节点。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 广度优先遍历</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;">(root, targetSum) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#859900;">!</span><span style="color:#268BD2;">root</span><span style="color:#839496;">) </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">nodes</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [</span><span style="color:#268BD2;">root</span><span style="color:#839496;">]</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">while</span><span style="color:#839496;">(</span><span style="color:#268BD2;">nodes</span><span style="color:#839496;">.length){</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">current</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">nodes</span><span style="color:#839496;">.</span><span style="color:#268BD2;">pop</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">isLeaf</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">!</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#859900;">!</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">right</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">isLeaf</span><span style="color:#839496;"> </span><span style="color:#859900;">&amp;&amp;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span><span style="color:#839496;"> </span><span style="color:#859900;">===</span><span style="color:#268BD2;">targetSum</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">            </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#B58900;">true</span></span>
<span class="line"><span style="color:#839496;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span><span style="color:#859900;">=</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span><span style="color:#859900;">+</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">nodes</span><span style="color:#839496;">.</span><span style="color:#268BD2;">unshift</span><span style="color:#839496;">(</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">left</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">         }   </span></span>
<span class="line"><span style="color:#839496;">         </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">right</span><span style="color:#839496;">){</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">right</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span><span style="color:#859900;">=</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">right</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span><span style="color:#859900;">+</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">val</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">nodes</span><span style="color:#839496;">.</span><span style="color:#268BD2;">unshift</span><span style="color:#839496;">(</span><span style="color:#268BD2;">current</span><span style="color:#839496;">.</span><span style="color:#268BD2;">right</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">         }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#B58900;">false</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,7),e=[o];function r(t,c,y,i,b,u){return a(),n("div",null,e)}const m=s(p,[["render",r]]);export{D as __pageData,m as default};
