import{o as n,c as a,b as t,d as s}from"./app.dff7797b.js";const e='{"title":"浏览器","description":"","frontmatter":{"title":"浏览器","desc":"浏览器相关知识点","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[{"level":2,"title":"浏览器的组成","slug":"浏览器的组成"},{"level":2,"title":"浏览器的多进程架构","slug":"浏览器的多进程架构"},{"level":3,"title":"进程和线程","slug":"进程和线程"},{"level":3,"title":"单进程浏览器","slug":"单进程浏览器"},{"level":3,"title":"多进程浏览器","slug":"多进程浏览器"},{"level":3,"title":"当前多进程浏览器","slug":"当前多进程浏览器"},{"level":3,"title":"未来面向服务的架构","slug":"未来面向服务的架构"},{"level":2,"title":"浏览器是怎么工作的","slug":"浏览器是怎么工作的"},{"level":3,"title":"从一个 URL 到网页","slug":"从一个-url-到网页"},{"level":3,"title":"渲染主线程","slug":"渲染主线程"},{"level":3,"title":"合成线程","slug":"合成线程"},{"level":3,"title":"绘制的抽象理解","slug":"绘制的抽象理解"},{"level":3,"title":"关于浏览器工作流程的思维导图、ppt","slug":"关于浏览器工作流程的思维导图、ppt"},{"level":2,"title":"浏览器 window 对象","slug":"浏览器-window-对象"},{"level":2,"title":"document 文档对象","slug":"document-文档对象"},{"level":2,"title":"DOM 事件和事件委托","slug":"dom-事件和事件委托"},{"level":3,"title":"DOM 事件模型","slug":"dom-事件模型"},{"level":3,"title":"捕获和冒泡：","slug":"捕获和冒泡："},{"level":3,"title":"事件委托","slug":"事件委托"},{"level":2,"title":"history 对象","slug":"history-对象"},{"level":2,"title":"浏览器兼容性问题","slug":"浏览器兼容性问题"},{"level":3,"title":"样式兼容性","slug":"样式兼容性"},{"level":3,"title":"交互兼容性","slug":"交互兼容性"},{"level":3,"title":"浏览器 hack","slug":"浏览器-hack"}],"relativePath":"front-end/browser/index.md","lastUpdated":1658914366573}',l={},o=[t("h1",{id:"浏览器"},[t("a",{class:"header-anchor",href:"#浏览器","aria-hidden":"true"},"#"),s(" 浏览器")],-1),t("h2",{id:"浏览器的组成"},[t("a",{class:"header-anchor",href:"#浏览器的组成","aria-hidden":"true"},"#"),s(" 浏览器的组成")],-1),t("ol",null,[t("li",null,"渲染引擎（即内核）")],-1),t("p",null,"用来解析 HTML 和 CSS 这是浏览器兼容性问题出现的根本原因 常见浏览器的内核",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"浏览器"),t("th",null,"内核")])]),t("tbody",null,[t("tr",null,[t("td",null,"chrome"),t("td",null,"Blink")]),t("tr",null,[t("td",null,"欧鹏"),t("td",null,"Blink")]),t("tr",null,[t("td",null,"360 安全浏览器"),t("td",null,"Blink")]),t("tr",null,[t("td",null,"360 极速浏览器"),t("td",null,"Blink")]),t("tr",null,[t("td",null,"Safari"),t("td",null,"Webkit")]),t("tr",null,[t("td",null,"Firefox 火狐"),t("td",null,"Gecko")]),t("tr",null,[t("td",null,"IE"),t("td",null,"Trident")])])],-1),t("ol",{start:"2"},[t("li",null,"js 引擎")],-1),t("p",null,"用来解析网页中的 js 代码，处理后再运行",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"浏览器"),t("th",null,"JS 引擎")])]),t("tbody",null,[t("tr",null,[t("td",null,"chrome / 欧鹏"),t("td",null,"V8")]),t("tr",null,[t("td",null,"Safari"),t("td",null,"Nitro")]),t("tr",null,[t("td",null,"Firefox 火狐"),t("td",null,"SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-）")]),t("tr",null,[t("td",null,"Opera"),t("td",null,"Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）")]),t("tr",null,[t("td",null,"IE"),t("td",null,"Trident")])])],-1),t("h2",{id:"浏览器的多进程架构"},[t("a",{class:"header-anchor",href:"#浏览器的多进程架构","aria-hidden":"true"},"#"),s(" 浏览器的多进程架构")],-1),t("h3",{id:"进程和线程"},[t("a",{class:"header-anchor",href:"#进程和线程","aria-hidden":"true"},"#"),s(" 进程和线程")],-1),t("p",null,[s("进程是一个程序的运行实例。当我们启动一个程序，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程 "),t("img",{src:"/Jarrett-blog/assets/process-thread.ccd9f586.png",alt:"image.png"}),s(" 线程依附于进程，由进程来启动和管理。 线程与进程之间的关系有以下特点")],-1),t("ol",null,[t("li",null,"进程中任一线程执行出错，都会导致整个进程的崩溃，如果程序只有一个进程，那么很容易崩溃掉"),t("li",null,"线程之间可以共享进程中的数据，都能进行读写操作"),t("li",null,"一个进程关闭，操作系统会回收进程所占用的内存，即使某线程存在内存泄漏问题，内存也能被正确回收"),t("li",null,[s("进程之间的内容相互严格隔离。如果需要通信，需要进程间通信（IPC）的机制 "),t("a",{href:"https://imageslr.github.io/2020/02/26/ipc.html",target:"_blank",rel:"noopener noreferrer"},"《进程间的通信方式》")])],-1),t("h3",{id:"单进程浏览器"},[t("a",{class:"header-anchor",href:"#单进程浏览器","aria-hidden":"true"},"#"),s(" 单进程浏览器")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/single-process.ae798bb6.png",alt:"image.png"})],-1),t("h4",{id:"存在的问题"},[t("a",{class:"header-anchor",href:"#存在的问题","aria-hidden":"true"},"#"),s(" 存在的问题")],-1),t("ul",null,[t("li",null,"不稳定。早期浏览器依赖各种插件实现 web 游戏、web 视频，但是插件容易出问题，任意一个线程挂掉都会导致整个浏览器的崩溃"),t("li",null,"不流畅。一个线程需要处理多个模块，比如页面线程需要同时处理页面渲染、页面展现等等，但是同一时刻只有一个模块能执行，造成长时间的等待、卡顿。同时，对于复杂的页面，如果页面内存泄漏，会存在内存不能完全回收的情况，因此导致使用时间越长，内存占用越高，浏览器越慢"),t("li",null,[s("不安全。恶意插件、恶意脚本 "),t("blockquote",null,[t("p",null,"进程结束时，内存总会被正确回收。 但线程结束时，可能存在内存泄漏的情况，所以在单进程的浏览器，打开和关闭的页面更多，浏览器就可能变得越来越卡顿。")])])],-1),t("h3",{id:"多进程浏览器"},[t("a",{class:"header-anchor",href:"#多进程浏览器","aria-hidden":"true"},"#"),s(" 多进程浏览器")],-1),t("p",null,"以 Chrome 举例",-1),t("h4",{id:"早期多进程浏览器"},[t("a",{class:"header-anchor",href:"#早期多进程浏览器","aria-hidden":"true"},"#"),s(" 早期多进程浏览器")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/early-multi-process.d2bc2909.png",alt:"image.png"})],-1),t("ul",null,[t("li",null,"解决不稳定问题。进程相互隔离，一个页面或者插件崩溃，不影响浏览器和其他进程"),t("li",null,"解决不流畅问题。不同站点的页面有自己的渲染进程，所以即便存在比如 js 阻塞渲染进程的情况，也只会影响当前页面"),t("li",null,"解决不安全问题。使用安全沙箱，Chrome 把插件和渲染进程锁在沙箱里面，沙箱里的程序无法访问硬盘和敏感位置。")],-1),t("h3",{id:"当前多进程浏览器"},[t("a",{class:"header-anchor",href:"#当前多进程浏览器","aria-hidden":"true"},"#"),s(" 当前多进程浏览器")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/current-multi-process.08393fcd.png",alt:"image.png"})],-1),t("ul",null,[t("li",null,"浏览器进程。界面显示、用户交互、子进程管理、存储"),t("li",null,"渲染进程。解析、渲染、执行 js，排版引擎 Blink 和 js 引擎 V8 都是运行在该进程中。渲染进程都运行在安全沙箱"),t("li",null,"GPU 进程。GPU 最初是为了实现 3d css，但是后来网页和 Chrome 的 UI 界面都采用 GPU 绘制，GPU 成为普遍需求后，Chrome 的多进程架构引入了 GPU 进程。"),t("li",null,"网络进程。网络资源加载，独立了出来"),t("li",null,"插件进程。运行插件")],-1),t("h4",{id:"存在问题："},[t("a",{class:"header-anchor",href:"#存在问题：","aria-hidden":"true"},"#"),s(" 存在问题：")],-1),t("ul",null,[t("li",null,"更高资源占用。每个进程都包含公共基础结构的副本如 js 运行环境"),t("li",null,"更复杂的体系架构。浏览器模块间耦合性高、拓展性差")],-1),t("h3",{id:"未来面向服务的架构"},[t("a",{class:"header-anchor",href:"#未来面向服务的架构","aria-hidden":"true"},"#"),s(" 未来面向服务的架构")],-1),t("p",null,[s("“面向服务的架构”（Services Oriented Architecture，简称 SOA） "),t("img",{src:"/Jarrett-blog/assets/server-oriented.770489d6.png",alt:"image.png"}),s(" 原来的各种模块重构成独立的服务，每个服务都可以在独立的进程中运行 最终把 UI、数据库、文件、设备、网络等模块重构为基础服务 Chrome 还能根据设备性能调整架构，在性能较差的设备上将服务整合到一个进程中。 "),t("img",{src:"/Jarrett-blog/assets/server-oriented-1.ca35f1de.png",alt:"image.png"})],-1),t("h2",{id:"浏览器是怎么工作的"},[t("a",{class:"header-anchor",href:"#浏览器是怎么工作的","aria-hidden":"true"},"#"),s(" 浏览器是怎么工作的")],-1),t("h3",{id:"从一个-url-到网页"},[t("a",{class:"header-anchor",href:"#从一个-url-到网页","aria-hidden":"true"},"#"),s(" 从一个 URL 到网页")],-1),t("ol",null,[t("li",null,"浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；"),t("li",null,"把请求回来的 HTML 代码经过解析，构建成 DOM 树；"),t("li",null,"计算 DOM 树上的 CSS 属性，构建 CSS 树；"),t("li",null,"根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；"),t("li",null,"合成之后，再绘制到界面上。")],-1),t("h4",{id:"用户输入"},[t("a",{class:"header-anchor",href:"#用户输入","aria-hidden":"true"},"#"),s(" 用户输入")],-1),t("p",null,"在地址栏中输入一个查询关键字，地址栏会判断关键字是搜索内容还是请求的 URL",-1),t("ul",null,[t("li",null,"搜索内容：使用搜索引擎合成新的带搜索关键字的 URL"),t("li",null,[s("URL：加上协议，合成完整的 URL "),t("blockquote",null,[t("p",null,"输入完，按下回车后，跳转页面前，还有一次 beforeunload 事件的机会，可以用于数据清理，或者询问用户是否确认离开或者提交表单")])])],-1),t("h4",{id:"url-请求"},[t("a",{class:"header-anchor",href:"#url-请求","aria-hidden":"true"},"#"),s(" URL 请求")],-1),t("p",null,"浏览器通过进程间通信把 URL 发送给网络进程 首先，网络进程会先查找本地缓存是否缓存了该资源，有就直接返回该资源给浏览器，没有就进入网络请求流程。 请求前先进行 DNS 解析，以获取请求域名的服务器 IP 地址，如果请求协议是 HTTPS，那么还需要建立 TLS 连接",-1),t("h5",{id:"dns-解析"},[t("a",{class:"header-anchor",href:"#dns-解析","aria-hidden":"true"},"#"),s(" DNS 解析")],-1),t("pre",null,[t("code",null,"  在浏览器输入网址，其实就是像服务器请求我们想要的页面内容\n")],-1),t("p",null,[s("客户端收到输入的域名地址后，会先去找本地的 hosts 文件，检查是否有对应的域名 如果有就去向其 IP 地址发送请求，没有就去找 DNS 服务器，通过递归查询本地服务器和迭代查询 DNS 服务器获取到 IP 地址的响应报文 "),t("img",{src:"/Jarrett-blog/assets/dns-classify.6f431220.png",alt:"截屏2020-11-18 上午11.54.39.png"}),t("img",{src:"/Jarrett-blog/assets/dns-search.c0b1540a.png",alt:"image.png"})],-1),t("h5",{id:"tcp-连接"},[t("a",{class:"header-anchor",href:"#tcp-连接","aria-hidden":"true"},"#"),s(" TCP 连接")],-1),t("p",null,[s("拿到 IP 后，下一步要通过三次握手链接到服务器， 要进行 TCP 连接，连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。 请求连接(SYN 数据包) 服务器 客户端 确认信息(SYNJACK 数据包) 握手结束(ACK 数据包) "),t("img",{src:"/Jarrett-blog/assets/three-hands.9a7f1388.png",alt:"image.png"})],-1),t("h5",{id:"http-请求"},[t("a",{class:"header-anchor",href:"#http-请求","aria-hidden":"true"},"#"),s(" HTTP 请求")],-1),t("p",null,"HTTP 是纯粹的文本协议，基于 TCP 协议，是传输文本格式的一个应用层协议。 使用 telnet 发送 HTTP 请求",-1),t("div",{class:"language-"},[t("pre",null,[t("code",null,"telnet time.geekbang.org 80\n")])],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/telnet.bce7ac14.png",alt:"image.png"}),s(" 请求部分第一行称作 request line，包括请求的方法、路径、协议、协议版本， 响应部分第一行称作 response line，包括协议、版本、状态码、状态文本， 随后的由一个空行（两个换行符）分割的两部分，是请求/响应头和请求/响应体 "),t("img",{src:"/Jarrett-blog/assets/http-structure.4e043dde.jpeg",alt:""})],-1),t("h6",{id:"http-头"},[t("a",{class:"header-anchor",href:"#http-头","aria-hidden":"true"},"#"),s(" HTTP 头")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/http-head-request.78847751.png",alt:""})],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/http-head-response.6858905e.png",alt:""})],-1),t("h6",{id:"http-体"},[t("a",{class:"header-anchor",href:"#http-体","aria-hidden":"true"},"#"),s(" HTTP 体")],-1),t("p",null,"常见的 body 格式：",-1),t("ul",null,[t("li",null,"application/json"),t("li",null,"application/x-www-form-urlencoded"),t("li",null,"multipart/form-data"),t("li",null,"text/xml")],-1),t("p",null,"这是一种媒体类型标准（MIME），表示文档、文件、字节流的性质和格式 结构是 type/subtype，type 表示可以被分为多个子类的独立类别，subtype 表示细分的类型",-1),t("blockquote",null,[t("p",null,"浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理 URL，因此 Web 服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会曲解文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。")],-1),t("p",null,[t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"},"MIME 类型")],-1),t("h6",{id:"https"},[t("a",{class:"header-anchor",href:"#https","aria-hidden":"true"},"#"),s(" HTTPS")],-1),t("p",null,"作用：",-1),t("ol",null,[t("li",null,"确定请求的目标服务端身份"),t("li",null,[s("保证传输的数据不被网络中间节点窃听或者篡改 "),t("blockquote",null,[t("p",null,"HTTPS 首先与服务端简历一条加密通道 TLS，TLS 基于 TCP")])])],-1),t("h6",{id:"http2"},[t("a",{class:"header-anchor",href:"#http2","aria-hidden":"true"},"#"),s(" HTTP2")],-1),t("p",null,"是 HTTP1.1 的升级版本",-1),t("ol",null,[t("li",null,"支持服务端推送。服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。"),t("li",null,"支持 TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输窗口小的问题。")],-1),t("h5",{id:"服务器处理请求"},[t("a",{class:"header-anchor",href:"#服务器处理请求","aria-hidden":"true"},"#"),s(" 服务器处理请求")],-1),t("p",null,[s("服务器端收到请求后由 web 服务器处理请求， 如 apache、ngnix 等，解析用户请求后知道了需要调度哪些资源文件 再通过这些资源文件处理用户请求和参数，最后将结果通过 web 服务器返回给浏览器 "),t("img",{src:"/Jarrett-blog/assets/server-handle-request.24513f5e.png",alt:"image.png"}),s(" 响应也是报文，响应结果中会有一个 HTTP 状态码，代表对应的错误的信息。如 200 代表请求成功且处理完毕 假如返回 301 或者 302，说明服务器需要浏览器重定向到其他 URL，这时网络进程会从响应头的 Location 字段读取重定向地址，然后再发起新的请求 跳转之后，浏览器会根据 HTTP 请求头中的 Content-Type 的值来决定显示响应体的内容 这时，如果设置错了 mime 类型，浏览器可能会曲解内容")],-1),t("h5",{id:"关闭-tcp-链接"},[t("a",{class:"header-anchor",href:"#关闭-tcp-链接","aria-hidden":"true"},"#"),s(" 关闭 TCP 链接")],-1),t("p",null,[s("当双方没有请求或响应传递时，任意一方都可以发起关闭请求，需要 4 次挥手 "),t("img",{src:"/Jarrett-blog/assets/close-tcp.6e053614.png",alt:"image.png"}),s(" 至此，资源获取完毕，开始渲染啦")],-1),t("hr",null,null,-1),t("h3",{id:"渲染主线程"},[t("a",{class:"header-anchor",href:"#渲染主线程","aria-hidden":"true"},"#"),s(" 渲染主线程")],-1),t("h4",{id:"渲染进程准备阶段"},[t("a",{class:"header-anchor",href:"#渲染进程准备阶段","aria-hidden":"true"},"#"),s(" 渲染进程准备阶段")],-1),t("p",null,[s("Chrome 为每个页面分配一个渲染进程，但如果是 "),t("strong",null,[s("根域名（"),t("a",{href:"http://xxx.com",target:"_blank",rel:"noopener noreferrer"},"xxx.com"),s("）和协议")]),s("  相同的同一站点，新页面会复用父页面的渲染进程，官方称这种策略为 process-per-site-instance 比如")],-1),t("ul",null,[t("li",null,[t("a",{href:"https://time.xxx.com",target:"_blank",rel:"noopener noreferrer"},"https://time.xxx.com")]),t("li",null,[t("a",{href:"https://www.xxx.com",target:"_blank",rel:"noopener noreferrer"},"https://www.xxx.com")]),t("li",null,[t("a",{href:"https://www.xxx.com:8080",target:"_blank",rel:"noopener noreferrer"},"https://www.xxx.com:8080")])],-1),t("p",null,[t("a",{href:"https://juejin.cn/post/6855129007424602120",target:"_blank",rel:"noopener noreferrer"},"URL 初探"),s(" 此时还不能进入文档解析状态，数据还在网络进程中")],-1),t("h4",{id:"提交文档阶段"},[t("a",{class:"header-anchor",href:"#提交文档阶段","aria-hidden":"true"},"#"),s(" 提交文档阶段")],-1),t("ul",null,[t("li",null,"浏览器进程接收到网络进程的响应数据，向渲染进程发起“提交文档“的消息"),t("li",null,"渲染进程与网络进程建立传输数据的管道"),t("li",null,"数据传输完成，渲染进程返回“确认提交”信息给浏览器进程"),t("li",null,[s("浏览器进程收到“确认提交”消息，更新浏览器洁面状态，包括安全状态、地址栏 URL、前进后退的历史状态，然后更新 web 页面，此时进入渲染阶段 "),t("blockquote",null,[t("p",null,"因此我们输入一个地址并回车后，页面并没有马上消息，要等一会儿才更新页面")])])],-1),t("h4",{id:"解析-html"},[t("a",{class:"header-anchor",href:"#解析-html","aria-hidden":"true"},"#"),s(" 解析 HTML")],-1),t("h5",{id:"词法分析"},[t("a",{class:"header-anchor",href:"#词法分析","aria-hidden":"true"},"#"),s(" 词法分析")],-1),t("div",{class:"language-html"},[t("pre",null,[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("p")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("a"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("text text text"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("p")]),t("span",{class:"token punctuation"},">")]),s("\n")])])],-1),t("p",null,"以上 HTML 片段会被拆分成词（token）",-1),t("ul",null,[t("li",null,[t("code",null,"<p"),s("“标签”的开始；")]),t("li",null,[t("code",null,"class=“a”"),s(" 属性；")]),t("li",null,[t("code",null,">"),s(" “标签”的结束；")]),t("li",null,"text text text 文本；"),t("li",null,[t("code",null,"</p>"),s(" 标签结束。")])],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/html-token.9efaf3ce.png",alt:""}),s(" 把字符流解析成词的最常见方案是使用 "),t("strong",null,"状态机")],-1),t("h5",{id:"状态机"},[t("a",{class:"header-anchor",href:"#状态机","aria-hidden":"true"},"#"),s(" 状态机")],-1),t("p",null,"初始状态，区分“<”“非<” 出现“<”可以认为进入一个标签状态，“非<”可以认为进入一个文本节点 进入标签状态还需要区分：",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"下一个字符"),t("th",null,"分析")])]),t("tbody",null,[t("tr",null,[t("td",null,"!"),t("td",null,"注释节点或者 CDATA 节点")]),t("tr",null,[t("td",null,"/"),t("td",null,"结束标签")]),t("tr",null,[t("td",null,"字母"),t("td",null,"开始标签")])])],-1),t("h5",{id:"构建-dom-树"},[t("a",{class:"header-anchor",href:"#构建-dom-树","aria-hidden":"true"},"#"),s(" 构建 DOM 树")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/build-dom-tree.f592e03e.png",alt:"image.png"}),s(" 用 js 模拟 HTML 的语法分析器")],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[t("span",{class:"token comment"},"/*receiveInput负责接收词法部分产生的词\n接收的同时，构建DOM树，栈顶就是最后的根节点\ndom树的产出就是这个stack的第一项*/"),s("\n"),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token function"},"HTMLSyntaticalParser"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n  "),t("span",{class:"token keyword"},"let"),s(" stack "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token punctuation"},"["),t("span",{class:"token keyword"},"new"),s(),t("span",{class:"token class-name"},"HTMLDocument"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token keyword"},"this"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function-variable function"},"receiveInput"),s(),t("span",{class:"token operator"},"="),s(),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"token"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    "),t("span",{class:"token comment"},"/*\n        1. 栈顶元素就是当前节点；\n        2. 遇到属性，就添加到当前节点；\n        3. 遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；\n        4. 遇到注释节点，作为当前节点的子节点；\n        5. 遇到 tag start 就入栈一个节点，当前节点就是这个节点的父节点；\n        6. 遇到 tag end 就出栈一个节点（还可以检查是否匹配）。\n        */"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token keyword"},"this"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function-variable function"},"getOutput"),s(),t("span",{class:"token operator"},"="),s(),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    "),t("span",{class:"token keyword"},"return"),s(" stack"),t("span",{class:"token punctuation"},"["),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),s("\n"),t("span",{class:"token punctuation"},"}"),s("\n")])])],-1),t("blockquote",null,[t("p",null,"可通过在浏览器控制台输入“document”后回车查看 dom 树结构")],-1),t("h4",{id:"解析-css"},[t("a",{class:"header-anchor",href:"#解析-css","aria-hidden":"true"},"#"),s(" 解析 CSS")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/analysis-css-tree.9c6daf1b.png",alt:"image.png"}),s(" CSS 规则不是 DOM 结构建好了以后才添加样式的，而是依次拿到上一步构造好的元素，去检查匹配哪些规则再根据规则优先级进行覆盖和调整。不存在父选择器，选择器的出现顺序必定跟构建 DOM 树的顺序一致。")],-1),t("ul",null,[t("li",null,"空格: 后代，选中它的子节点和所有子节点的后代节点。"),t("li",null,[t("blockquote",null,[t("p",null,": 子代，选中它的子节点。")])]),t("li",null,"+：直接后继选择器，选中它的下一个相邻节点。"),t("li",null,"~：后继，选中它之后所有的相邻节点。"),t("li",null,"||：列，选中表格中的一列。")],-1),t("p",null,"规则匹配的时候，也是要根据节点信息处理",-1),t("blockquote",null,[t("p",null,"可通过在浏览器控制台输入 document.styleSheets 查看 css 代码生成的结构")],-1),t("p",null,[s("css 在被处理成 styleSheets 后，还要进行标准化，处理一些不被浏览器渲染引擎理解的属性值，例如： "),t("img",{src:"/Jarrett-blog/assets/css-standardization.c24da4cc.png",alt:"image.png"})],-1),t("h4",{id:"布局"},[t("a",{class:"header-anchor",href:"#布局","aria-hidden":"true"},"#"),s(" 布局")],-1),t("p",null,"有了 DOM 树和样式，还不足以显示页面，还需要给可见元素计算几何位置",-1),t("ol",null,[t("li",null,[t("p",null,"创建布局树 LayoutTree"),t("p",null,"构建一棵只包含可见元素的布局树。")]),t("li",null,[t("p",null,"布局计算"),t("pre",null,[t("code",null," 计算布局树节点的坐标位置，重新写回布局树中。\n")]),t("p",null,"浏览器的基本布局方案是正常流排版，在此基础上支持绝对定位元素和浮动元素")]),t("li",null,[t("p",null,"正常流布局：顺次排布、折行，支持元素和文字的混排")]),t("li",null,[t("p",null,"绝对定位元素：把自身抽离正常流，依靠 top、left 等确定位置，不参加布局计算，不影响其他元素")]),t("li",null,[t("p",null,"浮动元素：使自身处于正常流的左或者右的边界，占据一块空间")])],-1),t("p",null,"除此之外，还有 flex、grid 等布局方式",-1),t("h4",{id:"分层"},[t("a",{class:"header-anchor",href:"#分层","aria-hidden":"true"},"#"),s(" 分层")],-1),t("p",null,"针对复杂的 3d 变换、页面滚动、z 轴排序，渲染引擎需要为特定的节点生成专用的涂层，生成一棵 LayerTree 并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，就从属于父节点的图层",-1),t("blockquote",null,[t("p",null,"拥有层叠上下文属性的元素会被提升为单独的一层，裁剪的元素也会成为单独一层")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/layer-tree.72892127.png",alt:"image.png"})],-1),t("h4",{id:"图层绘制"},[t("a",{class:"header-anchor",href:"#图层绘制","aria-hidden":"true"},"#"),s(" 图层绘制")],-1),t("p",null,[s("渲染引擎将一个图层的绘制拆分成很多小的绘制指令，按顺序组成一个待绘制列表，在这个阶段我们获得一个待绘制列表 "),t("img",{src:"/Jarrett-blog/assets/coverage.ebf99a22.png",alt:"image.png"})],-1),t("h3",{id:"合成线程"},[t("a",{class:"header-anchor",href:"#合成线程","aria-hidden":"true"},"#"),s(" 合成线程")],-1),t("h4",{id:"栅格化操作"},[t("a",{class:"header-anchor",href:"#栅格化操作","aria-hidden":"true"},"#"),s(" 栅格化操作")],-1),t("p",null,[s("一个页面可能会很大，但是用户只能基于视口看到一部分，因此没有必要用巨大的开销去渲染整个页面。 于是乎，当绘制列表产出后，主线程把绘制列表提交给合成线程，合成线程会将图层划分为 "),t("strong",null,"图块（tile）"),s(" ，通常是 256x256 或者 512x512，合成线程会按照视口附近的图块优先生成位图， "),t("strong",null,"实际生成位图的操作是由栅格化执行，将图块转换为位图"),s(" 。 渲染进程维护一个栅格化的线程池，图块的栅格化都在线程池里执行 "),t("img",{src:"/Jarrett-blog/assets/composite-1.907aabda.png",alt:""}),s(" 栅格化会使用 gpu 来加速，称为快速栅格化，或 gpu 栅格化，生成的位图被保存在 gpu 内存中 "),t("img",{src:"/Jarrett-blog/assets/composite-2.6496b806.png",alt:""})],-1),t("h4",{id:"合成-compositing"},[t("a",{class:"header-anchor",href:"#合成-compositing","aria-hidden":"true"},"#"),s(" 合成 compositing")],-1),t("p",null,"合成线程收集图块信息（也叫绘制四边形 DrawQuad），然后进行合成帧操作，并将合成帧递交给主进程，最后浏览器主进程将合成帧发送给 GPU 进程，将页面内容绘制到内存中，最后将内存中的内容显示在屏幕上，变成肉眼可见的图像 浏览器有一个叫 viz 的组件，用来接收合成线程发来的 DrawQuad 命令，根据 DrawQuad 命令，将页面内容绘制到内存中，最后将内存显示在屏幕上，变成肉眼可见的图像",-1),t("h3",{id:"绘制的抽象理解"},[t("a",{class:"header-anchor",href:"#绘制的抽象理解","aria-hidden":"true"},"#"),s(" 绘制的抽象理解")],-1),t("p",null,"把每一个元素对应的盒变成位图，在内存中。把模型变为位图 可分为两类：图形和文字",-1),t("ul",null,[t("li",null,"图形：背景、边框、SVG 元素、阴影，需要底层库支持，Android 有 Skia，Windows 有 GDI"),t("li",null,[s("文字：分像素字形和矢量字形两种，小尺寸如 6px、8px 提供像素字形，大尺寸提供矢量字形。需要字体库支持，比如 C++编写的 Freetype，提供读取字体文件的基本能力，能够根据字符的码点抽取出字形 "),t("blockquote",null,[t("p",null,"渲染时，最普遍的情况是生成的位图尺寸跟它在上一步排版时占据的尺寸相同。 但是很多属性会影响位图的大小，比如阴影，因此阴影会作为一个独立的盒来处理")])])],-1),t("p",null,"渲染过程中，子元素是不会被绘制到渲染的位图上的，这样能够在父子元素的相对位置发生变化时，保证渲染的结果能够最大程度被缓存，减少重新渲染。 绘制过程，不会把子元素渲染到位图，合成正是为了创建合成的位图，把部分子元素渲染到合成的位图上",-1),t("h5",{id:"合成策略"},[t("a",{class:"header-anchor",href:"#合成策略","aria-hidden":"true"},"#"),s(" 合成策略")],-1),t("div",{class:"language-html"},[t("pre",null,[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("a"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("b"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("..."),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("c"),t("span",{class:"token punctuation"},'"')]),s(),t("span",{class:"token special-attr"},[t("span",{class:"token attr-name"},"style"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),t("span",{class:"token value css language-css"},[t("span",{class:"token property"},"transform"),t("span",{class:"token punctuation"},":"),t("span",{class:"token function"},"translate"),t("span",{class:"token punctuation"},"("),s("0"),t("span",{class:"token punctuation"},","),s("0"),t("span",{class:"token punctuation"},")")]),t("span",{class:"token punctuation"},'"')])]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n")])])],-1),t("p",null,[s("猜测可能变化的元素，排除到合成之外，从而提高性能 假设以上代码要对 c 元素进行改变，此时如果合成 a 和 b，不合成 c，就能减少绘制次数，产生极大的性能收益 目前，合成策略根据 position、transform 等属性来决定，但是新的 css 标准给出了 will-change 属性，可以结合业务代码提示浏览器的合成策略。 "),t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change",target:"_blank",rel:"noopener noreferrer"},"will-change mdn")],-1),t("h5",{id:"显示"},[t("a",{class:"header-anchor",href:"#显示","aria-hidden":"true"},"#"),s(" 显示")],-1),t("p",null,"浏览器会把最终要显示的位图交给操作系统处理 借助脏矩形算法，当鼠标移、元素移动或者其他需要导致重绘的场景发生时，只重新绘制它所影响到的几个矩形区域，重绘脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。",-1),t("p",null,"参考：",-1),t("ul",null,[t("li",null,[t("a",{href:"https://www.xuecaijie.com/it/157.html#1Q64p5DeC8dKFF",target:"_blank",rel:"noopener noreferrer"},"输入一个 url 后会发生什么")]),t("li",null,[t("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/Performance/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},"渲染页面-mdn")]),t("li",null,[t("a",{href:"https://juejin.im/post/6844903565610188807",target:"_blank",rel:"noopener noreferrer"},"浏览器渲染")]),t("li",null,"重学前端-模块三：浏览器实现原理与 API"),t("li",null,"浏览器工作原理与实践-李兵")],-1),t("h3",{id:"关于浏览器工作流程的思维导图、ppt"},[t("a",{class:"header-anchor",href:"#关于浏览器工作流程的思维导图、ppt","aria-hidden":"true"},"#"),s(" 关于浏览器工作流程的思维导图、ppt")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/browser-work-flow.534e9710.jpeg",alt:"WechatIMG3.jpeg"})],-1),t("ul",null,[t("li",null,[t("a",{href:"https://www.yuque.com/attachments/yuque/0/2021/pdf/2165937/1615090982321-6b025e49-2013-4598-88be-128b5c64b02f.pdf?_lake_card=%7B%22uid%22%3A%221615090980076-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fpdf%2F2165937%2F1615090982321-6b025e49-2013-4598-88be-128b5c64b02f.pdf%22%2C%22name%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.pdf%22%2C%22size%22%3A1251962%2C%22type%22%3A%22application%2Fpdf%22%2C%22ext%22%3A%22pdf%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22T0io8%22%2C%22card%22%3A%22file%22%7D",target:"_blank",rel:"noopener noreferrer"},"浏览器架构.pdf")]),t("li",null,[t("a",{href:"https://www.yuque.com/attachments/yuque/0/2021/ppt/2165937/1615091175679-2de9ca82-8e8e-49a6-b0f7-9b01133007de.ppt?_lake_card=%7B%22uid%22%3A%221615091087164-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fppt%2F2165937%2F1615091175679-2de9ca82-8e8e-49a6-b0f7-9b01133007de.ppt%22%2C%22name%22%3A%22%E6%B5%85%E6%9E%90%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.ppt%22%2C%22size%22%3A2186240%2C%22type%22%3A%22application%2Fvnd.ms-powerpoint%22%2C%22ext%22%3A%22ppt%22%2C%22progress%22%3A%7B%22percent%22%3A99%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%2296aUu%22%2C%22card%22%3A%22file%22%7D",target:"_blank",rel:"noopener noreferrer"},"浅析浏览器渲染原理.ppt")])],-1),t("h2",{id:"浏览器-window-对象"},[t("a",{class:"header-anchor",href:"#浏览器-window-对象","aria-hidden":"true"},"#"),s(" 浏览器 window 对象")],-1),t("p",null,[s("所谓的 "),t("strong",null,"BOM（Browser Object Model）浏览器对象模型"),s(" ，是为了控制浏览器的行为而出现的接口。 "),t("img",{src:"/Jarrett-blog/assets/window.2fa984c5.png",alt:"image.png"}),s(" 属于 BOM 区域的有浏览器标签页、地址栏、滚动条、右键菜单等等 BOM 的 "),t("strong",null,"核心对象"),s(" 是 "),t("strong",null,"Window"),s(" ，包含了 DOM 的核心对象 document window 不仅是全局作用域，还表示浏览器窗口 常用的 BOM API：")],-1),t("ul",null,[t("li",null,[t("code",null,"innerWidth"),s(" "),t("code",null,"innerHeight"),s("  可以获取浏览器窗口内部去除掉菜单栏、工具栏、边框等后的宽高，")]),t("li",null,[t("code",null,"outerWidth"),s(" "),t("code",null,"outerHeight"),s("  获取浏览器窗口的整个宽高")]),t("li",null,[t("code",null,"navigator"),s("  表示浏览器的信息")])],-1),t("p",null,[t("code",null,"navigator.appName"),s("：浏览器名称； "),t("code",null,"navigator.appVersion"),s("：浏览器版本； "),t("code",null,"navigator.language"),s("：浏览器设置的语言； "),t("code",null,"navigator.platform"),s("：操作系统类型； "),t("code",null,"navigator.userAgent"),s("：浏览器设定的"),t("code",null,"User-Agent"),s("字符串。 但是 navigator 的信息很容易可以修改，所以不一定是正确的，不要用这个去判断浏览器版本 正确做法是直接用||短路运算符")],-1),t("ul",null,[t("li",null,[t("code",null,"screen"),s("表示屏幕信息，常用属性有")])],-1),t("p",null,[t("code",null,"screen.width"),s("：屏幕宽度，以像素为单位； "),t("code",null,"screen.height"),s("：屏幕高度，以像素为单位； "),t("code",null,"screen.colorDepth"),s("：返回颜色位数，如 8、16、24。")],-1),t("ul",null,[t("li",null,[t("code",null,"location"),s("  对象表示当前页面的 url 信息")])],-1),t("div",{class:"language-http"},[t("pre",null,[t("code",null,[t("span",{class:"token header-name keyword"},"http:"),s("//www.example.com:8080/path/index.html?a=1&b=2#TOP\n")])])],-1),t("p",null,[s("可以用"),t("code",null,"location.href"),s("获取完整的 url。要获得 URL 各个部分的值，可以这么写：")],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[s("location"),t("span",{class:"token punctuation"},"."),s("protocol"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// 'http'"),s("\nlocation"),t("span",{class:"token punctuation"},"."),s("host"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// 'www.example.com'"),s("\nlocation"),t("span",{class:"token punctuation"},"."),s("port"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// '8080'"),s("\nlocation"),t("span",{class:"token punctuation"},"."),s("Javapathname"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// '/path/index.html'"),s("\nlocation"),t("span",{class:"token punctuation"},"."),s("search"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// '?a=1&b=2'"),s("\nlocation"),t("span",{class:"token punctuation"},"."),s("hash"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"// 'TOP'"),s("\n")])])],-1),t("p",null,[t("code",null,"location.assign()"),s("加载一个新页面，"),t("code",null,"location.reload()"),s("重新加载当前页面 "),t("strong",null,"参考")],-1),t("ul",null,[t("li",null,[t("a",{href:"https://juejin.cn/post/6844903939008102413",target:"_blank",rel:"noopener noreferrer"},"DOM 和 BOM")])],-1),t("h2",{id:"document-文档对象"},[t("a",{class:"header-anchor",href:"#document-文档对象","aria-hidden":"true"},"#"),s(" document 文档对象")],-1),t("p",null,[s("表示当前页面，"),t("code",null,"document"),s("对象是整个 dom 树的根节点 常用方法： "),t("code",null,"document.title"),s("获取 title 标签属性 "),t("code",null,"getElementById()"),t("code",null,"getElementsByTagName()"),t("code",null,"document.querySelector()"),t("code",null,"document.addEventListener()"),t("code",null,"document.cookie"),s("获取当前页面的 Cookie，cookie 由服务器发送的 key-value 标识符，可用于区分不同用户的请求，服务器发送一个 cookie 给浏览器，浏览器访问该网站就会在请求头上附上这个 cookie。但是有安全隐患，因为 html 可以直接引用第三方的 js 代码，解决这个问题需要服务器设置 cookie 时使用 httponly")],-1),t("h2",{id:"dom-事件和事件委托"},[t("a",{class:"header-anchor",href:"#dom-事件和事件委托","aria-hidden":"true"},"#"),s(" DOM 事件和事件委托")],-1),t("h3",{id:"dom-事件模型"},[t("a",{class:"header-anchor",href:"#dom-事件模型","aria-hidden":"true"},"#"),s(" DOM 事件模型")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/event-delegation.808d3538.png",alt:""}),s(" DOM 模型用一个逻辑树来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM 的方法(methods)让你可以用特定方式操作这个树，用这些方法你可以改变文档的结构、样式或者内容。节点可以关联上事件处理器，一旦某一事件被触发了，那些事件处理器就会被执行。")],-1),t("h3",{id:"捕获和冒泡："},[t("a",{class:"header-anchor",href:"#捕获和冒泡：","aria-hidden":"true"},"#"),s(" 捕获和冒泡：")],-1),t("p",null,"Netscape 认为 outer 上的处理函数应该先被执行. 这被称作 event capturing，即从外到内",-1),t("p",null,"IE 则认为 inner 上的处理函数具有执行优先权. 这被叫做 event bubbling，即从内到外",-1),t("p",null,"于是 W3C 标准则取其折中方案. W3C 事件模型中发生的任何事件, 先(从其祖先元素 document)开始一路向下捕获, 直到达到目标元素, 其后再次从目标元素开始冒泡.(先捕获再冒泡，搞清楚这一点很重要）",-1),t("p",null,"开发者可以决定事件处理器是注册在捕获或者是冒泡阶段. 如果 addEventListener 的最后一个参数是 true, 那么处理函数将在捕获阶段被触发; 否则(false), 会在冒泡阶段被触发.",-1),t("p",null,[t("strong",null,"也就是每点击一个元素，以点击的元素为中心，先捕获，再冒泡，false 或者不加参数表示注册在冒泡阶段执行，true 表示注册在捕获阶段执行")],-1),t("p",null,"示例：",-1),t("div",{class:"language-html"},[t("pre",null,[t("code",null,[t("span",{class:"token doctype"},[t("span",{class:"token punctuation"},"<!"),t("span",{class:"token doctype-tag"},"DOCTYPE"),s(),t("span",{class:"token name"},"html"),t("span",{class:"token punctuation"},">")]),s("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("html")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("head")]),t("span",{class:"token punctuation"},">")]),s("\n    "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("meta")]),s(),t("span",{class:"token attr-name"},"charset"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("utf-8"),t("span",{class:"token punctuation"},'"')]),s(),t("span",{class:"token punctuation"},"/>")]),s("\n    "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("title")]),t("span",{class:"token punctuation"},">")]),s("JS Bin"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("title")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("head")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("body")]),t("span",{class:"token punctuation"},">")]),s("\n    "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("grand1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("\n      爷爷\n      "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("parent1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("\n        爸爸\n        "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("child1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("儿子"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n      "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n    "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("body")]),t("span",{class:"token punctuation"},">")]),s("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("html")]),t("span",{class:"token punctuation"},">")]),s("\n")])])],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[s("grand1"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("\n  "),t("span",{class:"token string"},"'click'"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token function"},"f1"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'爷爷'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token boolean"},"false"),s("\n"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//冒泡"),s("\n\nparent1"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("\n  "),t("span",{class:"token string"},"'click'"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token function"},"f1"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'爸爸'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token boolean"},"true"),s("\n"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//捕获"),s("\n\nchild1"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("\n  "),t("span",{class:"token string"},"'click'"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token function"},"f3"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'儿子冒泡'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token boolean"},"false"),s("\n"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//冒泡"),s("\n\nchild1"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("\n  "),t("span",{class:"token string"},"'click'"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token function"},"f3"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'儿子捕获'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n  "),t("span",{class:"token boolean"},"true"),s("\n"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//捕获"),s("\n")])])],-1),t("p",null,"结果依次为：",-1),t("ol",null,[t("li",null,[s("点击儿子 "),t("img",{src:"/Jarrett-blog/assets/click-son.5a42686a.png",alt:""})]),t("li",null,[s("点击爸爸 "),t("img",{src:"/Jarrett-blog/assets/click-dad.3c31eae5.png",alt:""})]),t("li",null,[s("点击爷爷 "),t("img",{src:"/Jarrett-blog/assets/click-grandpa.958407a0.png",alt:""})])],-1),t("h3",{id:"事件委托"},[t("a",{class:"header-anchor",href:"#事件委托","aria-hidden":"true"},"#"),s(" 事件委托")],-1),t("p",null,"事件委托，通俗地来讲，就是把一个元素响应事件（click、keydown......）的函数委托到另一个元素,好处是节省了内存还能够动态监听元素",-1),t("p",null,"一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。",-1),t("p",null,"示例：",-1),t("div",{class:"language-html"},[t("pre",null,[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("test"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("red"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("hi"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("red"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("hi"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("red"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("hi"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("red"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("hi"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),s("div")]),s(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),s("red"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),s("hi"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),s("div")]),t("span",{class:"token punctuation"},">")]),s("\n")])])],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[s("\n "),t("span",{class:"token function"},"delegateEvent"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[s("parentSelector"),t("span",{class:"token punctuation"},","),s(" targetSelector"),t("span",{class:"token punctuation"},","),s(" events"),t("span",{class:"token punctuation"},","),s(" fn")]),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n        "),t("span",{class:"token comment"},"// 事件处理逻辑,"),s("\n        parentSelector"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("parentSelector"),t("span",{class:"token punctuation"},","),s(" events"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"e"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n\n            "),t("span",{class:"token keyword"},"let"),s(" targetEl "),t("span",{class:"token operator"},"="),s(" e"),t("span",{class:"token punctuation"},"."),s("target\n            "),t("span",{class:"token keyword"},"const"),s(" currentTarget "),t("span",{class:"token operator"},"="),s(" e"),t("span",{class:"token punctuation"},"."),s("currentTarget"),t("span",{class:"token punctuation"},";"),s("\n\n            "),t("span",{class:"token comment"},"// 遍历并判断是否为目标元素，如果不是，则往元素的 parentNode 继续查找"),s("\n            "),t("span",{class:"token keyword"},"while"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"!"),s("targetEl"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"matches"),t("span",{class:"token punctuation"},"("),s("targetSelector"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n                "),t("span",{class:"token comment"},"// 如果是目标元素则跳出循环"),s("\n                "),t("span",{class:"token keyword"},"if"),s(),t("span",{class:"token punctuation"},"("),s("targetEl "),t("span",{class:"token operator"},"==="),s(" currentTarget"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n                    targetEl "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},";"),s("\n                    "),t("span",{class:"token keyword"},"break"),t("span",{class:"token punctuation"},";"),s("\n                "),t("span",{class:"token punctuation"},"}"),s("\n                targetEl "),t("span",{class:"token operator"},"="),s(" targetEl"),t("span",{class:"token punctuation"},"."),s("parentNode"),t("span",{class:"token punctuation"},";"),s("\n            "),t("span",{class:"token punctuation"},"}"),s("\n\n            "),t("span",{class:"token keyword"},"if"),s(),t("span",{class:"token punctuation"},"("),s("targetEl"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n                "),t("span",{class:"token comment"},"// 将回调函数的 this 指向目标元素"),s("\n                "),t("span",{class:"token function"},"fn"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"call"),t("span",{class:"token punctuation"},"("),s("targetEl"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token class-name"},"Array"),t("span",{class:"token punctuation"},"."),s("prototype"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"slice"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"call"),t("span",{class:"token punctuation"},"("),s("arguments"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n            "),t("span",{class:"token punctuation"},"}"),s("\n        "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n\n    "),t("span",{class:"token punctuation"},"}"),s("\n")])])],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),s(" test "),t("span",{class:"token operator"},"="),s(" document"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"querySelector"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'#test'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\ndom"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"delegateEvent"),t("span",{class:"token punctuation"},"("),s("test"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token string"},"'#test .red'"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token string"},"'click'"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token operator"},"=>"),s(),t("span",{class:"token punctuation"},"{"),s("\n  console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'我被点击了'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n")])])],-1),t("hr",null,null,-1),t("h2",{id:"history-对象"},[t("a",{class:"header-anchor",href:"#history-对象","aria-hidden":"true"},"#"),s(" history 对象")],-1),t("p",null,[t("code",null,"window.history"),s(" ，保存了浏览器的历史记录，js 可以调用 history 对象的 back() or forward()，相当于点击浏览器的后退和前进，这个在现代 web 复杂的页面交互中是不适用的")],-1),t("h2",{id:"浏览器兼容性问题"},[t("a",{class:"header-anchor",href:"#浏览器兼容性问题","aria-hidden":"true"},"#"),s(" 浏览器兼容性问题")],-1),t("h3",{id:"样式兼容性"},[t("a",{class:"header-anchor",href:"#样式兼容性","aria-hidden":"true"},"#"),s(" 样式兼容性")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/style-compatibility.9073ef16.png",alt:"image.png"})],-1),t("ol",null,[t("li",null,[t("p",null,"使用 Normalize.css 或是自己撰写 reset 重置样式")]),t("li",null,[t("p",null,"不同浏览器厂商对于 css3 的样式提供了针对浏览器的前缀"),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"内核"),t("th",null,"浏览器代表"),t("th",null,"前缀")])]),t("tbody",null,[t("tr",null,[t("td",null,"Trident"),t("td",null,"IE"),t("td",null,"-ms")]),t("tr",null,[t("td",null,"Gecko"),t("td",null,"Firefox"),t("td",null,"-moz")]),t("tr",null,[t("td",null,"Presto 已废弃"),t("td",null,"Opera 前内核"),t("td",null,"-o")]),t("tr",null,[t("td",null,"Webkit"),t("td",null,"Chrome、Safari"),t("td",null,"-webkit")])])])]),t("li",null,[t("p",null,"opacity")])],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[s("opacity"),t("span",{class:"token operator"},":"),s(),t("span",{class:"token number"},"0.5"),t("span",{class:"token punctuation"},";"),s("\nfilter"),t("span",{class:"token operator"},":"),s(),t("span",{class:"token function"},"alpha"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),s("opacity "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token number"},"50"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//IE6-IE8我们习惯使用filter滤镜属性来进行实现"),s("\nfilter"),t("span",{class:"token operator"},":"),s(" progid"),t("span",{class:"token operator"},":"),s(" DXImageTransform"),t("span",{class:"token punctuation"},"."),s("Microsoft"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"Alpha"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),s("style "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token punctuation"},"("),s("opacity "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token number"},"50"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s(),t("span",{class:"token comment"},"//IE4-IE9都支持滤镜写法progid:DXImageTransform.Microsoft.Alpha(Opacity=xx)"),s("\n")])])],-1),t("h3",{id:"交互兼容性"},[t("a",{class:"header-anchor",href:"#交互兼容性","aria-hidden":"true"},"#"),s(" 交互兼容性")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/ninteraction-compatibility.f069f462.png",alt:"image.png"}),s(" 事件兼容： 适配器写法")],-1),t("div",{class:"language-javascript"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"var"),s(" helper "),t("span",{class:"token operator"},"="),s(),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),s("\n\n"),t("span",{class:"token comment"},"//绑定事件"),s("\nhelper"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function-variable function"},"on"),s(),t("span",{class:"token operator"},"="),s(),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[s("target"),t("span",{class:"token punctuation"},","),s(" type"),t("span",{class:"token punctuation"},","),s(" handler")]),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n  "),t("span",{class:"token keyword"},"if"),s(),t("span",{class:"token punctuation"},"("),s("target"),t("span",{class:"token punctuation"},"."),s("addEventListener"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),s("type"),t("span",{class:"token punctuation"},","),s(" handler"),t("span",{class:"token punctuation"},","),s(),t("span",{class:"token boolean"},"false"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),s(),t("span",{class:"token keyword"},"else"),s(),t("span",{class:"token punctuation"},"{"),s("\n    target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"attachEvent"),t("span",{class:"token punctuation"},"("),s("\n      "),t("span",{class:"token string"},"'on'"),s(),t("span",{class:"token operator"},"+"),s(" type"),t("span",{class:"token punctuation"},","),s("\n      "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"event"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n        "),t("span",{class:"token keyword"},"return"),s(),t("span",{class:"token function"},"handler"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"call"),t("span",{class:"token punctuation"},"("),s("target"),t("span",{class:"token punctuation"},","),s(" event"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n      "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n      "),t("span",{class:"token boolean"},"false"),s("\n    "),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),s("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),s("\n\n"),t("span",{class:"token comment"},"//取消事件监听"),s("\nhelper"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function-variable function"},"remove"),s(),t("span",{class:"token operator"},"="),s(),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[s("target"),t("span",{class:"token punctuation"},","),s(" type"),t("span",{class:"token punctuation"},","),s(" handler")]),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n  "),t("span",{class:"token keyword"},"if"),s(),t("span",{class:"token punctuation"},"("),s("target"),t("span",{class:"token punctuation"},"."),s("removeEventListener"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n    target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"removeEventListener"),t("span",{class:"token punctuation"},"("),s("type"),t("span",{class:"token punctuation"},","),s(" handler"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),s(),t("span",{class:"token keyword"},"else"),s(),t("span",{class:"token punctuation"},"{"),s("\n    target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"detachEvent"),t("span",{class:"token punctuation"},"("),s("\n      "),t("span",{class:"token string"},"'on'"),s(),t("span",{class:"token operator"},"+"),s(" type"),t("span",{class:"token punctuation"},","),s("\n      "),t("span",{class:"token keyword"},"function"),s(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"event"),t("span",{class:"token punctuation"},")"),s(),t("span",{class:"token punctuation"},"{"),s("\n        "),t("span",{class:"token keyword"},"return"),s(),t("span",{class:"token function"},"handler"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"call"),t("span",{class:"token punctuation"},"("),s("target"),t("span",{class:"token punctuation"},","),s(" event"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n      "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),s("\n      "),t("span",{class:"token boolean"},"true"),s("\n    "),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),s("\n  "),t("span",{class:"token punctuation"},"}"),s("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),s("\n")])])],-1),t("h3",{id:"浏览器-hack"},[t("a",{class:"header-anchor",href:"#浏览器-hack","aria-hidden":"true"},"#"),s(" 浏览器 hack")],-1),t("p",null,[t("img",{src:"/Jarrett-blog/assets/browser-hack.c8a16875.png",alt:"image.png"}),s(" 不同厂商的浏览器或者同一浏览器的不同版本都可能存在对 css、js 的支持、解析不一样，为了获得统一的效果，就要针对不同的浏览器或不同版本写特定的 css 或 js 有 css hack 和 js hack 发现一个便于查询的网站"),t("a",{href:"https://www.html.cn/tool/hack/",target:"_blank",rel:"noopener noreferrer"},"https://www.html.cn/tool/hack/"),s(" 但是需要注意 hack 并不总是完美的解决方案，大多数情况下应该修复 css/js 可以使用"),t("a",{href:"https://modernizr.com/",target:"_blank",rel:"noopener noreferrer"},"modernizr"),s("库进行功能检测，还有中文网"),t("a",{href:"http://modernizr.cn",target:"_blank",rel:"noopener noreferrer"},"modernizr")],-1)];l.render=function(t,s,e,l,c,u){return n(),a("div",null,o)};export{e as __pageData,l as default};
