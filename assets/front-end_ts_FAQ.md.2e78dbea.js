import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.20c98a65.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/ts/FAQ.md","filePath":"front-end/ts/FAQ.md","lastUpdated":1698481091000}'),p={name:"front-end/ts/FAQ.md"},o=l(`<ol><li>实现以下类型（尽量使用 util type）:</li></ol><ul><li>一类对象, 它的 value 值为 string 或者 number</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 解答</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">union</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> </span><span style="color:#859900;">|</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Obj</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  [key</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">union</span><span style="color:#839496;">]</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">union</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 或者</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Obj1</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Record</span><span style="color:#839496;">&lt;</span><span style="color:#859900;">any</span><span style="color:#839496;">, </span><span style="color:#CB4B16;">union</span><span style="color:#839496;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>已知 interface T1, T2, 求类型 T3, 要求 T3 拥有 T1 和 T2 的所有属性, 对应 value 的类型也和 T1,T2 一样</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 解答</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T1</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  name</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T2</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  age</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T3</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Omit</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T1</span><span style="color:#839496;">, </span><span style="color:#859900;">keyof</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T2</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">&amp;</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T2</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// 如果直接使用交叉类型，会使同名属性为 nerver</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol><li>求 ItemWithoutType, 要求能正确反映函数 omitType 的返回类型（尽量使用 util type）</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Item</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  type</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  value</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">any</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 解答</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">ItemWithoutType</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Omit</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">Item</span><span style="color:#839496;">, </span><span style="color:#2AA198;">&#39;type&#39;</span><span style="color:#839496;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">omitType</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Item</span><span style="color:#839496;">&gt;(obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;">)</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">ItemWithoutType</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> { </span><span style="color:#859900;">...</span><span style="color:#268BD2;">obj</span><span style="color:#839496;"> };</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">delete</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">.</span><span style="color:#268BD2;">type</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">result</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="3"><li>已知函数 getAPlusB, 用 ts 限制它的入参, 使它总能符合我们的预期(返回数字)</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">PlusObj</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  [key</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">]</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">any</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  a</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  b</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">getAPlusB</span><span style="color:#839496;">(obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">PlusObj</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">obj</span><span style="color:#839496;">.</span><span style="color:#268BD2;">a</span><span style="color:#839496;"> </span><span style="color:#859900;">+</span><span style="color:#839496;"> </span><span style="color:#268BD2;">obj</span><span style="color:#839496;">.</span><span style="color:#268BD2;">b</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="4"><li>考虑在工作中你碰到这样的场景: <code>IFoo</code> 来自于一个依赖库, 随着升级它可能会不断增加新的属性, 请实现 interface <code>IFooMapping</code>, 要求: 对于 <code>IFoo</code> 所有的 key, 都满足 <code>IFooMapping[key]</code> 的类型是返回为 <code>IFoo[key]</code> 的函数。 比如 <code>IFoo[&#39;a&#39;]</code> 为 <code>string</code>, 则 <code>IFooMapping[&#39;a&#39;]</code> 为返回类型为 <code>string</code> 的函数(如能使用泛型实现更好)</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFoo</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  a</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  b</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// 解答</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFooMapping</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  [</span><span style="color:#CB4B16;">K</span><span style="color:#839496;"> </span><span style="color:#859900;">in</span><span style="color:#839496;"> </span><span style="color:#859900;">keyof</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;">]</span><span style="color:#859900;">:</span><span style="color:#839496;"> () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;">[</span><span style="color:#CB4B16;">K</span><span style="color:#839496;">];</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol><li>请写出 event 的类型</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 答案</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Foo</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> (event</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">MouseEvent</span><span style="color:#839496;">) </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#859900;">void</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Foo</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> event </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#839496;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#268BD2;">window</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addEventListener</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;click&#39;</span><span style="color:#839496;">, </span><span style="color:#268BD2;">foo</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>请实现这样的泛型: 当 T 的 type 属性类型为 string 时, 得到 <code>{ obj: T }</code> , 否则得到 <code>null</code></li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 答案</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFoo</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> { obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> } </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">null</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * extends 继承关键字</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 复杂类型对象，子只需包含父的属性，即符合继承关系</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 文档上的例子说明https://www.typescriptlang.org/docs/handbook/2/generics.html#generic-constraints</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 简单类型，ts允许使用extends关键字对类型做判断，不是严格意义上的继承</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * String类允许被继承，继承的是一系列的String类的属性和方法</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * 其他语言比如java，String类，被final修饰符修饰，是不可被继承和改变的</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Bar</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> { name</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> } </span><span style="color:#859900;">?</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">bar1</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Bar</span><span style="color:#839496;">&lt;{ name</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">; age</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;"> }&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;张三&#39;</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// 包含父中的属性即合法</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">bar2</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Bar</span><span style="color:#839496;">&lt;{ age</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;"> }&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;张三&#39;</span><span style="color:#839496;">; </span><span style="color:#586E75;font-style:italic;">// 不能将类型“string”分配给类型“number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFoo</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> { obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> } </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo1</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFoo</span><span style="color:#839496;">&lt;</span><span style="color:#859900;">string</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> { obj: </span><span style="color:#2AA198;">&#39;123&#39;</span><span style="color:#839496;"> }; </span><span style="color:#586E75;font-style:italic;">// ok</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo2</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFoo</span><span style="color:#839496;">&lt;</span><span style="color:#2AA198;">&#39;str&#39;</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> { obj: </span><span style="color:#2AA198;">&#39;123&#39;</span><span style="color:#839496;"> }; </span><span style="color:#586E75;font-style:italic;">// 不能将类型“&quot;123&quot;”分配给类型“&quot;str&quot;”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">// string 是类型，String是类</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFooStringObj</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">T</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">String</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#839496;"> { obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">T</span><span style="color:#839496;"> } </span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">null</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo3</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFooStringObj</span><span style="color:#839496;">&lt;</span><span style="color:#2AA198;">&#39;123&#39;</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> { obj: </span><span style="color:#2AA198;">&#39;123&#39;</span><span style="color:#839496;"> }; </span><span style="color:#586E75;font-style:italic;">// ok</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo4</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">IFooStringObj</span><span style="color:#839496;">&lt;</span><span style="color:#859900;">string</span><span style="color:#839496;">&gt; </span><span style="color:#859900;">=</span><span style="color:#839496;"> { obj: </span><span style="color:#2AA198;">&#39;123&#39;</span><span style="color:#839496;"> }; </span><span style="color:#586E75;font-style:italic;">// ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">FakeString</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#6C71C4;">String</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  a</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">} </span><span style="color:#586E75;font-style:italic;">// 报错，缺少一系列String的方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">type</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">FakeString2</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">123</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> </span><span style="color:#586E75;font-style:italic;">// 报错，类型声明type中的extends关键字不是严格意义上的继承</span></span>
<span class="line"><span style="color:#CB4B16;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">N3</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;"> {} </span><span style="color:#586E75;font-style:italic;">// 报错&quot;string&quot;仅表示类型，但在此处却作为值使用</span></span>
<span class="line"><span style="color:#CB4B16;">interface</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">N4</span><span style="color:#839496;"> </span><span style="color:#93A1A1;font-weight:bold;">extends</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">String</span><span style="color:#839496;"> {} </span><span style="color:#586E75;font-style:italic;">// ok</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ol start="3"><li>请用 jsdoc 在 js 中实现第一题, 建议把类型写在 .d.ts 文件中, 在 js 文件中 import 类型</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> * </span><span style="color:#93A1A1;font-weight:bold;">@param</span><span style="color:#586E75;font-style:italic;"> </span><span style="color:#CB4B16;">{MouseEvent}</span><span style="color:#586E75;font-style:italic;"> </span><span style="color:#268BD2;font-style:italic;">event</span></span>
<span class="line"><span style="color:#586E75;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">foo</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> event </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">event</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,18),e=[o];function t(r,c,y,i,b,d){return n(),a("div",null,e)}const B=s(p,[["render",t]]);export{m as __pageData,B as default};
