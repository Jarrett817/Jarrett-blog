import{A as o,_ as l,a as p,b as e,c as t,d as r,e as c,f as i}from"./chunks/ApiTest.6A2F-EZ-.js";import{a2 as y,G as d,a5 as s,O as h,ao as a,E as m}from"./chunks/framework.C1rSk1pR.js";import"./chunks/theme.DXZAdxYV.js";/* empty css                                                                       */const u=a(`<h1 id="接口测试平台" tabindex="-1">接口测试平台 <a class="header-anchor" href="#接口测试平台" aria-label="Permalink to &quot;接口测试平台&quot;">​</a></h1><h2 id="yapi-简介" tabindex="-1">yapi 简介 <a class="header-anchor" href="#yapi-简介" aria-label="Permalink to &quot;yapi 简介&quot;">​</a></h2><p>yapi 是一个开源的接口管理平台，目前 star 数量 27.3k，具备以下特性：</p><ol><li>权限管理</li><li>项目管理</li><li>可视化接口管理，接口修改记录可追溯</li><li>基于 mock.js，方便的 mock 数据生成器</li><li>接口自动化测试</li><li>数据导入，支持 swagger、postman、har 数据格式，便于迁移</li></ol><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><p>新建项目-&gt;新建分类-&gt;添加接口</p><blockquote><p>手动演示</p></blockquote><p>配置接口代理，使用<code>nginx</code>或者<code>代理工具</code>配置代理</p><h4 id="举例-nginx-代理配置" tabindex="-1">举例 nginx 代理配置 <a class="header-anchor" href="#举例-nginx-代理配置" aria-label="Permalink to &quot;举例 nginx 代理配置&quot;">​</a></h4><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">server</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#859900;">  listen </span><span style="color:#D33682;">443</span><span style="color:#839496;"> ssl;</span></span>
<span class="line"><span style="color:#859900;">  server_name </span><span style="color:#839496;">test.jarrett.com;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">  ssl_certificate </span><span style="color:#839496;">SSL/test.jarrett.com.crt;</span></span>
<span class="line"><span style="color:#859900;">  ssl_certificate_key </span><span style="color:#839496;">SSL/test.jarrett.com.key;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  location</span><span style="color:#839496;"> / {</span></span>
<span class="line"><span style="color:#859900;">    proxy_pass </span><span style="color:#839496;">https://xx.xx.x.xxx:443/;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">Host https://xx.xx.x.xxx:443/;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Real-IP </span><span style="color:#859900;">$</span><span style="color:#268BD2;">remote_addr</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Forwarded-For </span><span style="color:#859900;">$</span><span style="color:#268BD2;">proxy_add_x_forwarded_for</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Forwarded-Photo </span><span style="color:#859900;">$</span><span style="color:#268BD2;">scheme</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">  location</span><span style="color:#839496;"> /api/getUsers{</span></span>
<span class="line"><span style="color:#859900;">    proxy_pass </span><span style="color:#839496;">http://xx.xx.x.xxx:3000/mock/83/api/getUsers;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">Host http://xx.xx.x.xxx:3000;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Real-IP </span><span style="color:#859900;">$</span><span style="color:#268BD2;">remote_addr</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Forwarded-For </span><span style="color:#859900;">$</span><span style="color:#268BD2;">proxy_add_x_forwarded_for</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#859900;">    proxy_set_header </span><span style="color:#839496;">X-Forwarded-Photo </span><span style="color:#859900;">$</span><span style="color:#268BD2;">scheme</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre></div><p>vite 热更新配置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#859900;">  &quot;server&quot;</span><span style="color:#839496;">: {</span></span>
<span class="line"><span style="color:#859900;">    &quot;hmr&quot;</span><span style="color:#839496;">: {</span></span>
<span class="line"><span style="color:#859900;">      &quot;port&quot;</span><span style="color:#839496;">: </span><span style="color:#D33682;">8888</span><span style="color:#586E75;font-style:italic;"> // 对应nginx监听的端口</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre></div><p>接口测试</p>`,13),_=a(`<h2 id="创建模拟数据" tabindex="-1">创建模拟数据 <a class="header-anchor" href="#创建模拟数据" aria-label="Permalink to &quot;创建模拟数据&quot;">​</a></h2><h3 id="mockjs-使用语法" tabindex="-1">mockjs 使用语法 <a class="header-anchor" href="#mockjs-使用语法" aria-label="Permalink to &quot;mockjs 使用语法&quot;">​</a></h3><p><a href="http://mockjs.com/examples.html" target="_blank" rel="noreferrer">数据模板定义示例</a></p><p>常用语法</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#859900;">  &quot;age|1-100&quot;</span><span style="color:#839496;">: </span><span style="color:#D33682;">100</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">  &quot;value|123.3&quot;</span><span style="color:#839496;">: </span><span style="color:#D33682;">123.111</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">  &quot;isVip|1-2&quot;</span><span style="color:#839496;">: </span><span style="color:#B58900;">true</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">  &quot;list|1-100&quot;</span><span style="color:#839496;">: [{ </span><span style="color:#859900;">&quot;name&quot;</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&quot;test&quot;</span><span style="color:#839496;"> }],</span></span>
<span class="line"><span style="color:#859900;">  &quot;address|2&quot;</span><span style="color:#839496;">: {</span></span>
<span class="line"><span style="color:#859900;">    &quot;310000&quot;</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&quot;上海市&quot;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">    &quot;320000&quot;</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&quot;江苏省&quot;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">    &quot;330000&quot;</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&quot;浙江省&quot;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#859900;">    &quot;340000&quot;</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&quot;安徽省&quot;</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre></div><h3 id="json-schema" tabindex="-1">json-schema <a class="header-anchor" href="#json-schema" aria-label="Permalink to &quot;json-schema&quot;">​</a></h3><p><img src="`+l+`" alt="json-schema" loading="lazy"></p><h2 id="高级-mock" tabindex="-1">高级 mock <a class="header-anchor" href="#高级-mock" aria-label="Permalink to &quot;高级 mock&quot;">​</a></h2><h3 id="mock-期望" tabindex="-1">Mock 期望 <a class="header-anchor" href="#mock-期望" aria-label="Permalink to &quot;Mock 期望&quot;">​</a></h3><ul><li>自定义过滤规则，返回自定义数据，支持 mock</li><li>可定义接口延时</li><li>可定义 http 状态码</li></ul><h3 id="自定义-mock-脚本" tabindex="-1">自定义 Mock 脚本 <a class="header-anchor" href="#自定义-mock-脚本" aria-label="Permalink to &quot;自定义 Mock 脚本&quot;">​</a></h3><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h4><p>请求</p><ul><li><code>header</code> 请求的 HTTP 头</li><li><code>params</code> 请求参数，包括 Body、Query 中所有参数</li><li><code>cookie</code> 请求带的 Cookies</li></ul><p>响应</p><ul><li><code>mockJson</code> 接口定义的响应数据 Mock 模板</li><li><code>resHeader</code> 响应的 HTTP 头</li><li><code>httpCode</code> 响应的 HTTP 状态码</li><li><code>delay</code> Mock 响应延时，单位为 ms</li><li><code>Random</code> Mock.Random 方法，可以添加自定义占位符,详细使用方法请查看</li></ul><p>示例 1，根据请求参数重写 mockJson</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki solarized-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">params</span><span style="color:#839496;">.</span><span style="color:#268BD2;">type</span><span style="color:#859900;"> ==</span><span style="color:#D33682;"> 1</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errcode</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 400</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errmsg</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;error&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">header</span><span style="color:#839496;">.</span><span style="color:#268BD2;">token</span><span style="color:#859900;"> ==</span><span style="color:#2AA198;"> &#39;t&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errcode</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 300</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errmsg</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;error&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">cookie</span><span style="color:#839496;">.</span><span style="color:#268BD2;">type</span><span style="color:#859900;"> ==</span><span style="color:#2AA198;"> &#39;a&#39;</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errcode</span><span style="color:#859900;"> =</span><span style="color:#D33682;"> 500</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#268BD2;">  mockJson</span><span style="color:#839496;">.</span><span style="color:#268BD2;">errmsg</span><span style="color:#859900;"> =</span><span style="color:#2AA198;"> &#39;error&#39;</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre></div><h2 id="自动化测试" tabindex="-1">自动化测试 <a class="header-anchor" href="#自动化测试" aria-label="Permalink to &quot;自动化测试&quot;">​</a></h2><p>传统的接口自动化测试成本高，大量的项目没有使用自动化测试保证接口的质量，仅仅依靠手动测试，是非常不可靠和容易出错的。</p><p>YApi 为了解决这个问题，开发了可视化接口自动化测试功能，只需要配置每个接口的入参和对 RESPONSE 断言，即可实现对接口的自动化测试，大大提升了接口测试的效率。</p><p><img src="`+p+'" alt="自动化测试" loading="lazy"></p><p>用例之间可以互相引用数据</p><p><img src="'+e+'" alt="" loading="lazy"></p><p><img src="'+t+'" alt="" loading="lazy"></p><h2 id="竞品" tabindex="-1">竞品 <a class="header-anchor" href="#竞品" aria-label="Permalink to &quot;竞品&quot;">​</a></h2><p>市面上还有一些商业化接口管理平台，如 Apifox，提供了更加丰富的功能，可付费私有化部署</p><p><a href="https://app.apifox.com/main/teams/2803313?tab=project" target="_blank" rel="noreferrer">Apifox</a></p><h3 id="数据模型" tabindex="-1">数据模型 <a class="header-anchor" href="#数据模型" aria-label="Permalink to &quot;数据模型&quot;">​</a></h3><p><img src="'+r+'" alt="数据模型" loading="lazy"></p><h3 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h3><p><img src="'+c+'" alt="编辑组件" loading="lazy"></p><p><img src="'+i+'" alt="使用组件" loading="lazy"></p>',33),P=JSON.parse('{"title":"接口测试平台","description":"","frontmatter":{},"headers":[],"relativePath":"plan/api-test/index.md","filePath":"plan/api-test/index.md","lastUpdated":1734073656000}'),x={name:"plan/api-test/index.md"},B=Object.assign(x,{setup(k){return(q,b)=>{const n=y("ClientOnly");return m(),d("div",null,[u,s(n,null,{default:h(()=>[s(o)]),_:1}),_])}}});export{P as __pageData,B as default};
