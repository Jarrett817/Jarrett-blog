import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.8636b00c.js";const p="/Jarrett-blog/assets/browser-server.d25bed38.png",e="/Jarrett-blog/assets/mvc.502c4236.png",o="/Jarrett-blog/assets/vue-reactive.f79dd221.png",v=JSON.parse('{"title":"vue","description":"","frontmatter":{"title":"vue","desc":"《JavaScript设计模式》、《大话设计模式》笔记","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[],"relativePath":"front-end/vue/index.md","filePath":"front-end/vue/index.md","lastUpdated":1699284118000}'),r={name:"front-end/vue/index.md"},t=l('<h1 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h1><h2 id="为什么要使用单页面应用" tabindex="-1">为什么要使用单页面应用 <a class="header-anchor" href="#为什么要使用单页面应用" aria-label="Permalink to &quot;为什么要使用单页面应用&quot;">​</a></h2><h3 id="传统的网页应用" tabindex="-1">传统的网页应用 <a class="header-anchor" href="#传统的网页应用" aria-label="Permalink to &quot;传统的网页应用&quot;">​</a></h3><hr><p><img src="'+p+'" alt=""><img src="'+e+'" alt=""> 传统的网页应用，浏览器作为展示层，路由处理、服务调用、页面跳转都由后端处理，即便有 ajax，但也并不是标准的单页面应用。 这种网页应用的重心都在后端，后端几乎包揽了 MVC，浏览器端仅是一个展示层</p><h3 id="单页面应用" tabindex="-1">单页面应用 <a class="header-anchor" href="#单页面应用" aria-label="Permalink to &quot;单页面应用&quot;">​</a></h3><hr><p>MVC 前置到浏览器端，前端负责路由，各个小的组件组成页面，在路由变化时，不刷新整个页面，仅仅是组合小的组件，替换变化部分。甚至数据层也在前端，前端封装后端 API，这种情况下，后端只是提供操作数据库的 API</p><h3 id="单页面应用的优点" tabindex="-1">单页面应用的优点 <a class="header-anchor" href="#单页面应用的优点" aria-label="Permalink to &quot;单页面应用的优点&quot;">​</a></h3><hr><ul><li>不刷新页面，相应快速，提升了用户体验</li><li>前端组件化，代码的结构和组织更加规划化，利于修改和维护，并且可以开发独立的组件库，开发时直接使用即可，极大提高了开发效率</li><li>API 共享，如果要多端开发（浏览器、微信、安卓、ios），只需要修改容易变化的前端 UI，对后端 API 的调用基本是相同的，极大的降低了开发成本</li></ul><h3 id="单页面应用的缺点" tabindex="-1">单页面应用的缺点 <a class="header-anchor" href="#单页面应用的缺点" aria-label="Permalink to &quot;单页面应用的缺点&quot;">​</a></h3><hr><ul><li>首次加载大量资源</li><li>提高了前端的技术门槛</li><li>不利于 SEO，因为数据在前端渲染，动态的数据不利于爬虫抓取</li><li>不方便使用浏览器自带的导航</li></ul><hr><h2 id="vue-核心" tabindex="-1">vue 核心 <a class="header-anchor" href="#vue-核心" aria-label="Permalink to &quot;vue 核心&quot;">​</a></h2><h3 id="vue-的响应式原理" tabindex="-1">vue 的响应式原理 <a class="header-anchor" href="#vue-的响应式原理" aria-label="Permalink to &quot;vue 的响应式原理&quot;">​</a></h3><p>vue2 通过数据劫持 ➕ 发布订阅模式实现数据响应式 主要由<code>Object.defineProperty</code>、<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>实现 <img src="'+o+`" alt=""></p><h4 id="observer、dep-和-watcher" tabindex="-1">Observer、Dep 和 Watcher <a class="header-anchor" href="#observer、dep-和-watcher" aria-label="Permalink to &quot;Observer、Dep 和 Watcher&quot;">​</a></h4><hr><p>Vue 封装了一个<code>defineReactive</code>方法来对数据进行<code>defineProperty</code>改造</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">defineReactive</span><span style="color:#839496;">(obj</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Object</span><span style="color:#839496;">, key</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">string</span><span style="color:#839496;">, val</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">any</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">Object</span><span style="color:#839496;">.</span><span style="color:#268BD2;">defineProperty</span><span style="color:#839496;">(</span><span style="color:#268BD2;">obj</span><span style="color:#839496;">, </span><span style="color:#268BD2;">key</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">get</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reactiveGetter</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;font-style:italic;">//添加依赖</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">depend</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">set</span><span style="color:#839496;">: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> </span><span style="color:#268BD2;">reactiveSetter</span><span style="color:#839496;">(newVal) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;font-style:italic;">//发布</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">notify</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  });</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><code>defineReactive</code>方法在改造数据的时候，数据 get 时进行依赖的添加，set 时发布</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Observer</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  value</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">any</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  dep</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Dep</span><span style="color:#839496;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;"> (value</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">any</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">value</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">value</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">dep</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Dep</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;">(</span><span style="color:#268BD2;">Array</span><span style="color:#839496;">.</span><span style="color:#268BD2;">isArray</span><span style="color:#839496;">(</span><span style="color:#268BD2;">value</span><span style="color:#839496;">)){</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;font-style:italic;">//遍历出来挨个用Observer去new一下</span></span>
<span class="line"><span style="color:#839496;">    }</span><span style="color:#859900;">else</span><span style="color:#839496;">{</span></span>
<span class="line"><span style="color:#839496;">       </span><span style="color:#586E75;font-style:italic;">//是对象就遍历，挨个进行响应式改造改造</span></span>
<span class="line"><span style="color:#839496;">       </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">keys</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Object</span><span style="color:#839496;">.</span><span style="color:#268BD2;">keys</span><span style="color:#839496;">(</span><span style="color:#268BD2;">obj</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">       </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">keys</span><span style="color:#839496;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">           </span><span style="color:#268BD2;">defineReactive</span><span style="color:#839496;">(</span><span style="color:#268BD2;">obj</span><span style="color:#839496;">, </span><span style="color:#268BD2;">keys</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">])</span></span>
<span class="line"><span style="color:#839496;">       }</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#839496;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>Observer</code>的作用其实就是<strong>数据劫持</strong>，而 Vue 让每一个<strong>响应式</strong>的数据都是被<code>Observer</code>改造过的</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Dep</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">static</span><span style="color:#839496;"> target</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">?</span><span style="color:#CB4B16;">Watcher</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  id</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#859900;">number</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">  subs</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Array</span><span style="color:#839496;">&lt;</span><span style="color:#CB4B16;">Watcher</span><span style="color:#839496;">&gt;;</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#93A1A1;font-weight:bold;">constructor</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">id</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">uid</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">subs</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> [];</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">addSub</span><span style="color:#839496;">(sub</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Watcher</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">subs</span><span style="color:#839496;">.</span><span style="color:#268BD2;">push</span><span style="color:#839496;">(</span><span style="color:#268BD2;">sub</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">removeSub</span><span style="color:#839496;">(sub</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Watcher</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">remove</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">subs</span><span style="color:#839496;">, </span><span style="color:#268BD2;">sub</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">depend</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">Dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">target</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">Dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">target</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addDep</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">notify</span><span style="color:#839496;">() {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">subs</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">subs</span><span style="color:#839496;">.</span><span style="color:#268BD2;">slice</span><span style="color:#839496;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">for</span><span style="color:#839496;"> (</span><span style="color:#93A1A1;font-weight:bold;">let</span><span style="color:#839496;"> </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#D33682;">0</span><span style="color:#839496;">, </span><span style="color:#268BD2;">l</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">subs</span><span style="color:#839496;">.length; </span><span style="color:#268BD2;">i</span><span style="color:#839496;"> </span><span style="color:#859900;">&lt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">l</span><span style="color:#839496;">; </span><span style="color:#268BD2;">i</span><span style="color:#859900;">++</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">subs</span><span style="color:#839496;">[</span><span style="color:#268BD2;">i</span><span style="color:#839496;">].</span><span style="color:#268BD2;">update</span><span style="color:#839496;">();</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#268BD2;">复制代码</span><span style="color:#839496;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><code>dep</code>里维护一个<code>watcher</code>列表<code>subs</code>，并且有<code>depend</code>和<code>notify</code>方法，能添加<code>watcher</code>并且发布通知，在 get 数据时，添加<code>watcher</code>到<code>subs</code>，<code>set</code>数据时，遍历<code>subs</code>并挨个执行更新 <code>Watcher</code>  类，<code>addDep</code>添加依赖（订阅），并具有<code>update</code>方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">class</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Watcher</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">addDep</span><span style="color:#839496;"> (dep</span><span style="color:#859900;">:</span><span style="color:#839496;"> </span><span style="color:#CB4B16;">Dep</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">id</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">id</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;font-style:italic;">//添加依赖（订阅操作）</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">dep</span><span style="color:#839496;">.</span><span style="color:#268BD2;">addSub</span><span style="color:#839496;">(</span><span style="color:#268BD2;">this</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">update</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">run</span><span style="color:#839496;">()</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">run</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#859900;">if</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">active</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">       </span><span style="color:#586E75;font-style:italic;">//执行数据更新</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="关于对象" tabindex="-1">关于对象 <a class="header-anchor" href="#关于对象" aria-label="Permalink to &quot;关于对象&quot;">​</a></h2><p>vue 无法检测属性的添加或移除，对于已经创建的实例，Vue 不允许动态添加根级别的响应式 property。但是可以用<code>Vue.set(object,propertyName,value)</code> 如果要为已有对象赋值多个新的 property，应该用原对象与要混合进去的对象的 property 一起创建一个新的对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// 代替 \`Object.assign(this.someObject, { a: 1, b: 2 })\`</span></span>
<span class="line"><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">someObject</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Object</span><span style="color:#839496;">.</span><span style="color:#268BD2;">assign</span><span style="color:#839496;">({}, </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">someObject</span><span style="color:#839496;">, { a: </span><span style="color:#D33682;">1</span><span style="color:#839496;">, b: </span><span style="color:#D33682;">2</span><span style="color:#839496;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="关于数组" tabindex="-1">关于数组 <a class="header-anchor" href="#关于数组" aria-label="Permalink to &quot;关于数组&quot;">​</a></h2><p>数据也不是响应式的，直接修改数组内某项和修改数组的长度都是无法被检测的。也需要用 Vue.set</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// Vue.set</span></span>
<span class="line"><span style="color:#268BD2;">Vue</span><span style="color:#839496;">.</span><span style="color:#268BD2;">set</span><span style="color:#839496;">(</span><span style="color:#268BD2;">vm</span><span style="color:#839496;">.</span><span style="color:#268BD2;">items</span><span style="color:#839496;">, </span><span style="color:#268BD2;">indexOfItem</span><span style="color:#839496;">, </span><span style="color:#268BD2;">newValue</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>vue 改写了数组的常用方法，用这些方法操作数组能使数组被检测到</p><ul><li><code>push()</code></li><li><code>pop()</code></li><li><code>shift()</code></li><li><code>unshift()</code></li><li><code>splice()</code></li><li><code>sort()</code></li><li><code>reverse()</code></li></ul><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>生命周期钩子自动绑定 this 上下文，所以不能用尖头函数，因为箭头函数绑定了父上下文，而不是当前实例</p><table><thead><tr><th>生命周期钩子</th><th>调用时机</th></tr></thead><tbody><tr><td>beforeCreate</td><td>实例初始化后，还没有进行数据观测 (data observer) 和 event/watcher 事件配置</td></tr><tr><td>created</td><td>实例创建完成之后立即调用，已经完成数据观测 (data observer)，property 和方法的运算，watch/event 事件回调，但还没有挂载 dom，所以$el 不可用</td></tr><tr><td>beforeMount</td><td>挂载开始之前，render 首次被调用</td></tr><tr><td>mounted</td><td>挂载完毕时调用，此时根实例已经挂载到了某个文档元素上。但是不保证所有子组建也都被挂载，用 vm.$nextTick 可等到整个视图渲染完毕</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，但是是在虚拟 dom 打补丁之前</td></tr><tr><td>updated</td><td>虚拟 dom 重新渲染和打补丁完毕后调用。</td></tr><tr><td>updated 不会保证所有的子组件一起被重绘，如果要等到整个视图重绘完毕，需要使用 vm.$nextTick</td><td></td></tr><tr><td>activated</td><td>kepp-alive 缓存的组建激活时调用</td></tr><tr><td>deactivated</td><td>keep-alive 的组件停用时调用</td></tr><tr><td>beforeDestroy</td><td>实例销毁前调用，这一步里实例仍然完全可用</td></tr><tr><td>destroyed</td><td>实例销毁后调用</td></tr></tbody></table><h2 id="组件间通信" tabindex="-1">组件间通信 <a class="header-anchor" href="#组件间通信" aria-label="Permalink to &quot;组件间通信&quot;">​</a></h2><ol><li>父传子用 prop</li><li>子向父用$on和$emit，子组件通知父组件改值</li><li>兄弟组件传值，通过父组件传递或者用 eventBus</li></ol><p>举例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">//Bus.js</span></span>
<span class="line"><span style="color:#859900;">import</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vue</span><span style="color:#839496;"> </span><span style="color:#859900;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#859900;">export</span><span style="color:#839496;"> </span><span style="color:#859900;">default</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vue</span><span style="color:#839496;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//Child1.vue</span></span>
<span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">template</span><span style="color:#586E75;">&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">button</span><span style="color:#839496;"> </span><span style="color:#DC322F;">@click=&quot;clickHandle&quot;&gt;</span><span style="color:#839496;"> </span><span style="color:#DC322F;">{</span><span style="color:#839496;">{</span><span style="color:#268BD2;">n</span><span style="color:#839496;">}</span><span style="color:#DC322F;">}&lt;/button&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#93A1A1;">import</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">Event</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;../bus&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;">export</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">default</span><span style="color:#839496;"> </span><span style="color:#DC322F;">{</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">name</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&#39;Child1&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">data</span><span style="color:#839496;">(){</span></span>
<span class="line"><span style="color:#839496;">    return{</span></span>
<span class="line"><span style="color:#839496;">      n:</span><span style="color:#D33682;">100</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">methods</span><span style="color:#839496;">: {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">clickHandle</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">Event</span><span style="color:#839496;">.</span><span style="color:#268BD2;">$emit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;update:count&#39;</span><span style="color:#839496;">,</span><span style="color:#268BD2;">n</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#DC322F;">}</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;style&gt;</span></span>
<span class="line"><span style="color:#839496;"> </span><span style="color:#DC322F;">...</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/style&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#586E75;font-style:italic;">//Child2.vue</span></span>
<span class="line"><span style="color:#DC322F;">&lt;template&gt;</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#DC322F;">&lt;p&gt;这是新的n:{{n}}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/template&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#93A1A1;">import</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">Event</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">from</span><span style="color:#839496;"> </span><span style="color:#2AA198;">&#39;../bus&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#93A1A1;">export</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">default</span><span style="color:#839496;"> </span><span style="color:#DC322F;">{</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">name</span><span style="color:#839496;">: </span><span style="color:#2AA198;">&#39;Child2&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">data</span><span style="color:#839496;">(){</span></span>
<span class="line"><span style="color:#839496;">    return{</span></span>
<span class="line"><span style="color:#839496;">      n:</span><span style="color:#D33682;">0</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">created</span><span style="color:#839496;">(){</span></span>
<span class="line"><span style="color:#839496;">      Event.$on(</span><span style="color:#2AA198;">&#39;update:count&#39;</span><span style="color:#839496;">,(n)=&gt;{</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">console</span><span style="color:#839496;">.</span><span style="color:#268BD2;">log</span><span style="color:#839496;">(</span><span style="color:#268BD2;">n</span><span style="color:#839496;">)</span></span>
<span class="line"><span style="color:#839496;">        </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">n</span><span style="color:#859900;">=</span><span style="color:#268BD2;">n</span></span>
<span class="line"><span style="color:#839496;">      })</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#DC322F;">}</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#DC322F;">&lt;style&gt;</span></span>
<span class="line"><span style="color:#839496;"> </span><span style="color:#DC322F;">...</span></span>
<span class="line"><span style="color:#DC322F;">&lt;/style&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><ol start="4"><li>任意组件传值，用 vuex</li></ol><h2 id="其他不常用的方法" tabindex="-1">其他不常用的方法 <a class="header-anchor" href="#其他不常用的方法" aria-label="Permalink to &quot;其他不常用的方法&quot;">​</a></h2><ol><li>所有子组件都可以通过<code>$root</code>获取根实例。</li></ol><p>可以直接<code>this.$root.xxx</code>读写根组件的数据、计算属性和方法。 可以将根实例作为一个全局 store 来使用 只适用于小型 demo，大型项目直接用 vuex</p><ol start="2"><li>子组件可以通过<code>$parent</code>访问父组件</li></ol><p>用法同上，但是不推荐使用，因为这样会导致程序复杂时无法得知父组件的变更是从哪里发起的</p><ol start="3"><li>依赖注入 provide/inject</li></ol><p>祖先组件提供一个数据/方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">provide: </span><span style="color:#93A1A1;font-weight:bold;">function</span><span style="color:#839496;"> () {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#859900;">return</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">    getMap: </span><span style="color:#268BD2;">this</span><span style="color:#839496;">.</span><span style="color:#268BD2;">getMap</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>任意的后代获取这个数据/方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">inject: [</span><span style="color:#2AA198;">&#39;getMap&#39;</span><span style="color:#839496;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>ref 访问子组件实例或子元素</li></ol><p>你可以通过 <code>ref</code> 这个 attribute 为子组件赋予一个 ID 引用。例如：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;">&lt;</span><span style="color:#268BD2;">base-input</span><span style="color:#839496;"> </span><span style="color:#93A1A1;">ref</span><span style="color:#839496;">=</span><span style="color:#2AA198;">&quot;usernameInput&quot;</span><span style="color:#586E75;">&gt;&lt;/</span><span style="color:#268BD2;">base-input</span><span style="color:#586E75;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>现在在你已经定义了这个 <code>ref</code> 的组件里，你可以使用：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#839496;">this.$refs.usernameInput</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>$refs</code>只会在组件渲染完成后生效，并且不是响应式的。避免在模版或计算属性中访问$refs</p><h2 id="vuex-核心" tabindex="-1">vuex 核心 <a class="header-anchor" href="#vuex-核心" aria-label="Permalink to &quot;vuex 核心&quot;">​</a></h2><p>vuex 是一个单一状态树，作为一个唯一数据源使用</p><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h3><p>全局注册</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">app</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vue</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  el: </span><span style="color:#2AA198;">&#39;#app&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#586E75;font-style:italic;">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">store</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  components: { </span><span style="color:#268BD2;">Counter</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  template: </span><span style="color:#2AA198;">\`</span></span>
<span class="line"><span style="color:#2AA198;">    &lt;div class=&quot;app&quot;&gt;</span></span>
<span class="line"><span style="color:#2AA198;">      &lt;counter&gt;&lt;/counter&gt;</span></span>
<span class="line"><span style="color:#2AA198;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#2AA198;">  \`</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过 this.$store 访问，vuex 也是响应式的，我们可以用计算属性获取 vuex 中的数据</p><h3 id="getters" tabindex="-1">Getters <a class="header-anchor" href="#getters" aria-label="Permalink to &quot;Getters&quot;">​</a></h3><p>vuex 的计算属性 接受 state 作为第一个参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vuex</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Store</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  state: {</span></span>
<span class="line"><span style="color:#839496;">    todos: [</span></span>
<span class="line"><span style="color:#839496;">      { id: </span><span style="color:#D33682;">1</span><span style="color:#839496;">, text: </span><span style="color:#2AA198;">&#39;...&#39;</span><span style="color:#839496;">, done: </span><span style="color:#B58900;">true</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">      { id: </span><span style="color:#D33682;">2</span><span style="color:#839496;">, text: </span><span style="color:#2AA198;">&#39;...&#39;</span><span style="color:#839496;">, done: </span><span style="color:#B58900;">false</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#839496;">    ]</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  getters: {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">doneTodos</span><span style="color:#839496;">: state </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#859900;">return</span><span style="color:#839496;"> </span><span style="color:#268BD2;">state</span><span style="color:#839496;">.</span><span style="color:#268BD2;">todos</span><span style="color:#839496;">.</span><span style="color:#268BD2;">filter</span><span style="color:#839496;">(todo </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> </span><span style="color:#268BD2;">todo</span><span style="color:#839496;">.</span><span style="color:#268BD2;">done</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>同样通过 <code>this.$store.getters.xxx</code>  访问 getter 也可以返回一个函数，可以实现给 getter 传参，但是这样会每次都进行调用，而不会缓存结果</p><h3 id="mutations" tabindex="-1">Mutations <a class="header-anchor" href="#mutations" aria-label="Permalink to &quot;Mutations&quot;">​</a></h3><p>注册一个事件，接收 state 作为第一个参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vuex</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Store</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  state: {</span></span>
<span class="line"><span style="color:#839496;">    count: </span><span style="color:#D33682;">1</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  mutations: {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">increment</span><span style="color:#839496;">(state) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#586E75;font-style:italic;">// 变更状态</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">state</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>子组件中触发这个事件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">commit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;increment&#39;</span><span style="color:#839496;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以传参数，vuex 里叫做 <strong>载荷 payload</strong>  可以传单个参数，推荐用对象的形式提交载荷</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#586E75;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#839496;">mutations: {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">increment</span><span style="color:#839496;"> (</span><span style="color:#268BD2;">state</span><span style="color:#839496;">, </span><span style="color:#268BD2;">payload</span><span style="color:#839496;">) {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">state</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#839496;"> </span><span style="color:#859900;">+=</span><span style="color:#839496;"> </span><span style="color:#268BD2;">payload</span><span style="color:#839496;">.</span><span style="color:#268BD2;">amount</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">commit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;increment&#39;</span><span style="color:#839496;">, {</span></span>
<span class="line"><span style="color:#839496;">  amount: </span><span style="color:#D33682;">10</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>此外，还有对象风格的提交方式，其他用法照常</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#268BD2;">store</span><span style="color:#839496;">.</span><span style="color:#268BD2;">commit</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  type: </span><span style="color:#2AA198;">&#39;increment&#39;</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">  amount: </span><span style="color:#D33682;">10</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>mutation 需要遵守 Vue 的响应规则</p><h3 id="actions" tabindex="-1">Actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;Actions&quot;">​</a></h3><p>mutation 必须是同步函数，异步回调中进行的状态的改变都是不可追踪的 Action 类似于 mutation，但是</p><ul><li>Action 提交的是 mutation，而不是直接变更状态</li><li>Action 可以包含任意异步操作</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vuex</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Store</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  state: {</span></span>
<span class="line"><span style="color:#839496;">    count: </span><span style="color:#D33682;">0</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  mutations: {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">increment</span><span style="color:#839496;">(state) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">state</span><span style="color:#839496;">.</span><span style="color:#268BD2;">count</span><span style="color:#859900;">++</span><span style="color:#839496;">;</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  },</span></span>
<span class="line"><span style="color:#839496;">  actions: {</span></span>
<span class="line"><span style="color:#839496;">    </span><span style="color:#268BD2;">increment</span><span style="color:#839496;">(context) {</span></span>
<span class="line"><span style="color:#839496;">      </span><span style="color:#268BD2;">context</span><span style="color:#839496;">.</span><span style="color:#268BD2;">commit</span><span style="color:#839496;">(</span><span style="color:#2AA198;">&#39;increment&#39;</span><span style="color:#839496;">);</span></span>
<span class="line"><span style="color:#839496;">    }</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h3><p>为了避免 store 太过臃肿，我们可以分割模块</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki solarized-dark"><code><span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">moduleA</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">state</span><span style="color:#839496;">: () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> ({ </span><span style="color:#859900;">...</span><span style="color:#839496;"> }),</span></span>
<span class="line"><span style="color:#839496;">  mutations: { </span><span style="color:#859900;">...</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  actions: { </span><span style="color:#859900;">...</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  getters: { </span><span style="color:#859900;">...</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">moduleB</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> {</span></span>
<span class="line"><span style="color:#839496;">  </span><span style="color:#268BD2;">state</span><span style="color:#839496;">: () </span><span style="color:#93A1A1;font-weight:bold;">=&gt;</span><span style="color:#839496;"> ({ </span><span style="color:#859900;">...</span><span style="color:#839496;"> }),</span></span>
<span class="line"><span style="color:#839496;">  mutations: { </span><span style="color:#859900;">...</span><span style="color:#839496;"> },</span></span>
<span class="line"><span style="color:#839496;">  actions: { </span><span style="color:#859900;">...</span><span style="color:#839496;"> }</span></span>
<span class="line"><span style="color:#839496;">}</span></span>
<span class="line"><span style="color:#93A1A1;font-weight:bold;">const</span><span style="color:#839496;"> </span><span style="color:#268BD2;">store</span><span style="color:#839496;"> </span><span style="color:#859900;">=</span><span style="color:#839496;"> </span><span style="color:#859900;">new</span><span style="color:#839496;"> </span><span style="color:#268BD2;">Vuex</span><span style="color:#839496;">.</span><span style="color:#268BD2;">Store</span><span style="color:#839496;">({</span></span>
<span class="line"><span style="color:#839496;">  modules: {</span></span>
<span class="line"><span style="color:#839496;">    a: </span><span style="color:#268BD2;">moduleA</span><span style="color:#839496;">,</span></span>
<span class="line"><span style="color:#839496;">    b: </span><span style="color:#268BD2;">moduleB</span></span>
<span class="line"><span style="color:#839496;">  }</span></span>
<span class="line"><span style="color:#839496;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,88),c=[t];function i(y,b,d,u,m,h){return n(),a("div",null,c)}const B=s(r,[["render",i]]);export{v as __pageData,B as default};
