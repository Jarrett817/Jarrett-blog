import{o as l,c as e,b as n,d as i}from"./app.dff7797b.js";const s='{"title":"node","description":"","frontmatter":{"title":"node","desc":"《JavaScript设计模式》、《大话设计模式》笔记","keywords":"设计模式、笔记","date":"2020-02-17T01:01:00.000Z","cover":"https://cdn.jsdelivr.net/gh/chengpeiquan/assets-storage/img/2020/02/1.jpg"},"headers":[{"level":2,"title":"nodejs 是什么？","slug":"nodejs-是什么？"},{"level":2,"title":"nodejs bindings","slug":"nodejs-bindings"},{"level":2,"title":"libuv&v8","slug":"libuv-v8"},{"level":3,"title":"libuv","slug":"libuv"},{"level":3,"title":"v8","slug":"v8"},{"level":2,"title":"nodejs Event Loop 简述","slug":"nodejs-event-loop-简述"}],"relativePath":"front-end/nodejs/index.md","lastUpdated":1658914366593}',d={},a=[n("h1",{id:"nodejs"},[n("a",{class:"header-anchor",href:"#nodejs","aria-hidden":"true"},"#"),i(" nodejs")],-1),n("h2",{id:"nodejs-是什么？"},[n("a",{class:"header-anchor",href:"#nodejs-是什么？","aria-hidden":"true"},"#"),i(" nodejs 是什么？")],-1),n("p",null,[i("不是 web 框架，也不是编程语言，而是一个将多种技术组合起来的平台 用到了 v8 引擎，libuv，c/c++实现的 c-ares、http-parser、OpenSSL、zlib 等 "),n("img",{src:"/Jarrett-blog/assets/nodejs-API.3c57ece5.png",alt:"NodeJS的API.png"}),i(" 源代码看 0.10 版本，因为使用了很久一段时间")],-1),n("h2",{id:"nodejs-bindings"},[n("a",{class:"header-anchor",href:"#nodejs-bindings","aria-hidden":"true"},"#"),i(" nodejs bindings")],-1),n("ul",null,[n("li",null,"为了让 js 能够调用 c++库，需要对其进行封装，使它符合某些要求，如对 http_parser 封装为 http_parser_bindings.cpp"),n("li",null,"用 node 提供的编译工具将其编译为.node 文件，于是 js 可以直接 require 这个.node 文件"),n("li",null,"binding 是 js 调用 c++库的桥梁")],-1),n("p",null,[n("a",{href:"http://nodejs.cn/api/addons.html#addons_function_arguments",target:"_blank",rel:"noopener noreferrer"},"官方示例")],-1),n("h2",{id:"libuv-v8"},[n("a",{class:"header-anchor",href:"#libuv-v8","aria-hidden":"true"},"#"),i(" libuv&v8")],-1),n("h3",{id:"libuv"},[n("a",{class:"header-anchor",href:"#libuv","aria-hidden":"true"},"#"),i(" libuv")],-1),n("ul",null,[n("li",null,"libuv 让 nodejs 具备跨平台的异步 IO 能力"),n("li",null,"因为 FreeBSD 系统上有 kqueue、windows 上有 IOCP、Linux 上有 epoll，nodejs 之父 Ryan 为了实现一个跨平台的异步 I/O 库写了 libuv，会根据系统自动选择合适的方案"),n("li",null,"可以用于 TCP/UDP/DNS/文件等异步操作")],-1),n("h3",{id:"v8"},[n("a",{class:"header-anchor",href:"#v8","aria-hidden":"true"},"#"),i(" v8")],-1),n("ul",null,[n("li",null,"将 js 源代码变成本地代码并执行"),n("li",null,"维护调用栈，确保 JS 的执行顺序"),n("li",null,"内存管理，为所有对象分配内存"),n("li",null,"垃圾回收，重复利用无用的内存"),n("li",null,"实现 JS 的标准库")],-1),n("p",null,"注意点：",-1),n("ul",null,[n("li",null,"v8 不提供 DOM API，dom 是浏览器提供的"),n("li",null,"v8 执行 JS 是单线程的"),n("li",null,"可以开启两个线程分别执行 JS"),n("li",null,"V8 本身是包含多个线程的，如垃圾回收为单独线程"),n("li",null,"自带 Event Loop，但 nodejs 基于 libuv 实现了一版")],-1),n("h2",{id:"nodejs-event-loop-简述"},[n("a",{class:"header-anchor",href:"#nodejs-event-loop-简述","aria-hidden":"true"},"#"),i(" nodejs Event Loop 简述")],-1),n("p",null,"事件存在优先级，处理起来分先后 操作系统可以触发事件，JS 可以处理事件，Event Loop 就是对事件处理的顺序管理",-1),n("p",null,"--",-1),n("p",null,[n("img",{src:"/Jarrett-blog/assets/event-loop.638c7f58.png",alt:"timers.png"})],-1),n("ul",null,[n("li",null,"poll 阶段处理大部分的请求"),n("li",null,"timers 检查计时器"),n("li",null,"poll 轮询，检查系统事件"),n("li",null,"check 检查 setImmediate 回调"),n("li",null,"其他阶段用得较少")],-1)];d.render=function(n,i,s,d,r,o){return l(),e("div",null,a)};export{s as __pageData,d as default};
